
kzload.elf:     file format elf32-h8300


Disassembly of section .vectors:

00000000 <_vectors>:
   0:	00 00       	nop	
   2:	01 00       	.word	H'1,H'0
	...
  20:	00 00       	nop	
  22:	01 60       	.word	H'1,H'60
  24:	00 00       	nop	
  26:	01 0c       	.word	H'1,H'c
  28:	00 00       	nop	
  2a:	01 0c       	.word	H'1,H'c
  2c:	00 00       	nop	
  2e:	01 0c       	.word	H'1,H'c
	...
  44:	00 00       	nop	
  46:	02 5c       	.word	H'2,H'5c
	...
  90:	00 00       	nop	
  92:	02 08       	stc	ccr,r0l
  94:	00 00       	nop	
  96:	02 08       	stc	ccr,r0l
  98:	00 00       	nop	
  9a:	02 08       	stc	ccr,r0l
  9c:	00 00       	nop	
  9e:	02 08       	stc	ccr,r0l
  a0:	00 00       	nop	
  a2:	02 08       	stc	ccr,r0l
  a4:	00 00       	nop	
  a6:	02 08       	stc	ccr,r0l
  a8:	00 00       	nop	
  aa:	02 08       	stc	ccr,r0l
  ac:	00 00       	nop	
  ae:	02 08       	stc	ccr,r0l
	...
  d0:	00 00       	nop	
  d2:	01 b4       	.word	H'1,H'b4
  d4:	00 00       	nop	
  d6:	01 b4       	.word	H'1,H'b4
  d8:	00 00       	nop	
  da:	01 b4       	.word	H'1,H'b4
  dc:	00 00       	nop	
  de:	01 b4       	.word	H'1,H'b4
  e0:	00 00       	nop	
  e2:	01 b4       	.word	H'1,H'b4
  e4:	00 00       	nop	
  e6:	01 b4       	.word	H'1,H'b4
  e8:	00 00       	nop	
  ea:	01 b4       	.word	H'1,H'b4
  ec:	00 00       	nop	
  ee:	01 b4       	.word	H'1,H'b4
  f0:	00 00       	nop	
  f2:	01 b4       	.word	H'1,H'b4
  f4:	00 00       	nop	
  f6:	01 b4       	.word	H'1,H'b4
  f8:	00 00       	nop	
  fa:	01 b4       	.word	H'1,H'b4
  fc:	00 00       	nop	
  fe:	01 b4       	.word	H'1,H'b4

Disassembly of section .text:

00000100 <_start>:
.Letext0():
 100:	7a 07 00 ff 	mov.l	#0xffff00,er7
 104:	ff 00 
 106:	5e 00 0c f6 	jsr	@0xcf6:24

0000010a <.L11>:
.L11():
 10a:	40 fe       	bra	.-2 (0x10a)

0000010c <_intr_softerr>:
_intr_softerr():
 10c:	01 00 6d f6 	mov.l	er6,@-er7
 110:	01 00 6d f5 	mov.l	er5,@-er7
 114:	01 00 6d f4 	mov.l	er4,@-er7
 118:	01 00 6d f3 	mov.l	er3,@-er7
 11c:	01 00 6d f2 	mov.l	er2,@-er7
 120:	01 00 6d f1 	mov.l	er1,@-er7
 124:	01 00 6d f0 	mov.l	er0,@-er7
 128:	0f f1       	mov.l	er7,er1
 12a:	7a 07 00 ff 	mov.l	#0xffff00,er7
 12e:	ff 00 
 130:	01 00 6d f1 	mov.l	er1,@-er7
 134:	79 00 00 00 	mov.w	#0x0,r0
 138:	5e 00 03 56 	jsr	@0x356:24
 13c:	01 00 6d 71 	mov.l	@er7+,er1
 140:	0f 97       	mov.l	er1,er7
 142:	01 00 6d 70 	mov.l	@er7+,er0
 146:	01 00 6d 71 	mov.l	@er7+,er1
 14a:	01 00 6d 72 	mov.l	@er7+,er2
 14e:	01 00 6d 73 	mov.l	@er7+,er3
 152:	01 00 6d 74 	mov.l	@er7+,er4
 156:	01 00 6d 75 	mov.l	@er7+,er5
 15a:	01 00 6d 76 	mov.l	@er7+,er6
 15e:	56 70       	rte	

00000160 <_intr_syscall>:
_intr_syscall():
 160:	01 00 6d f6 	mov.l	er6,@-er7
 164:	01 00 6d f5 	mov.l	er5,@-er7
 168:	01 00 6d f4 	mov.l	er4,@-er7
 16c:	01 00 6d f3 	mov.l	er3,@-er7
 170:	01 00 6d f2 	mov.l	er2,@-er7
 174:	01 00 6d f1 	mov.l	er1,@-er7
 178:	01 00 6d f0 	mov.l	er0,@-er7
 17c:	0f f1       	mov.l	er7,er1
 17e:	7a 07 00 ff 	mov.l	#0xffff00,er7
 182:	ff 00 
 184:	01 00 6d f1 	mov.l	er1,@-er7
 188:	79 00 00 01 	mov.w	#0x1,r0
 18c:	5e 00 03 56 	jsr	@0x356:24
 190:	01 00 6d 71 	mov.l	@er7+,er1
 194:	0f 97       	mov.l	er1,er7
 196:	01 00 6d 70 	mov.l	@er7+,er0
 19a:	01 00 6d 71 	mov.l	@er7+,er1
 19e:	01 00 6d 72 	mov.l	@er7+,er2
 1a2:	01 00 6d 73 	mov.l	@er7+,er3
 1a6:	01 00 6d 74 	mov.l	@er7+,er4
 1aa:	01 00 6d 75 	mov.l	@er7+,er5
 1ae:	01 00 6d 76 	mov.l	@er7+,er6
 1b2:	56 70       	rte	

000001b4 <_intr_serintr>:
_intr_serintr():
 1b4:	01 00 6d f6 	mov.l	er6,@-er7
 1b8:	01 00 6d f5 	mov.l	er5,@-er7
 1bc:	01 00 6d f4 	mov.l	er4,@-er7
 1c0:	01 00 6d f3 	mov.l	er3,@-er7
 1c4:	01 00 6d f2 	mov.l	er2,@-er7
 1c8:	01 00 6d f1 	mov.l	er1,@-er7
 1cc:	01 00 6d f0 	mov.l	er0,@-er7
 1d0:	0f f1       	mov.l	er7,er1
 1d2:	7a 07 00 ff 	mov.l	#0xffff00,er7
 1d6:	ff 00 
 1d8:	01 00 6d f1 	mov.l	er1,@-er7
 1dc:	79 00 00 02 	mov.w	#0x2,r0
 1e0:	5e 00 03 56 	jsr	@0x356:24
 1e4:	01 00 6d 71 	mov.l	@er7+,er1
 1e8:	0f 97       	mov.l	er1,er7
 1ea:	01 00 6d 70 	mov.l	@er7+,er0
 1ee:	01 00 6d 71 	mov.l	@er7+,er1
 1f2:	01 00 6d 72 	mov.l	@er7+,er2
 1f6:	01 00 6d 73 	mov.l	@er7+,er3
 1fa:	01 00 6d 74 	mov.l	@er7+,er4
 1fe:	01 00 6d 75 	mov.l	@er7+,er5
 202:	01 00 6d 76 	mov.l	@er7+,er6
 206:	56 70       	rte	

00000208 <_intr_timintr>:
_intr_timintr():
 208:	01 00 6d f6 	mov.l	er6,@-er7
 20c:	01 00 6d f5 	mov.l	er5,@-er7
 210:	01 00 6d f4 	mov.l	er4,@-er7
 214:	01 00 6d f3 	mov.l	er3,@-er7
 218:	01 00 6d f2 	mov.l	er2,@-er7
 21c:	01 00 6d f1 	mov.l	er1,@-er7
 220:	01 00 6d f0 	mov.l	er0,@-er7
 224:	0f f1       	mov.l	er7,er1
 226:	7a 07 00 ff 	mov.l	#0xffff00,er7
 22a:	ff 00 
 22c:	01 00 6d f1 	mov.l	er1,@-er7
 230:	79 00 00 03 	mov.w	#0x3,r0
 234:	5e 00 03 56 	jsr	@0x356:24
 238:	01 00 6d 71 	mov.l	@er7+,er1
 23c:	0f 97       	mov.l	er1,er7
 23e:	01 00 6d 70 	mov.l	@er7+,er0
 242:	01 00 6d 71 	mov.l	@er7+,er1
 246:	01 00 6d 72 	mov.l	@er7+,er2
 24a:	01 00 6d 73 	mov.l	@er7+,er3
 24e:	01 00 6d 74 	mov.l	@er7+,er4
 252:	01 00 6d 75 	mov.l	@er7+,er5
 256:	01 00 6d 76 	mov.l	@er7+,er6
 25a:	56 70       	rte	

0000025c <_intr_ethintr>:
_intr_ethintr():
 25c:	01 00 6d f6 	mov.l	er6,@-er7
 260:	01 00 6d f5 	mov.l	er5,@-er7
 264:	01 00 6d f4 	mov.l	er4,@-er7
 268:	01 00 6d f3 	mov.l	er3,@-er7
 26c:	01 00 6d f2 	mov.l	er2,@-er7
 270:	01 00 6d f1 	mov.l	er1,@-er7
 274:	01 00 6d f0 	mov.l	er0,@-er7
 278:	0f f1       	mov.l	er7,er1
 27a:	7a 07 00 ff 	mov.l	#0xffff00,er7
 27e:	ff 00 
 280:	01 00 6d f1 	mov.l	er1,@-er7
 284:	79 00 00 04 	mov.w	#0x4,r0
 288:	5e 00 03 56 	jsr	@0x356:24
 28c:	01 00 6d 71 	mov.l	@er7+,er1
 290:	0f 97       	mov.l	er1,er7
 292:	01 00 6d 70 	mov.l	@er7+,er0
 296:	01 00 6d 71 	mov.l	@er7+,er1
 29a:	01 00 6d 72 	mov.l	@er7+,er2
 29e:	01 00 6d 73 	mov.l	@er7+,er3
 2a2:	01 00 6d 74 	mov.l	@er7+,er4
 2a6:	01 00 6d 75 	mov.l	@er7+,er5
 2aa:	01 00 6d 76 	mov.l	@er7+,er6
 2ae:	56 70       	rte	

000002b0 <_softvec_init>:
softvec_init():
/home/interrupt.c:7
#include "intr.h"
#include "interrupt.h"

/* ソフトウエア・割込みベクタの初期化 */
int softvec_init(void)
{
 2b0:	01 00 6d f6 	mov.l	er6,@-er7
 2b4:	0f f6       	mov.l	er7,er6

000002b6 <.LBB4>:
softvec_setintr():
/home/interrupt.c:17
}

/* ソフトウエア・割込みベクタの設定 */
int softvec_setintr(softvec_type_t type, softvec_handler_t handler)
{
  SOFTVECS[type] = handler;
 2b6:	18 aa       	sub.b	r2l,r2l
 2b8:	6a aa 00 ff 	mov.b	r2l,@0xffbf20:32
 2bc:	bf 20 
 2be:	6a aa 00 ff 	mov.b	r2l,@0xffbf21:32
 2c2:	bf 21 
 2c4:	6a aa 00 ff 	mov.b	r2l,@0xffbf22:32
 2c8:	bf 22 
 2ca:	6a aa 00 ff 	mov.b	r2l,@0xffbf23:32
 2ce:	bf 23 
 2d0:	6a aa 00 ff 	mov.b	r2l,@0xffbf24:32
 2d4:	bf 24 
 2d6:	6a aa 00 ff 	mov.b	r2l,@0xffbf25:32
 2da:	bf 25 
 2dc:	6a aa 00 ff 	mov.b	r2l,@0xffbf26:32
 2e0:	bf 26 
 2e2:	6a aa 00 ff 	mov.b	r2l,@0xffbf27:32
 2e6:	bf 27 
 2e8:	6a aa 00 ff 	mov.b	r2l,@0xffbf28:32
 2ec:	bf 28 
 2ee:	6a aa 00 ff 	mov.b	r2l,@0xffbf29:32
 2f2:	bf 29 
 2f4:	6a aa 00 ff 	mov.b	r2l,@0xffbf2a:32
 2f8:	bf 2a 
 2fa:	6a aa 00 ff 	mov.b	r2l,@0xffbf2b:32
 2fe:	bf 2b 
 300:	6a aa 00 ff 	mov.b	r2l,@0xffbf2c:32
 304:	bf 2c 
 306:	6a aa 00 ff 	mov.b	r2l,@0xffbf2d:32
 30a:	bf 2d 
 30c:	6a aa 00 ff 	mov.b	r2l,@0xffbf2e:32
 310:	bf 2e 
 312:	6a aa 00 ff 	mov.b	r2l,@0xffbf2f:32
 316:	bf 2f 
 318:	6a aa 00 ff 	mov.b	r2l,@0xffbf30:32
 31c:	bf 30 
 31e:	6a aa 00 ff 	mov.b	r2l,@0xffbf31:32
 322:	bf 31 
 324:	6a aa 00 ff 	mov.b	r2l,@0xffbf32:32
 328:	bf 32 
 32a:	6a aa 00 ff 	mov.b	r2l,@0xffbf33:32
 32e:	bf 33 

00000330 <.LM3>:
softvec_init():
/home/interrupt.c:12
}
 330:	19 00       	sub.w	r0,r0
 332:	01 00 6d 76 	mov.l	@er7+,er6
 336:	54 70       	rts	

00000338 <_softvec_setintr>:
softvec_setintr():
/home/interrupt.c:16
{
 338:	01 00 6d f6 	mov.l	er6,@-er7
 33c:	0f f6       	mov.l	er7,er6

0000033e <.LM5>:
/home/interrupt.c:17
  SOFTVECS[type] = handler;
 33e:	17 f0       	exts.l	er0
 340:	10 30       	shll.l	er0
 342:	10 30       	shll.l	er0
 344:	01 00 78 80 	mov.l	er1,@(0xffbf20:32,er0)
 348:	6b a1 00 ff 
 34c:	bf 20 

0000034e <.LM6>:
/home/interrupt.c:19
  return 0;
}
 34e:	19 00       	sub.w	r0,r0
 350:	01 00 6d 76 	mov.l	@er7+,er6
 354:	54 70       	rts	

00000356 <_interrupt>:
interrupt():
/home/interrupt.c:26
/*
 * 共通割込みハンドラ．
 * ソフトウエア・割込みベクタを見て，各ハンドラに分岐する．
 */
void interrupt(softvec_type_t type, unsigned long sp)
{
 356:	01 00 6d f6 	mov.l	er6,@-er7
 35a:	0f f6       	mov.l	er7,er6

0000035c <.LM8>:
/home/interrupt.c:27
  softvec_handler_t handler = SOFTVECS[type];
 35c:	0d 02       	mov.w	r0,r2
 35e:	17 f2       	exts.l	er2
 360:	10 32       	shll.l	er2
 362:	10 32       	shll.l	er2
 364:	01 00 78 20 	mov.l	@(0xffbf20:32,er2),er2
 368:	6b 22 00 ff 
 36c:	bf 20 

0000036e <.LM9>:
/home/interrupt.c:28
  if (handler)
 36e:	47 02       	beq	.+2 (0x372)

00000370 <.LM10>:
/home/interrupt.c:29
    handler(type, sp);
 370:	5d 20       	jsr	@er2

00000372 <.L3>:
/home/interrupt.c:30
}
 372:	01 00 6d 76 	mov.l	@er7+,er6
 376:	54 70       	rts	

00000378 <_memset>:
memset():
/home/lib.c:6
#include "defines.h"
#include "serial.h"
#include "lib.h"

void *memset(void *b, int c, long len)
{
 378:	01 00 6d f6 	mov.l	er6,@-er7
 37c:	0f f6       	mov.l	er7,er6
 37e:	01 00 6d f4 	mov.l	er4,@-er7

00000382 <.LM2>:
/home/lib.c:8
  char *p;
  for (p = b; len > 0; len--)
 382:	0f 83       	mov.l	er0,er3
 384:	0a 82       	add.l	er0,er2
 386:	40 04       	bra	.+4 (0x38c)

00000388 <.L3>:
/home/lib.c:9 (discriminator 3)
    *(p++) = c;
 388:	68 b9       	mov.b	r1l,@er3
 38a:	0b 03       	adds	#1,er3

0000038c <.L2>:
 38c:	0f a4       	mov.l	er2,er4
 38e:	1a b4       	sub.l	er3,er4

00000390 <.LM4>:
/home/lib.c:8 (discriminator 1)
  for (p = b; len > 0; len--)
 390:	0f c4       	mov.l	er4,er4
 392:	4e f4       	bgt	.-12 (0x388)

00000394 <.LM5>:
/home/lib.c:11
  return b;
}
 394:	01 00 6d 74 	mov.l	@er7+,er4
 398:	01 00 6d 76 	mov.l	@er7+,er6
 39c:	54 70       	rts	

0000039e <_memcpy>:
memcpy():
/home/lib.c:14

void *memcpy(void *dst, const void *src, long len)
{
 39e:	01 00 6d f6 	mov.l	er6,@-er7
 3a2:	0f f6       	mov.l	er7,er6
 3a4:	01 00 6d f4 	mov.l	er4,@-er7
 3a8:	01 00 6d f5 	mov.l	er5,@-er7

000003ac <.LM7>:
/home/lib.c:17
  char *d = dst;
  const char *s = src;
  for (; len > 0; len--)
 3ac:	1a b3       	sub.l	er3,er3
 3ae:	40 0e       	bra	.+14 (0x3be)

000003b0 <.L6>:
/home/lib.c:18 (discriminator 2)
    *(d++) = *(s++);
 3b0:	0f 94       	mov.l	er1,er4
 3b2:	0a b4       	add.l	er3,er4
 3b4:	68 4d       	mov.b	@er4,r5l
 3b6:	0f 84       	mov.l	er0,er4
 3b8:	0a b4       	add.l	er3,er4
 3ba:	68 cd       	mov.b	r5l,@er4
 3bc:	0b 03       	adds	#1,er3

000003be <.L5>:
 3be:	0f a4       	mov.l	er2,er4
 3c0:	1a b4       	sub.l	er3,er4

000003c2 <.LM9>:
/home/lib.c:17 (discriminator 1)
  for (; len > 0; len--)
 3c2:	0f c4       	mov.l	er4,er4
 3c4:	4e ea       	bgt	.-22 (0x3b0)

000003c6 <.LM10>:
/home/lib.c:20
  return dst;
}
 3c6:	01 00 6d 75 	mov.l	@er7+,er5
 3ca:	01 00 6d 74 	mov.l	@er7+,er4
 3ce:	01 00 6d 76 	mov.l	@er7+,er6
 3d2:	54 70       	rts	

000003d4 <_memcmp>:
memcmp():
/home/lib.c:23

int memcmp(const void *b1, const void *b2, long len)
{
 3d4:	01 00 6d f6 	mov.l	er6,@-er7
 3d8:	0f f6       	mov.l	er7,er6
 3da:	01 00 6d f4 	mov.l	er4,@-er7
 3de:	0a 82       	add.l	er0,er2

000003e0 <.LM12>:
/home/lib.c:25
  const char *p1 = b1, *p2 = b2;
  for (; len > 0; len--) {
 3e0:	40 14       	bra	.+20 (0x3f6)

000003e2 <.L11>:
/home/lib.c:26
    if (*p1 != *p2)
 3e2:	68 0c       	mov.b	@er0,r4l
 3e4:	68 1b       	mov.b	@er1,r3l
 3e6:	1c bc       	cmp.b	r3l,r4l
 3e8:	47 08       	beq	.+8 (0x3f2)

000003ea <.LM14>:
/home/lib.c:27
      return (*p1 > *p2) ? 1 : -1;
 3ea:	42 16       	bhi	.+22 (0x402)
 3ec:	79 00 ff ff 	mov.w	#0xffff,r0
 3f0:	40 14       	bra	.+20 (0x406)

000003f2 <.L9>:
/home/lib.c:28
    p1++;
 3f2:	0b 00       	adds	#1,er0

000003f4 <.LM16>:
/home/lib.c:29
    p2++;
 3f4:	0b 01       	adds	#1,er1

000003f6 <.L8>:
 3f6:	0f a3       	mov.l	er2,er3
 3f8:	1a 83       	sub.l	er0,er3

000003fa <.LM17>:
/home/lib.c:25 (discriminator 1)
  for (; len > 0; len--) {
 3fa:	0f b3       	mov.l	er3,er3
 3fc:	4e e4       	bgt	.-28 (0x3e2)

000003fe <.LM18>:
/home/lib.c:31
  }
  return 0;
 3fe:	19 00       	sub.w	r0,r0
 400:	40 04       	bra	.+4 (0x406)

00000402 <.L12>:
/home/lib.c:27
      return (*p1 > *p2) ? 1 : -1;
 402:	79 00 00 01 	mov.w	#0x1,r0

00000406 <.L7>:
/home/lib.c:32
}
 406:	01 00 6d 74 	mov.l	@er7+,er4
 40a:	01 00 6d 76 	mov.l	@er7+,er6
 40e:	54 70       	rts	

00000410 <_strlen>:
strlen():
/home/lib.c:35

int strlen(const char *s)
{
 410:	01 00 6d f6 	mov.l	er6,@-er7
 414:	0f f6       	mov.l	er7,er6

00000416 <.LM22>:
/home/lib.c:37
  int len;
  for (len = 0; *s; s++, len++)
 416:	19 22       	sub.w	r2,r2
 418:	40 04       	bra	.+4 (0x41e)

0000041a <.L15>:
/home/lib.c:37 (discriminator 3)
 41a:	0b 00       	adds	#1,er0
 41c:	0b 02       	adds	#1,er2

0000041e <.L14>:
/home/lib.c:37 (discriminator 1)
 41e:	68 0b       	mov.b	@er0,r3l
 420:	46 f8       	bne	.-8 (0x41a)

00000422 <.LM25>:
/home/lib.c:40
    ;
  return len;
}
 422:	0d 20       	mov.w	r2,r0
 424:	01 00 6d 76 	mov.l	@er7+,er6
 428:	54 70       	rts	

0000042a <_strcpy>:
strcpy():
/home/lib.c:43

char *strcpy(char *dst, const char *src)
{
 42a:	01 00 6d f6 	mov.l	er6,@-er7
 42e:	0f f6       	mov.l	er7,er6

00000430 <.LM27>:
 430:	0f 82       	mov.l	er0,er2

00000432 <.L18>:
/home/lib.c:46
  char *d = dst;
  for (;; dst++, src++) {
    *dst = *src;
 432:	68 1b       	mov.b	@er1,r3l
 434:	68 ab       	mov.b	r3l,@er2

00000436 <.LM29>:
/home/lib.c:47
    if (!*src) break;
 436:	68 1b       	mov.b	@er1,r3l
 438:	47 06       	beq	.+6 (0x440)

0000043a <.LM30>:
/home/lib.c:45
  for (;; dst++, src++) {
 43a:	0b 02       	adds	#1,er2
 43c:	0b 01       	adds	#1,er1

0000043e <.LM31>:
/home/lib.c:46
    *dst = *src;
 43e:	40 f2       	bra	.-14 (0x432)

00000440 <.L17>:
/home/lib.c:50
  }
  return d;
}
 440:	01 00 6d 76 	mov.l	@er7+,er6
 444:	54 70       	rts	

00000446 <_strcmp>:
strcmp():
/home/lib.c:53

int strcmp(const char *s1, const char *s2)
{
 446:	01 00 6d f6 	mov.l	er6,@-er7
 44a:	0f f6       	mov.l	er7,er6

0000044c <.LM34>:
/home/lib.c:54
  while (*s1 || *s2) {
 44c:	40 10       	bra	.+16 (0x45e)

0000044e <.L23>:
/home/lib.c:55
    if (*s1 != *s2)
 44e:	1c ba       	cmp.b	r3l,r2l
 450:	47 08       	beq	.+8 (0x45a)

00000452 <.LM36>:
/home/lib.c:56
      return (*s1 > *s2) ? 1 : -1;
 452:	44 20       	bcc	.+32 (0x474)
 454:	79 00 00 01 	mov.w	#0x1,r0
 458:	40 1e       	bra	.+30 (0x478)

0000045a <.L21>:
/home/lib.c:57
    s1++;
 45a:	0b 00       	adds	#1,er0

0000045c <.LM38>:
/home/lib.c:58
    s2++;
 45c:	0b 01       	adds	#1,er1

0000045e <.L20>:
/home/lib.c:54
  while (*s1 || *s2) {
 45e:	68 0b       	mov.b	@er0,r3l
 460:	68 1a       	mov.b	@er1,r2l
 462:	0c bb       	mov.b	r3l,r3l
 464:	46 e8       	bne	.-24 (0x44e)

00000466 <.LM40>:
/home/lib.c:54 (discriminator 1)
 466:	79 00 00 01 	mov.w	#0x1,r0
 46a:	0c aa       	mov.b	r2l,r2l
 46c:	46 02       	bne	.+2 (0x470)
 46e:	19 00       	sub.w	r0,r0

00000470 <.L24>:
 470:	17 90       	neg.w	r0
 472:	40 04       	bra	.+4 (0x478)

00000474 <.L25>:
/home/lib.c:56
      return (*s1 > *s2) ? 1 : -1;
 474:	79 00 ff ff 	mov.w	#0xffff,r0

00000478 <.L19>:
/home/lib.c:61
  }
  return 0;
}
 478:	01 00 6d 76 	mov.l	@er7+,er6
 47c:	54 70       	rts	

0000047e <_strncmp>:
strncmp():
/home/lib.c:64

int strncmp(const char *s1, const char *s2, int len)
{
 47e:	01 00 6d f6 	mov.l	er6,@-er7
 482:	0f f6       	mov.l	er7,er6
 484:	01 00 6d f4 	mov.l	er4,@-er7

00000488 <.LM44>:
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 488:	40 14       	bra	.+20 (0x49e)

0000048a <.L32>:
/home/lib.c:66
    if (*s1 != *s2)
 48a:	68 1c       	mov.b	@er1,r4l
 48c:	1c bc       	cmp.b	r3l,r4l
 48e:	47 08       	beq	.+8 (0x498)

00000490 <.LM46>:
/home/lib.c:67
      return (*s1 > *s2) ? 1 : -1;
 490:	45 1e       	bcs	.+30 (0x4b0)
 492:	79 00 ff ff 	mov.w	#0xffff,r0
 496:	40 2a       	bra	.+42 (0x4c2)

00000498 <.L28>:
/home/lib.c:68
    s1++;
 498:	0b 00       	adds	#1,er0

0000049a <.LM48>:
/home/lib.c:69
    s2++;
 49a:	0b 01       	adds	#1,er1

0000049c <.LM49>:
/home/lib.c:70
    len--;
 49c:	1b 02       	subs	#1,er2

0000049e <.L27>:
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 49e:	68 0b       	mov.b	@er0,r3l
 4a0:	46 06       	bne	.+6 (0x4a8)

000004a2 <.LM51>:
/home/lib.c:65 (discriminator 2)
 4a2:	68 1b       	mov.b	@er1,r3l
 4a4:	46 10       	bne	.+16 (0x4b6)
 4a6:	40 04       	bra	.+4 (0x4ac)

000004a8 <.L30>:
/home/lib.c:65 (discriminator 3)
 4a8:	0d 22       	mov.w	r2,r2
 4aa:	4e de       	bgt	.-34 (0x48a)

000004ac <.L35>:
/home/lib.c:72
  }
  return 0;
 4ac:	19 00       	sub.w	r0,r0
 4ae:	40 12       	bra	.+18 (0x4c2)

000004b0 <.L34>:
/home/lib.c:67
      return (*s1 > *s2) ? 1 : -1;
 4b0:	79 00 00 01 	mov.w	#0x1,r0
 4b4:	40 0c       	bra	.+12 (0x4c2)

000004b6 <.L31>:
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 4b6:	79 00 00 01 	mov.w	#0x1,r0
 4ba:	0d 22       	mov.w	r2,r2
 4bc:	4e 02       	bgt	.+2 (0x4c0)
 4be:	19 00       	sub.w	r0,r0

000004c0 <.L33>:
 4c0:	17 90       	neg.w	r0

000004c2 <.L26>:
/home/lib.c:73
}
 4c2:	01 00 6d 74 	mov.l	@er7+,er4
 4c6:	01 00 6d 76 	mov.l	@er7+,er6
 4ca:	54 70       	rts	

000004cc <_putc>:
putc():
/home/lib.c:77

/* １文字送信 */
int putc(unsigned char c)
{
 4cc:	01 00 6d f6 	mov.l	er6,@-er7
 4d0:	0f f6       	mov.l	er7,er6
 4d2:	01 00 6d f4 	mov.l	er4,@-er7
 4d6:	0c 8c       	mov.b	r0l,r4l

000004d8 <.LM58>:
/home/lib.c:78
  if (c == '\n')
 4d8:	a8 0a       	cmp.b	#0xa,r0l
 4da:	46 0a       	bne	.+10 (0x4e6)

000004dc <.LM59>:
/home/lib.c:79
    serial_send_byte(SERIAL_DEFAULT_DEVICE, '\r');
 4dc:	f9 0d       	mov.b	#0xd,r1l
 4de:	79 00 00 01 	mov.w	#0x1,r0
 4e2:	5e 00 06 58 	jsr	@0x658:24

000004e6 <.L37>:
/home/lib.c:80
  return serial_send_byte(SERIAL_DEFAULT_DEVICE, c);
 4e6:	0c c9       	mov.b	r4l,r1l
 4e8:	79 00 00 01 	mov.w	#0x1,r0
 4ec:	5e 00 06 58 	jsr	@0x658:24

000004f0 <.LM61>:
/home/lib.c:81
}
 4f0:	01 00 6d 74 	mov.l	@er7+,er4
 4f4:	01 00 6d 76 	mov.l	@er7+,er6
 4f8:	54 70       	rts	

000004fa <_getc>:
getc():
/home/lib.c:85

/* １文字受信 */
unsigned char getc(void)
{
 4fa:	01 00 6d f6 	mov.l	er6,@-er7
 4fe:	0f f6       	mov.l	er7,er6
 500:	01 00 6d f4 	mov.l	er4,@-er7

00000504 <.LM63>:
/home/lib.c:86
  unsigned char c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 504:	79 00 00 01 	mov.w	#0x1,r0
 508:	5e 00 06 ae 	jsr	@0x6ae:24

0000050c <.LVL60>:
 50c:	0c 8c       	mov.b	r0l,r4l

0000050e <.LM64>:
/home/lib.c:87
  c = (c == '\r') ? '\n' : c;
 50e:	a8 0d       	cmp.b	#0xd,r0l
 510:	46 02       	bne	.+2 (0x514)
 512:	fc 0a       	mov.b	#0xa,r4l

00000514 <.L39>:
/home/lib.c:88 (discriminator 4)
  putc(c); /* エコー・バック */
 514:	0c c8       	mov.b	r4l,r0l
 516:	5e 00 04 cc 	jsr	@0x4cc:24

0000051a <.LM66>:
/home/lib.c:90
  return c;
}
 51a:	0c c8       	mov.b	r4l,r0l
 51c:	01 00 6d 74 	mov.l	@er7+,er4
 520:	01 00 6d 76 	mov.l	@er7+,er6
 524:	54 70       	rts	

00000526 <_puts>:
puts():
/home/lib.c:94

/* 文字列送信 */
int puts(unsigned char *str)
{
 526:	01 00 6d f6 	mov.l	er6,@-er7
 52a:	0f f6       	mov.l	er7,er6
 52c:	01 00 6d f4 	mov.l	er4,@-er7
 530:	0f 84       	mov.l	er0,er4

00000532 <.LM68>:
/home/lib.c:95
  while (*str)
 532:	40 06       	bra	.+6 (0x53a)

00000534 <.L42>:
/home/lib.c:96
    putc(*(str++));
 534:	0b 04       	adds	#1,er4
 536:	5e 00 04 cc 	jsr	@0x4cc:24

0000053a <.L41>:
/home/lib.c:95
  while (*str)
 53a:	68 48       	mov.b	@er4,r0l
 53c:	46 f6       	bne	.-10 (0x534)

0000053e <.LM71>:
/home/lib.c:98
  return 0;
}
 53e:	19 00       	sub.w	r0,r0
 540:	01 00 6d 74 	mov.l	@er7+,er4
 544:	01 00 6d 76 	mov.l	@er7+,er6
 548:	54 70       	rts	

0000054a <_gets>:
gets():
/home/lib.c:102

/* 文字列受信 */
int gets(unsigned char *buf)
{
 54a:	01 00 6d f6 	mov.l	er6,@-er7
 54e:	0f f6       	mov.l	er7,er6
 550:	01 00 6d f4 	mov.l	er4,@-er7
 554:	01 00 6d f5 	mov.l	er5,@-er7
 558:	1b 97       	subs	#4,er7
 55a:	0f 85       	mov.l	er0,er5

0000055c <.LM73>:
 55c:	0f 84       	mov.l	er0,er4

0000055e <.L45>:
 55e:	0d 42       	mov.w	r4,r2
 560:	19 52       	sub.w	r5,r2

00000562 <.LM74>:
/home/lib.c:106
  int i = 0;
  unsigned char c;
  do {
    c = getc();
 562:	01 00 6f e2 	mov.l	er2,@(0xfff4:16,er6)
 566:	ff f4 
 568:	5e 00 04 fa 	jsr	@0x4fa:24

0000056c <.LM75>:
/home/lib.c:107
    if (c == '\n')
 56c:	01 00 6f 62 	mov.l	@(0xfff4:16,er6),er2
 570:	ff f4 
 572:	a8 0a       	cmp.b	#0xa,r0l
 574:	46 02       	bne	.+2 (0x578)

00000576 <.LM76>:
/home/lib.c:108
      c = '\0';
 576:	18 88       	sub.b	r0l,r0l

00000578 <.L44>:
/home/lib.c:109
    buf[i++] = c;
 578:	68 c8       	mov.b	r0l,@er4
 57a:	0b 04       	adds	#1,er4

0000057c <.LM78>:
/home/lib.c:110
  } while (c);
 57c:	46 e0       	bne	.-32 (0x55e)

0000057e <.LM79>:
/home/lib.c:112
  return i - 1;
}
 57e:	0d 20       	mov.w	r2,r0
 580:	0b 97       	adds	#4,er7
 582:	01 00 6d 75 	mov.l	@er7+,er5
 586:	01 00 6d 74 	mov.l	@er7+,er4
 58a:	01 00 6d 76 	mov.l	@er7+,er6
 58e:	54 70       	rts	

00000590 <_putxval>:
putxval():
/home/lib.c:116

/* 数値の16進表示 */
int putxval(unsigned long value, int column)
{
 590:	01 00 6d f6 	mov.l	er6,@-er7
 594:	0f f6       	mov.l	er7,er6
 596:	01 00 6d f4 	mov.l	er4,@-er7
 59a:	7a 37 00 00 	sub.l	#0xc,er7
 59e:	00 0c 

000005a0 <.LM81>:
/home/lib.c:121
  char buf[9];
  char *p;

  p = buf + sizeof(buf) - 1;
  *(p--) = '\0';
 5a0:	18 aa       	sub.b	r2l,r2l
 5a2:	6e ea ff fb 	mov.b	r2l,@(0xfffb:16,er6)

000005a6 <.LM82>:
/home/lib.c:123

  if (!value && !column)
 5a6:	0f 80       	mov.l	er0,er0
 5a8:	46 08       	bne	.+8 (0x5b2)

000005aa <.LM83>:
/home/lib.c:123 (discriminator 1)
 5aa:	0d 11       	mov.w	r1,r1
 5ac:	46 04       	bne	.+4 (0x5b2)

000005ae <.LM84>:
/home/lib.c:124
    column++;
 5ae:	79 01 00 01 	mov.w	#0x1,r1

000005b2 <.L48>:
 5b2:	0f e2       	mov.l	er6,er2
 5b4:	1b 92       	subs	#4,er2
 5b6:	1b 82       	subs	#2,er2

000005b8 <.LM85>:
/home/lib.c:127

  while (value || column) {
    *(p--) = "0123456789abcdef"[value & 0xf];
 5b8:	7a 04 00 00 	mov.l	#0xfe5,er4
 5bc:	0f e5 
 5be:	40 1c       	bra	.+28 (0x5dc)

000005c0 <.L51>:
 5c0:	1a b3       	sub.l	er3,er3
 5c2:	0c 8b       	mov.b	r0l,r3l
 5c4:	eb 0f       	and.b	#0xf,r3l
 5c6:	0a c3       	add.l	er4,er3
 5c8:	68 3b       	mov.b	@er3,r3l
 5ca:	68 ab       	mov.b	r3l,@er2

000005cc <.LM86>:
/home/lib.c:128
    value >>= 4;
 5cc:	11 30       	shlr.l	er0
 5ce:	11 30       	shlr.l	er0
 5d0:	11 30       	shlr.l	er0
 5d2:	11 30       	shlr.l	er0

000005d4 <.LM87>:
/home/lib.c:129
    if (column) column--;
 5d4:	0d 11       	mov.w	r1,r1
 5d6:	47 02       	beq	.+2 (0x5da)

000005d8 <.LM88>:
/home/lib.c:129 (discriminator 1)
 5d8:	1b 01       	subs	#1,er1

000005da <.L50>:
 5da:	1b 02       	subs	#1,er2

000005dc <.L49>:
/home/lib.c:126
  while (value || column) {
 5dc:	0f 80       	mov.l	er0,er0
 5de:	46 e0       	bne	.-32 (0x5c0)

000005e0 <.LM90>:
/home/lib.c:126 (discriminator 1)
 5e0:	0d 11       	mov.w	r1,r1
 5e2:	46 dc       	bne	.-36 (0x5c0)

000005e4 <.LM91>:
/home/lib.c:132
  }

  puts(p + 1);
 5e4:	0f a0       	mov.l	er2,er0
 5e6:	0b 00       	adds	#1,er0
 5e8:	5e 00 05 26 	jsr	@0x526:24

000005ec <.LM92>:
/home/lib.c:135

  return 0;
}
 5ec:	19 00       	sub.w	r0,r0
 5ee:	7a 17 00 00 	add.l	#0xc,er7
 5f2:	00 0c 
 5f4:	01 00 6d 74 	mov.l	@er7+,er4
 5f8:	01 00 6d 76 	mov.l	@er7+,er6
 5fc:	54 70       	rts	

000005fe <_serial_init>:
serial_init():
/home/serial.c:59
  { H8_3069F_SCI2 }, 
};

/* デバイス初期化 */
int serial_init(int index)
{
 5fe:	01 00 6d f6 	mov.l	er6,@-er7
 602:	0f f6       	mov.l	er7,er6

00000604 <.LM2>:
/home/serial.c:60
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 604:	17 f0       	exts.l	er0
 606:	10 30       	shll.l	er0
 608:	10 30       	shll.l	er0
 60a:	01 00 78 00 	mov.l	@(0xef4:32,er0),er2
 60e:	6b 22 00 00 
 612:	0e f4 

00000614 <.LM3>:
/home/serial.c:62

  sci->scr = 0;
 614:	18 bb       	sub.b	r3l,r3l
 616:	6e ab 00 02 	mov.b	r3l,@(0x2:16,er2)

0000061a <.LM4>:
/home/serial.c:63
  sci->smr = 0;
 61a:	68 ab       	mov.b	r3l,@er2

0000061c <.LM5>:
/home/serial.c:64
  sci->brr = 64; /* 20MHzのクロックから9600bpsを生成(25MHzの場合は80にする) */
 61c:	f8 40       	mov.b	#0x40,r0l
 61e:	6e a8 00 01 	mov.b	r0l,@(0x1:16,er2)

00000622 <.LM6>:
/home/serial.c:65
  sci->scr = H8_3069F_SCI_SCR_RE | H8_3069F_SCI_SCR_TE; /* 送受信可能 */
 622:	f8 30       	mov.b	#0x30,r0l
 624:	6e a8 00 02 	mov.b	r0l,@(0x2:16,er2)

00000628 <.LM7>:
/home/serial.c:66
  sci->ssr = 0;
 628:	6e ab 00 04 	mov.b	r3l,@(0x4:16,er2)

0000062c <.LM8>:
/home/serial.c:69

  return 0;
}
 62c:	19 00       	sub.w	r0,r0
 62e:	01 00 6d 76 	mov.l	@er7+,er6
 632:	54 70       	rts	

00000634 <_serial_is_send_enable>:
serial_is_send_enable():
/home/serial.c:73

/* 送信可能か？ */
int serial_is_send_enable(int index)
{
 634:	01 00 6d f6 	mov.l	er6,@-er7
 638:	0f f6       	mov.l	er7,er6

0000063a <.LM10>:
/home/serial.c:74
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 63a:	17 f0       	exts.l	er0
 63c:	10 30       	shll.l	er0
 63e:	10 30       	shll.l	er0
 640:	01 00 78 00 	mov.l	@(0xef4:32,er0),er2
 644:	6b 22 00 00 
 648:	0e f4 

0000064a <.LM11>:
/home/serial.c:75
  return (sci->ssr & H8_3069F_SCI_SSR_TDRE);
 64a:	6e 28 00 04 	mov.b	@(0x4:16,er2),r0l
 64e:	e8 80       	and.b	#0x80,r0l

00000650 <.LM12>:
/home/serial.c:76
}
 650:	17 50       	extu.w	r0
 652:	01 00 6d 76 	mov.l	@er7+,er6
 656:	54 70       	rts	

00000658 <_serial_send_byte>:
serial_send_byte():
/home/serial.c:80

/* １文字送信 */
int serial_send_byte(int index, unsigned char c)
{
 658:	01 00 6d f6 	mov.l	er6,@-er7
 65c:	0f f6       	mov.l	er7,er6

0000065e <.LM14>:
/home/serial.c:81
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 65e:	17 f0       	exts.l	er0
 660:	10 30       	shll.l	er0
 662:	10 30       	shll.l	er0
 664:	01 00 78 00 	mov.l	@(0xef4:32,er0),er2
 668:	6b 22 00 00 
 66c:	0e f4 

0000066e <.L4>:
serial_is_send_enable():
/home/serial.c:75 (discriminator 1)
  return (sci->ssr & H8_3069F_SCI_SSR_TDRE);
 66e:	6e 2b 00 04 	mov.b	@(0x4:16,er2),r3l

00000672 <.LM16>:
serial_send_byte():
/home/serial.c:84

  /* 送信可能になるまで待つ */
  while (!serial_is_send_enable(index))
 672:	4c fa       	bge	.-6 (0x66e)

00000674 <.LM17>:
/home/serial.c:86
    ;
  sci->tdr = c;
 674:	6e a9 00 03 	mov.b	r1l,@(0x3:16,er2)

00000678 <.LM18>:
/home/serial.c:87
  sci->ssr &= ~H8_3069F_SCI_SSR_TDRE; /* 送信開始 */
 678:	6e 2b 00 04 	mov.b	@(0x4:16,er2),r3l
 67c:	72 7b       	bclr	#0x7,r3l
 67e:	6e ab 00 04 	mov.b	r3l,@(0x4:16,er2)

00000682 <.LM19>:
/home/serial.c:90

  return 0;
}
 682:	19 00       	sub.w	r0,r0
 684:	01 00 6d 76 	mov.l	@er7+,er6
 688:	54 70       	rts	

0000068a <_serial_is_recv_enable>:
serial_is_recv_enable():
/home/serial.c:94

/* 受信可能か？ */
int serial_is_recv_enable(int index)
{
 68a:	01 00 6d f6 	mov.l	er6,@-er7
 68e:	0f f6       	mov.l	er7,er6

00000690 <.LM21>:
/home/serial.c:95
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 690:	17 f0       	exts.l	er0
 692:	10 30       	shll.l	er0
 694:	10 30       	shll.l	er0
 696:	01 00 78 00 	mov.l	@(0xef4:32,er0),er2
 69a:	6b 22 00 00 
 69e:	0e f4 

000006a0 <.LM22>:
/home/serial.c:96
  return (sci->ssr & H8_3069F_SCI_SSR_RDRF);
 6a0:	6e 28 00 04 	mov.b	@(0x4:16,er2),r0l
 6a4:	e8 40       	and.b	#0x40,r0l

000006a6 <.LM23>:
/home/serial.c:97
}
 6a6:	17 50       	extu.w	r0
 6a8:	01 00 6d 76 	mov.l	@er7+,er6
 6ac:	54 70       	rts	

000006ae <_serial_recv_byte>:
serial_recv_byte():
/home/serial.c:101

/* １文字受信 */
unsigned char serial_recv_byte(int index)
{
 6ae:	01 00 6d f6 	mov.l	er6,@-er7
 6b2:	0f f6       	mov.l	er7,er6

000006b4 <.LM25>:
/home/serial.c:102
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 6b4:	17 f0       	exts.l	er0
 6b6:	10 30       	shll.l	er0
 6b8:	10 30       	shll.l	er0
 6ba:	01 00 78 00 	mov.l	@(0xef4:32,er0),er2
 6be:	6b 22 00 00 
 6c2:	0e f4 

000006c4 <.L8>:
serial_is_recv_enable():
/home/serial.c:96 (discriminator 1)
  return (sci->ssr & H8_3069F_SCI_SSR_RDRF);
 6c4:	6e 2b 00 04 	mov.b	@(0x4:16,er2),r3l

000006c8 <.LM27>:
serial_recv_byte():
/home/serial.c:106
  unsigned char c;

  /* 受信文字が来るまで待つ */
  while (!serial_is_recv_enable(index))
 6c8:	73 6b       	btst	#0x6,r3l
 6ca:	47 f8       	beq	.-8 (0x6c4)

000006cc <.LM28>:
/home/serial.c:108
    ;
  c = sci->rdr;
 6cc:	6e 28 00 05 	mov.b	@(0x5:16,er2),r0l

000006d0 <.LM29>:
/home/serial.c:109
  sci->ssr &= ~H8_3069F_SCI_SSR_RDRF; /* 受信完了 */
 6d0:	6e 2b 00 04 	mov.b	@(0x4:16,er2),r3l
 6d4:	72 6b       	bclr	#0x6,r3l
 6d6:	6e ab 00 04 	mov.b	r3l,@(0x4:16,er2)

000006da <.LM30>:
/home/serial.c:112

  return c;
}
 6da:	01 00 6d 76 	mov.l	@er7+,er6
 6de:	54 70       	rts	

000006e0 <_xmodem_recv>:
xmodem_recv():
/home/xmodem.c:60

  return i;
}

long xmodem_recv(char *buf)
{
 6e0:	01 00 6d f6 	mov.l	er6,@-er7
 6e4:	0f f6       	mov.l	er7,er6
 6e6:	01 00 6d f4 	mov.l	er4,@-er7
 6ea:	01 00 6d f5 	mov.l	er5,@-er7
 6ee:	7a 37 00 00 	sub.l	#0x10,er7
 6f2:	00 10 
 6f4:	0f 85       	mov.l	er0,er5

000006f6 <.LM2>:
/home/xmodem.c:63
  int r, receiving = 0;
  long size = 0;
  unsigned char c, block_number = 1;
 6f6:	fa 01       	mov.b	#0x1,r2l
 6f8:	6e ea ff f7 	mov.b	r2l,@(0xfff7:16,er6)

000006fc <.LM3>:
/home/xmodem.c:62
  long size = 0;
 6fc:	1a c4       	sub.l	er4,er4

000006fe <.LM4>:
/home/xmodem.c:61
  int r, receiving = 0;
 6fe:	19 22       	sub.w	r2,r2
 700:	6f e2 ff f4 	mov.w	r2,@(0xfff4:16,er6)

00000704 <.L2>:
/home/xmodem.c:66

  while (1) {
    if (!receiving)
 704:	6f 62 ff f4 	mov.w	@(0xfff4:16,er6),r2
 708:	47 1c       	beq	.+28 (0x726)

0000070a <.L8>:
/home/xmodem.c:69
      xmodem_wait(); /* 受信開始されるまで送信要求を出す */

    c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 70a:	79 00 00 01 	mov.w	#0x1,r0
 70e:	5e 00 06 ae 	jsr	@0x6ae:24

00000712 <.LM7>:
/home/xmodem.c:71

    if (c == XMODEM_EOT) { /* 受信終了 */
 712:	a8 04       	cmp.b	#0x4,r0l
 714:	46 3e       	bne	.+62 (0x754)
 716:	40 2e       	bra	.+46 (0x746)

00000718 <.L7>:
xmodem_wait():
/home/xmodem.c:22
    if (++cnt >= 50000) {
 718:	1b 72       	dec.l	#1,er2
 71a:	46 10       	bne	.+16 (0x72c)

0000071c <.LM9>:
/home/xmodem.c:24
      serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_NAK);
 71c:	f9 15       	mov.b	#0x15,r1l
 71e:	79 00 00 01 	mov.w	#0x1,r0
 722:	5e 00 06 58 	jsr	@0x658:24

00000726 <.L3>:
xmodem_recv():
/home/xmodem.c:61
  int r, receiving = 0;
 726:	7a 02 00 00 	mov.l	#0xc350,er2
 72a:	c3 50 

0000072c <.L6>:
xmodem_wait():
/home/xmodem.c:21
  while (!serial_is_recv_enable(SERIAL_DEFAULT_DEVICE)) {
 72c:	79 00 00 01 	mov.w	#0x1,r0
 730:	01 00 6f e2 	mov.l	er2,@(0xfff0:16,er6)
 734:	ff f0 
 736:	5e 00 06 8a 	jsr	@0x68a:24

0000073a <.LVL9>:
 73a:	01 00 6f 62 	mov.l	@(0xfff0:16,er6),er2
 73e:	ff f0 
 740:	0d 00       	mov.w	r0,r0
 742:	47 d4       	beq	.-44 (0x718)
 744:	40 c4       	bra	.-60 (0x70a)

00000746 <.L4>:
xmodem_recv():
/home/xmodem.c:72
      serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_ACK);
 746:	f9 06       	mov.b	#0x6,r1l
 748:	79 00 00 01 	mov.w	#0x1,r0
 74c:	5e 00 06 58 	jsr	@0x658:24

00000750 <.LM13>:
/home/xmodem.c:93
      if (receiving)
	return -1;
    }
  }

  return size;
 750:	58 00 00 c4 	bra	.+196 (0x818)

00000754 <.L22>:
/home/xmodem.c:74
    } else if (c == XMODEM_CAN) { /* 受信中断 */
 754:	a8 18       	cmp.b	#0x18,r0l
 756:	58 70 00 ba 	beq	.+186 (0x814)

0000075a <.LM15>:
/home/xmodem.c:77
      receiving++;
 75a:	6f 62 ff f4 	mov.w	@(0xfff4:16,er6),r2

0000075e <.LM16>:
/home/xmodem.c:76
    } else if (c == XMODEM_SOH) { /* 受信開始 */
 75e:	a8 01       	cmp.b	#0x1,r0l
 760:	58 60 00 aa 	bne	.+170 (0x80e)

00000764 <.LM17>:
/home/xmodem.c:77
      receiving++;
 764:	0b 02       	adds	#1,er2
 766:	6f e2 ff f4 	mov.w	r2,@(0xfff4:16,er6)

0000076a <.LBB10>:
xmodem_read_block():
/home/xmodem.c:37
  block_num = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 76a:	79 00 00 01 	mov.w	#0x1,r0
 76e:	5e 00 06 ae 	jsr	@0x6ae:24

00000772 <.LM19>:
/home/xmodem.c:38
  if (block_num != block_number)
 772:	6e 6a ff f7 	mov.b	@(0xfff7:16,er6),r2l
 776:	1c 8a       	cmp.b	r0l,r2l
 778:	58 60 00 84 	bne	.+132 (0x800)

0000077c <.LM20>:
/home/xmodem.c:41
  block_num ^= serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 77c:	79 00 00 01 	mov.w	#0x1,r0
 780:	5e 00 06 ae 	jsr	@0x6ae:24

00000784 <.LVL18>:
 784:	6e 6a ff f7 	mov.b	@(0xfff7:16,er6),r2l
 788:	15 a8       	xor.b	r2l,r0l

0000078a <.LM21>:
/home/xmodem.c:42
  if (block_num != 0xff)
 78a:	a8 ff       	cmp.b	#0xff,r0l
 78c:	46 72       	bne	.+114 (0x800)
 78e:	0f d2       	mov.l	er5,er2
 790:	1a 91       	sub.l	er1,er1
 792:	89 80       	add.b	#0x80,r1l
 794:	0a d1       	add.l	er5,er1

00000796 <.LM22>:
/home/xmodem.c:45
  check_sum = 0;
 796:	18 bb       	sub.b	r3l,r3l

00000798 <.L12>:
/home/xmodem.c:47
    c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 798:	79 00 00 01 	mov.w	#0x1,r0
 79c:	01 00 6f e1 	mov.l	er1,@(0xffe8:16,er6)
 7a0:	ff e8 
 7a2:	01 00 6f e2 	mov.l	er2,@(0xfff0:16,er6)
 7a6:	ff f0 
 7a8:	01 00 6f e3 	mov.l	er3,@(0xffec:16,er6)
 7ac:	ff ec 
 7ae:	5e 00 06 ae 	jsr	@0x6ae:24

000007b2 <.LM24>:
/home/xmodem.c:48
    *(buf++) = c;
 7b2:	01 00 6f 62 	mov.l	@(0xfff0:16,er6),er2
 7b6:	ff f0 
 7b8:	68 a8       	mov.b	r0l,@er2

000007ba <.LM25>:
/home/xmodem.c:49
    check_sum += c;
 7ba:	01 00 6f 63 	mov.l	@(0xffec:16,er6),er3
 7be:	ff ec 
 7c0:	08 8b       	add.b	r0l,r3l
 7c2:	0b 02       	adds	#1,er2

000007c4 <.LM26>:
/home/xmodem.c:46
  for (i = 0; i < XMODEM_BLOCK_SIZE; i++) {
 7c4:	01 00 6f 61 	mov.l	@(0xffe8:16,er6),er1
 7c8:	ff e8 
 7ca:	1f a1       	cmp.l	er2,er1
 7cc:	46 ca       	bne	.-54 (0x798)

000007ce <.LM27>:
/home/xmodem.c:52
  check_sum ^= serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 7ce:	79 00 00 01 	mov.w	#0x1,r0
 7d2:	01 00 6f e3 	mov.l	er3,@(0xffec:16,er6)
 7d6:	ff ec 
 7d8:	5e 00 06 ae 	jsr	@0x6ae:24

000007dc <.LM28>:
/home/xmodem.c:53
  if (check_sum)
 7dc:	01 00 6f 63 	mov.l	@(0xffec:16,er6),er3
 7e0:	ff ec 
 7e2:	1c 8b       	cmp.b	r0l,r3l
 7e4:	46 1a       	bne	.+26 (0x800)

000007e6 <.LM29>:
xmodem_recv():
/home/xmodem.c:82
	block_number++;
 7e6:	6e 6a ff f7 	mov.b	@(0xfff7:16,er6),r2l
 7ea:	8a 01       	add.b	#0x1,r2l
 7ec:	6e ea ff f7 	mov.b	r2l,@(0xfff7:16,er6)

000007f0 <.LM30>:
/home/xmodem.c:83
	size += r;
 7f0:	7a 14 00 00 	add.l	#0x80,er4
 7f4:	00 80 

000007f6 <.LM31>:
/home/xmodem.c:84
	buf  += r;
 7f6:	7a 15 00 00 	add.l	#0x80,er5
 7fa:	00 80 

000007fc <.LM32>:
/home/xmodem.c:85
	serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_ACK);
 7fc:	f9 06       	mov.b	#0x6,r1l
 7fe:	40 02       	bra	.+2 (0x802)

00000800 <.L11>:
/home/xmodem.c:80
	serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_NAK);
 800:	f9 15       	mov.b	#0x15,r1l

00000802 <.L23>:
 802:	79 00 00 01 	mov.w	#0x1,r0
 806:	5e 00 06 58 	jsr	@0x658:24

0000080a <.LVL34>:
 80a:	58 00 fe f6 	bra	.-266 (0x704)

0000080e <.L10>:
/home/xmodem.c:88
      if (receiving)
 80e:	0d 22       	mov.w	r2,r2
 810:	58 70 ff 12 	beq	.-238 (0x726)

00000814 <.L14>:
/home/xmodem.c:75
      return -1;
 814:	1a c4       	sub.l	er4,er4
 816:	1b 04       	subs	#1,er4

00000818 <.L1>:
/home/xmodem.c:94
}
 818:	0f c0       	mov.l	er4,er0
 81a:	7a 17 00 00 	add.l	#0x10,er7
 81e:	00 10 
 820:	01 00 6d 75 	mov.l	@er7+,er5
 824:	01 00 6d 74 	mov.l	@er7+,er4
 828:	01 00 6d 76 	mov.l	@er7+,er6
 82c:	54 70       	rts	

0000082e <_elf_load>:
elf_load():
/home/elf.c:84

  return 0;
}

char *elf_load(char *buf)
{
 82e:	01 00 6d f6 	mov.l	er6,@-er7
 832:	0f f6       	mov.l	er7,er6
 834:	01 00 6d f4 	mov.l	er4,@-er7
 838:	01 00 6d f5 	mov.l	er5,@-er7
 83c:	1b 97       	subs	#4,er7
 83e:	0f 85       	mov.l	er0,er5

00000840 <.LBB6>:
elf_check():
/home/elf.c:44
  if (memcmp(header->id.magic, "\x7f" "ELF", 4))
 840:	1a a2       	sub.l	er2,er2
 842:	8a 04       	add.b	#0x4,r2l
 844:	7a 01 00 00 	mov.l	#0xff6,er1
 848:	0f f6 
 84a:	5e 00 03 d4 	jsr	@0x3d4:24

0000084e <.LVL2>:
 84e:	0d 03       	mov.w	r0,r3
 850:	58 60 00 b0 	bne	.+176 (0x904)

00000854 <.LM3>:
/home/elf.c:47
  if (header->id.class   != 1) return -1; /* ELF32 */
 854:	6e 5a 00 04 	mov.b	@(0x4:16,er5),r2l
 858:	aa 01       	cmp.b	#0x1,r2l
 85a:	58 60 00 a6 	bne	.+166 (0x904)

0000085e <.LM4>:
/home/elf.c:48
  if (header->id.format  != 2) return -1; /* Big endian */
 85e:	6e 5a 00 05 	mov.b	@(0x5:16,er5),r2l
 862:	aa 02       	cmp.b	#0x2,r2l
 864:	58 60 00 9c 	bne	.+156 (0x904)

00000868 <.LM5>:
/home/elf.c:49
  if (header->id.version != 1) return -1; /* version 1 */
 868:	6e 5a 00 06 	mov.b	@(0x6:16,er5),r2l
 86c:	aa 01       	cmp.b	#0x1,r2l
 86e:	58 60 00 92 	bne	.+146 (0x904)

00000872 <.LM6>:
/home/elf.c:50
  if (header->type       != 2) return -1; /* Executable file */
 872:	6f 52 00 10 	mov.w	@(0x10:16,er5),r2
 876:	1b d2       	dec.w	#2,r2
 878:	58 60 00 88 	bne	.+136 (0x904)

0000087c <.LM7>:
/home/elf.c:51
  if (header->version    != 1) return -1; /* version 1 */
 87c:	01 00 6f 52 	mov.l	@(0x14:16,er5),er2
 880:	00 14 
 882:	1b 72       	dec.l	#1,er2
 884:	58 60 00 7c 	bne	.+124 (0x904)

00000888 <.LM8>:
/home/elf.c:54
  if ((header->arch != 46) && (header->arch != 47)) return -1;
 888:	6f 52 00 12 	mov.w	@(0x12:16,er5),r2
 88c:	79 12 ff d2 	add.w	#0xffd2,r2
 890:	11 92       	shar.w	r2
 892:	47 60       	beq	.+96 (0x8f4)
 894:	40 6e       	bra	.+110 (0x904)

00000896 <.L5>:
elf_load_program():
/home/elf.c:69
       header->program_header_size * i);
 896:	6f 54 00 2a 	mov.w	@(0x2a:16,er5),r4
 89a:	01 c0 52 34 	mulxs.w	r3,er4
 89e:	17 f4       	exts.l	er4

000008a0 <.LM10>:
/home/elf.c:68
      ((char *)header + header->program_header_offset +
 8a0:	01 00 6f 52 	mov.l	@(0x1c:16,er5),er2
 8a4:	00 1c 
 8a6:	0a a4       	add.l	er2,er4

000008a8 <.LM11>:
/home/elf.c:67
    phdr = (struct elf_program_header *)
 8a8:	0a d4       	add.l	er5,er4

000008aa <.LM12>:
/home/elf.c:71
    if (phdr->type != 1) /* ロード可能なセグメントか？ */
 8aa:	01 00 69 42 	mov.l	@er4,er2
 8ae:	1b 72       	dec.l	#1,er2
 8b0:	46 40       	bne	.+64 (0x8f2)

000008b2 <.LM13>:
/home/elf.c:74
    memcpy((char *)phdr->physical_addr, (char *)header + phdr->offset,
 8b2:	01 00 6f 41 	mov.l	@(0x4:16,er4),er1
 8b6:	00 04 
 8b8:	01 00 6f 42 	mov.l	@(0x10:16,er4),er2
 8bc:	00 10 
 8be:	0a d1       	add.l	er5,er1
 8c0:	01 00 6f 40 	mov.l	@(0xc:16,er4),er0
 8c4:	00 0c 
 8c6:	01 00 6f e3 	mov.l	er3,@(0xfff4:16,er6)
 8ca:	ff f4 
 8cc:	5e 00 03 9e 	jsr	@0x39e:24

000008d0 <.LM14>:
/home/elf.c:77
	   phdr->memory_size - phdr->file_size);
 8d0:	01 00 6f 40 	mov.l	@(0x10:16,er4),er0
 8d4:	00 10 

000008d6 <.LM15>:
/home/elf.c:76
    memset((char *)phdr->physical_addr + phdr->file_size, 0,
 8d6:	01 00 6f 42 	mov.l	@(0x14:16,er4),er2
 8da:	00 14 
 8dc:	01 00 6f 44 	mov.l	@(0xc:16,er4),er4
 8e0:	00 0c 
 8e2:	1a 82       	sub.l	er0,er2
 8e4:	19 11       	sub.w	r1,r1
 8e6:	0a c0       	add.l	er4,er0
 8e8:	5e 00 03 78 	jsr	@0x378:24

000008ec <.LVL7>:
 8ec:	01 00 6f 63 	mov.l	@(0xfff4:16,er6),er3
 8f0:	ff f4 

000008f2 <.L4>:
/home/elf.c:65
  for (i = 0; i < header->program_header_num; i++) {
 8f2:	0b 03       	adds	#1,er3

000008f4 <.L3>:
 8f4:	6f 52 00 2c 	mov.w	@(0x2c:16,er5),r2
 8f8:	1d 23       	cmp.w	r2,r3
 8fa:	4d 9a       	blt	.-102 (0x896)

000008fc <.LM17>:
elf_load():
/home/elf.c:93
    return NULL;

  if (elf_load_program(header) < 0) /* セグメント単位でのロード */
    return NULL;

  return (char *)header->entry_point;
 8fc:	01 00 6f 50 	mov.l	@(0x18:16,er5),er0
 900:	00 18 
 902:	40 02       	bra	.+2 (0x906)

00000904 <.L12>:
/home/elf.c:88
    return NULL;
 904:	1a 80       	sub.l	er0,er0

00000906 <.L1>:
/home/elf.c:94
}
 906:	0b 97       	adds	#4,er7
 908:	01 00 6d 75 	mov.l	@er7+,er5
 90c:	01 00 6d 74 	mov.l	@er7+,er4
 910:	01 00 6d 76 	mov.l	@er7+,er6
 914:	54 70       	rts	

00000916 <_check_val>:
check_val():
/home/dram.c:77

  return 0;
}

static int check_val(volatile val_t *p, volatile val_t *wval)
{
 916:	01 00 6d f6 	mov.l	er6,@-er7
 91a:	0f f6       	mov.l	er7,er6
 91c:	1b 97       	subs	#4,er7

0000091e <.LM2>:
/home/dram.c:80
  volatile val_t rval;

  p->u.val8[0] = wval->u.val8[0]; p->u.val8[1] = wval->u.val8[1];
 91e:	68 1a       	mov.b	@er1,r2l
 920:	68 8a       	mov.b	r2l,@er0
 922:	6e 1a 00 01 	mov.b	@(0x1:16,er1),r2l
 926:	6e 8a 00 01 	mov.b	r2l,@(0x1:16,er0)

0000092a <.LM3>:
/home/dram.c:81
  p->u.val8[2] = wval->u.val8[2]; p->u.val8[3] = wval->u.val8[3];
 92a:	6e 1a 00 02 	mov.b	@(0x2:16,er1),r2l
 92e:	6e 8a 00 02 	mov.b	r2l,@(0x2:16,er0)
 932:	6e 1a 00 03 	mov.b	@(0x3:16,er1),r2l
 936:	6e 8a 00 03 	mov.b	r2l,@(0x3:16,er0)

0000093a <.LM4>:
/home/dram.c:82
  rval.u.val8[0] = p->u.val8[0]; rval.u.val8[1] = p->u.val8[1];
 93a:	68 0a       	mov.b	@er0,r2l
 93c:	6e ea ff fc 	mov.b	r2l,@(0xfffc:16,er6)
 940:	6e 0a 00 01 	mov.b	@(0x1:16,er0),r2l
 944:	6e ea ff fd 	mov.b	r2l,@(0xfffd:16,er6)

00000948 <.LM5>:
/home/dram.c:83
  rval.u.val8[2] = p->u.val8[2]; rval.u.val8[3] = p->u.val8[3];
 948:	6e 0a 00 02 	mov.b	@(0x2:16,er0),r2l
 94c:	6e ea ff fe 	mov.b	r2l,@(0xfffe:16,er6)
 950:	6e 0a 00 03 	mov.b	@(0x3:16,er0),r2l
 954:	6e ea ff ff 	mov.b	r2l,@(0xffff:16,er6)

00000958 <.LM6>:
/home/dram.c:85

  if (rval.u.val32[0] != wval->u.val32[0])
 958:	01 00 6f 63 	mov.l	@(0xfffc:16,er6),er3
 95c:	ff fc 
 95e:	01 00 69 12 	mov.l	@er1,er2
 962:	1f a3       	cmp.l	er2,er3
 964:	47 06       	beq	.+6 (0x96c)

00000966 <.L4>:
/home/dram.c:86
    return -1;
 966:	79 00 ff ff 	mov.w	#0xffff,r0
 96a:	40 50       	bra	.+80 (0x9bc)

0000096c <.L2>:
/home/dram.c:88

  p->u.val16[0] = wval->u.val16[0]; p->u.val16[1] = wval->u.val16[1];
 96c:	69 12       	mov.w	@er1,r2
 96e:	69 82       	mov.w	r2,@er0
 970:	6f 12 00 02 	mov.w	@(0x2:16,er1),r2
 974:	6f 82 00 02 	mov.w	r2,@(0x2:16,er0)

00000978 <.LM9>:
/home/dram.c:89
  rval.u.val16[0] = p->u.val16[0]; rval.u.val16[1] = p->u.val16[1];
 978:	69 02       	mov.w	@er0,r2
 97a:	6f e2 ff fc 	mov.w	r2,@(0xfffc:16,er6)
 97e:	6f 02 00 02 	mov.w	@(0x2:16,er0),r2
 982:	6f e2 ff fe 	mov.w	r2,@(0xfffe:16,er6)

00000986 <.LM10>:
/home/dram.c:91

  if (rval.u.val32[0] != wval->u.val32[0])
 986:	01 00 6f 63 	mov.l	@(0xfffc:16,er6),er3
 98a:	ff fc 
 98c:	01 00 69 12 	mov.l	@er1,er2
 990:	1f a3       	cmp.l	er2,er3
 992:	46 d2       	bne	.-46 (0x966)

00000994 <.LM11>:
/home/dram.c:94
    return -1;

  p->u.val32[0] = wval->u.val32[0];
 994:	01 00 69 12 	mov.l	@er1,er2
 998:	01 00 69 82 	mov.l	er2,@er0

0000099c <.LM12>:
/home/dram.c:95
  rval.u.val32[0] = p->u.val32[0];
 99c:	01 00 69 02 	mov.l	@er0,er2
 9a0:	01 00 6f e2 	mov.l	er2,@(0xfffc:16,er6)
 9a4:	ff fc 

000009a6 <.LM13>:
/home/dram.c:97

  if (rval.u.val32[0] != wval->u.val32[0])
 9a6:	01 00 6f 63 	mov.l	@(0xfffc:16,er6),er3
 9aa:	ff fc 
 9ac:	01 00 69 12 	mov.l	@er1,er2
 9b0:	79 00 00 01 	mov.w	#0x1,r0
 9b4:	1f a3       	cmp.l	er2,er3
 9b6:	46 02       	bne	.+2 (0x9ba)
 9b8:	19 00       	sub.w	r0,r0

000009ba <.L5>:
 9ba:	17 90       	neg.w	r0

000009bc <.L1>:
/home/dram.c:101
    return -1;

  return 0;
}
 9bc:	0b 97       	adds	#4,er7
 9be:	01 00 6d 76 	mov.l	@er7+,er6
 9c2:	54 70       	rts	

000009c4 <_dram_check2_val0>:
dram_check2_val0():
/home/dram.c:139
  putxval((unsigned long)*p, 8);
  puts("\n");
  return -1;
}

static uint32 dram_check2_val0(uint32 *addr) {  return  0x55555555UL; }
 9c4:	01 00 6d f6 	mov.l	er6,@-er7
 9c8:	0f f6       	mov.l	er7,er6

000009ca <.LM16>:
 9ca:	7a 00 55 55 	mov.l	#0x55555555,er0
 9ce:	55 55 
 9d0:	01 00 6d 76 	mov.l	@er7+,er6
 9d4:	54 70       	rts	

000009d6 <_dram_check2_val1>:
dram_check2_val1():
/home/dram.c:140
static uint32 dram_check2_val1(uint32 *addr) {  return  0xaaaaaaaaUL; }
 9d6:	01 00 6d f6 	mov.l	er6,@-er7
 9da:	0f f6       	mov.l	er7,er6

000009dc <.LM18>:
 9dc:	7a 00 aa aa 	mov.l	#0xaaaaaaaa,er0
 9e0:	aa aa 
 9e2:	01 00 6d 76 	mov.l	@er7+,er6
 9e6:	54 70       	rts	

000009e8 <_dram_check2_val2>:
dram_check2_val2():
/home/dram.c:141
static uint32 dram_check2_val2(uint32 *addr) {  return  0x00000000UL; }
 9e8:	01 00 6d f6 	mov.l	er6,@-er7
 9ec:	0f f6       	mov.l	er7,er6

000009ee <.LM20>:
 9ee:	1a 80       	sub.l	er0,er0
 9f0:	01 00 6d 76 	mov.l	@er7+,er6
 9f4:	54 70       	rts	

000009f6 <_dram_check2_val3>:
dram_check2_val3():
/home/dram.c:142
static uint32 dram_check2_val3(uint32 *addr) {  return  0xffffffffUL; }
 9f6:	01 00 6d f6 	mov.l	er6,@-er7
 9fa:	0f f6       	mov.l	er7,er6

000009fc <.LM22>:
 9fc:	1a 80       	sub.l	er0,er0
 9fe:	1b 00       	subs	#1,er0
 a00:	01 00 6d 76 	mov.l	@er7+,er6
 a04:	54 70       	rts	

00000a06 <_dram_check2_val4>:
dram_check2_val4():
/home/dram.c:143
static uint32 dram_check2_val4(uint32 *addr) {  return  (uint32)addr; }
 a06:	01 00 6d f6 	mov.l	er6,@-er7
 a0a:	0f f6       	mov.l	er7,er6

00000a0c <.LM24>:
 a0c:	01 00 6d 76 	mov.l	@er7+,er6
 a10:	54 70       	rts	

00000a12 <_dram_check2_val5>:
dram_check2_val5():
/home/dram.c:144
static uint32 dram_check2_val5(uint32 *addr) {  return ~(uint32)addr; }
 a12:	01 00 6d f6 	mov.l	er6,@-er7
 a16:	0f f6       	mov.l	er7,er6

00000a18 <.LM26>:
 a18:	17 30       	not.l	er0
 a1a:	01 00 6d 76 	mov.l	@er7+,er6
 a1e:	54 70       	rts	

00000a20 <_dram_init>:
dram_init():
/home/dram.c:29
{
 a20:	01 00 6d f6 	mov.l	er6,@-er7
 a24:	0f f6       	mov.l	er7,er6

00000a26 <.LM28>:
/home/dram.c:37
  *H8_3069F_ABWCR  = 0xff;
 a26:	fa ff       	mov.b	#0xff,r2l
 a28:	6a aa 00 fe 	mov.b	r2l,@0xfee020:32
 a2c:	e0 20 

00000a2e <.LM29>:
/home/dram.c:41
  *H8_3069F_RTCOR  = 0x03; /* リフレッシュ周期を短めに設定 */
 a2e:	fb 03       	mov.b	#0x3,r3l
 a30:	6a ab 00 fe 	mov.b	r3l,@0xfee02a:32
 a34:	e0 2a 

00000a36 <.LM30>:
/home/dram.c:44
  *H8_3069F_RTMCSR = 0x37;
 a36:	fb 37       	mov.b	#0x37,r3l
 a38:	6a ab 00 fe 	mov.b	r3l,@0xfee028:32
 a3c:	e0 28 

00000a3e <.LM31>:
/home/dram.c:49
  *H8_3069F_DRCRB  = 0x98;
 a3e:	fb 98       	mov.b	#0x98,r3l
 a40:	6a ab 00 fe 	mov.b	r3l,@0xfee027:32
 a44:	e0 27 

00000a46 <.LM32>:
/home/dram.c:53
  *H8_3069F_DRCRA  = 0x30;
 a46:	fb 30       	mov.b	#0x30,r3l
 a48:	6a ab 00 fe 	mov.b	r3l,@0xfee026:32
 a4c:	e0 26 

00000a4e <.LM33>:
/home/dram.c:55
  *H8_3069F_P1DDR  = 0xff;
 a4e:	6a aa 00 fe 	mov.b	r2l,@0xfee000:32
 a52:	e0 00 

00000a54 <.LM34>:
/home/dram.c:56
  *H8_3069F_P2DDR  = 0x07;
 a54:	fa 07       	mov.b	#0x7,r2l
 a56:	6a aa 00 fe 	mov.b	r2l,@0xfee001:32
 a5a:	e0 01 

00000a5c <.LM35>:
/home/dram.c:57
  *H8_3069F_P8DDR  = 0xe4;
 a5c:	fa e4       	mov.b	#0xe4,r2l
 a5e:	6a aa 00 fe 	mov.b	r2l,@0xfee007:32
 a62:	e0 07 

00000a64 <.LM36>:
/home/dram.c:62
  *H8_3069F_WCRL = 0xcf;
 a64:	fa cf       	mov.b	#0xcf,r2l
 a66:	6a aa 00 fe 	mov.b	r2l,@0xfee023:32
 a6a:	e0 23 

00000a6c <.LM37>:
/home/dram.c:68
  *H8_3069F_ASTCR = 0xfb; /* 2ステートアクセス */
 a6c:	fa fb       	mov.b	#0xfb,r2l
 a6e:	6a aa 00 fe 	mov.b	r2l,@0xfee021:32
 a72:	e0 21 

00000a74 <.LM38>:
/home/dram.c:74
}
 a74:	19 00       	sub.w	r0,r0
 a76:	01 00 6d 76 	mov.l	@er7+,er6
 a7a:	54 70       	rts	

00000a7c <_dram_check>:
dram_check():
/home/dram.c:104
{
 a7c:	01 00 6d f6 	mov.l	er6,@-er7
 a80:	0f f6       	mov.l	er7,er6
 a82:	01 00 6d f4 	mov.l	er4,@-er7
 a86:	1b 97       	subs	#4,er7

00000a88 <.LM40>:
/home/dram.c:109
  puts("DRAM checking...\n");
 a88:	7a 00 00 00 	mov.l	#0x1045,er0
 a8c:	10 45 
 a8e:	5e 00 05 26 	jsr	@0x526:24

00000a92 <.LM41>:
/home/dram.c:111
  for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 a92:	7a 04 00 40 	mov.l	#0x400000,er4
 a96:	00 00 

00000a98 <.L15>:
/home/dram.c:112
    putxval((unsigned long)p, 8);
 a98:	79 01 00 08 	mov.w	#0x8,r1
 a9c:	0f c0       	mov.l	er4,er0
 a9e:	5e 00 05 90 	jsr	@0x590:24

00000aa2 <.LM43>:
/home/dram.c:115
    val.u.val32[0] = (uint32)p;
 aa2:	01 00 6f e4 	mov.l	er4,@(0xfff8:16,er6)
 aa6:	ff f8 

00000aa8 <.LM44>:
/home/dram.c:116
    if (check_val((val_t *)p, &val) < 0)
 aa8:	0f e1       	mov.l	er6,er1
 aaa:	1b 91       	subs	#4,er1
 aac:	1b 91       	subs	#4,er1
 aae:	0f c0       	mov.l	er4,er0
 ab0:	5e 00 09 16 	jsr	@0x916:24

00000ab4 <.LVL18>:
 ab4:	0d 00       	mov.w	r0,r0
 ab6:	4d 54       	blt	.+84 (0xb0c)

00000ab8 <.LM45>:
/home/dram.c:119
    val.u.val32[0] = 0;
 ab8:	1a a2       	sub.l	er2,er2
 aba:	01 00 6f e2 	mov.l	er2,@(0xfff8:16,er6)
 abe:	ff f8 

00000ac0 <.LM46>:
/home/dram.c:120
    if (check_val((val_t *)p, &val) < 0)
 ac0:	0f e1       	mov.l	er6,er1
 ac2:	1b 91       	subs	#4,er1
 ac4:	1b 91       	subs	#4,er1
 ac6:	0f c0       	mov.l	er4,er0
 ac8:	5e 00 09 16 	jsr	@0x916:24

00000acc <.LVL19>:
 acc:	0d 00       	mov.w	r0,r0
 ace:	4d 3c       	blt	.+60 (0xb0c)

00000ad0 <.LM47>:
/home/dram.c:123
    val.u.val32[0] = 0xffffffffUL;
 ad0:	1a a2       	sub.l	er2,er2
 ad2:	1b 02       	subs	#1,er2
 ad4:	01 00 6f e2 	mov.l	er2,@(0xfff8:16,er6)
 ad8:	ff f8 

00000ada <.LM48>:
/home/dram.c:124
    if (check_val((val_t *)p, &val) < 0)
 ada:	0f e1       	mov.l	er6,er1
 adc:	1b 91       	subs	#4,er1
 ade:	1b 91       	subs	#4,er1
 ae0:	0f c0       	mov.l	er4,er0
 ae2:	5e 00 09 16 	jsr	@0x916:24

00000ae6 <.LVL20>:
 ae6:	0d 00       	mov.w	r0,r0
 ae8:	4d 22       	blt	.+34 (0xb0c)

00000aea <.LM49>:
/home/dram.c:127 (discriminator 2)
    puts("\x08\x08\x08\x08\x08\x08\x08\x08");
 aea:	7a 00 00 00 	mov.l	#0xffb,er0
 aee:	0f fb 
 af0:	5e 00 05 26 	jsr	@0x526:24

00000af4 <.LM50>:
/home/dram.c:111
  for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 af4:	0b 94       	adds	#4,er4
 af6:	7a 24 00 60 	cmp.l	#0x600000,er4
 afa:	00 00 
 afc:	46 9a       	bne	.-102 (0xa98)

00000afe <.LM51>:
/home/dram.c:129
  puts("\nall check OK.\n");
 afe:	7a 00 00 00 	mov.l	#0x1004,er0
 b02:	10 04 
 b04:	5e 00 05 26 	jsr	@0x526:24

00000b08 <.LM52>:
/home/dram.c:130
  return 0;
 b08:	19 00       	sub.w	r0,r0
 b0a:	40 24       	bra	.+36 (0xb30)

00000b0c <.L14>:
/home/dram.c:133
  puts("\nERROR: ");
 b0c:	7a 00 00 00 	mov.l	#0x1014,er0
 b10:	10 14 
 b12:	5e 00 05 26 	jsr	@0x526:24

00000b16 <.LM54>:
/home/dram.c:134
  putxval((unsigned long)*p, 8);
 b16:	79 01 00 08 	mov.w	#0x8,r1
 b1a:	01 00 69 40 	mov.l	@er4,er0
 b1e:	5e 00 05 90 	jsr	@0x590:24

00000b22 <.LM55>:
/home/dram.c:135
  puts("\n");
 b22:	7a 00 00 00 	mov.l	#0xf65,er0
 b26:	0f 65 
 b28:	5e 00 05 26 	jsr	@0x526:24

00000b2c <.LM56>:
/home/dram.c:136
  return -1;
 b2c:	79 00 ff ff 	mov.w	#0xffff,r0

00000b30 <.L13>:
/home/dram.c:137
}
 b30:	0b 97       	adds	#4,er7
 b32:	01 00 6d 74 	mov.l	@er7+,er4
 b36:	01 00 6d 76 	mov.l	@er7+,er6
 b3a:	54 70       	rts	

00000b3c <_dram_check2>:
dram_check2():
/home/dram.c:147

int dram_check2()
{
 b3c:	01 00 6d f6 	mov.l	er6,@-er7
 b40:	0f f6       	mov.l	er7,er6
 b42:	01 00 6d f4 	mov.l	er4,@-er7
 b46:	01 00 6d f5 	mov.l	er5,@-er7
 b4a:	7a 37 00 00 	sub.l	#0x2c,er7
 b4e:	00 2c 

00000b50 <.LM59>:
/home/dram.c:150
  uint32 *p;
  int ret = 0, i;
  uint32 (*getval[])(uint32 *) = {
 b50:	1a a2       	sub.l	er2,er2
 b52:	8a 1c       	add.b	#0x1c,r2l
 b54:	7a 01 00 00 	mov.l	#0xf00,er1
 b58:	0f 00 
 b5a:	0f e0       	mov.l	er6,er0
 b5c:	7a 30 00 00 	sub.l	#0x24,er0
 b60:	00 24 
 b62:	5e 00 03 9e 	jsr	@0x39e:24

00000b66 <.LVL29>:
 b66:	0f e2       	mov.l	er6,er2
 b68:	7a 32 00 00 	sub.l	#0x24,er2
 b6c:	00 24 
 b6e:	01 00 6f e2 	mov.l	er2,@(0xffd4:16,er6)
 b72:	ff d4 

00000b74 <.LM60>:
/home/dram.c:160
    dram_check2_val4,
    dram_check2_val5,
    NULL
  };

  for (i = 0; getval[i]; i++) {
 b74:	1a d5       	sub.l	er5,er5

00000b76 <.LM61>:
/home/dram.c:149
  int ret = 0, i;
 b76:	19 22       	sub.w	r2,r2
 b78:	6f e2 ff d2 	mov.w	r2,@(0xffd2:16,er6)

00000b7c <.LM62>:
/home/dram.c:160
  for (i = 0; getval[i]; i++) {
 b7c:	58 00 01 02 	bra	.+258 (0xc82)

00000b80 <.L25>:
/home/dram.c:162

    puts("DRAM check pattern: ");
 b80:	7a 00 00 00 	mov.l	#0x101d,er0
 b84:	10 1d 
 b86:	5e 00 05 26 	jsr	@0x526:24

00000b8a <.LM64>:
/home/dram.c:163
    putxval(i, 0);
 b8a:	19 11       	sub.w	r1,r1
 b8c:	0f d0       	mov.l	er5,er0
 b8e:	5e 00 05 90 	jsr	@0x590:24

00000b92 <.LM65>:
/home/dram.c:165

    puts("\nDRAM setting...\n");
 b92:	7a 00 00 00 	mov.l	#0x1032,er0
 b96:	10 32 
 b98:	5e 00 05 26 	jsr	@0x526:24

00000b9c <.LM66>:
/home/dram.c:167

    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 b9c:	7a 04 00 40 	mov.l	#0x400000,er4
 ba0:	00 00 

00000ba2 <.L21>:
/home/dram.c:168
      *p = getval[i](p);
 ba2:	0f c0       	mov.l	er4,er0
 ba4:	01 00 6f 62 	mov.l	@(0xffd8:16,er6),er2
 ba8:	ff d8 
 baa:	5d 20       	jsr	@er2

00000bac <.LVL35>:
 bac:	01 00 69 c0 	mov.l	er0,@er4

00000bb0 <.LM68>:
/home/dram.c:169
      if (!((uint32)p & 0xfff)) {
 bb0:	0f c3       	mov.l	er4,er3
 bb2:	e3 0f       	and.b	#0xf,r3h
 bb4:	0d 33       	mov.w	r3,r3
 bb6:	46 14       	bne	.+20 (0xbcc)

00000bb8 <.LM69>:
/home/dram.c:170
	putxval((unsigned long)p, 8);
 bb8:	79 01 00 08 	mov.w	#0x8,r1
 bbc:	0f c0       	mov.l	er4,er0
 bbe:	5e 00 05 90 	jsr	@0x590:24

00000bc2 <.LM70>:
/home/dram.c:171
	puts("\x08\x08\x08\x08\x08\x08\x08\x08");
 bc2:	7a 00 00 00 	mov.l	#0xffb,er0
 bc6:	0f fb 
 bc8:	5e 00 05 26 	jsr	@0x526:24

00000bcc <.L20>:
/home/dram.c:167 (discriminator 2)
    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 bcc:	0b 94       	adds	#4,er4
 bce:	7a 24 00 60 	cmp.l	#0x600000,er4
 bd2:	00 00 
 bd4:	46 cc       	bne	.-52 (0xba2)

00000bd6 <.LM72>:
/home/dram.c:175
      }
    }

    puts("\nDRAM checking...\n");
 bd6:	7a 00 00 00 	mov.l	#0x1044,er0
 bda:	10 44 
 bdc:	5e 00 05 26 	jsr	@0x526:24

00000be0 <.LM73>:
/home/dram.c:177

    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 be0:	7a 04 00 40 	mov.l	#0x400000,er4
 be4:	00 00 

00000be6 <.L24>:
/home/dram.c:178
      if (*p != getval[i](p)) {
 be6:	01 00 69 43 	mov.l	@er4,er3
 bea:	0f c0       	mov.l	er4,er0
 bec:	01 00 6f e3 	mov.l	er3,@(0xffcc:16,er6)
 bf0:	ff cc 
 bf2:	01 00 6f 62 	mov.l	@(0xffd8:16,er6),er2
 bf6:	ff d8 
 bf8:	5d 20       	jsr	@er2

00000bfa <.LVL41>:
 bfa:	01 00 6f 63 	mov.l	@(0xffcc:16,er6),er3
 bfe:	ff cc 
 c00:	1f 83       	cmp.l	er0,er3
 c02:	47 3c       	beq	.+60 (0xc40)

00000c04 <.LM75>:
/home/dram.c:179
	puts("\nERROR! :");
 c04:	7a 00 00 00 	mov.l	#0x1057,er0
 c08:	10 57 
 c0a:	5e 00 05 26 	jsr	@0x526:24

00000c0e <.LM76>:
/home/dram.c:180
	putxval((unsigned long)p, 8);
 c0e:	79 01 00 08 	mov.w	#0x8,r1
 c12:	0f c0       	mov.l	er4,er0
 c14:	5e 00 05 90 	jsr	@0x590:24

00000c18 <.LM77>:
/home/dram.c:181
	puts(" ");
 c18:	7a 00 00 00 	mov.l	#0x101b,er0
 c1c:	10 1b 
 c1e:	5e 00 05 26 	jsr	@0x526:24

00000c22 <.LM78>:
/home/dram.c:182
	putxval((unsigned long)*p, 8);
 c22:	79 01 00 08 	mov.w	#0x8,r1
 c26:	01 00 69 40 	mov.l	@er4,er0
 c2a:	5e 00 05 90 	jsr	@0x590:24

00000c2e <.LM79>:
/home/dram.c:183
	puts("\n");
 c2e:	7a 00 00 00 	mov.l	#0xf65,er0
 c32:	0f 65 
 c34:	5e 00 05 26 	jsr	@0x526:24

00000c38 <.LM80>:
/home/dram.c:184
	ret = -1;
 c38:	79 02 ff ff 	mov.w	#0xffff,r2
 c3c:	6f e2 ff d2 	mov.w	r2,@(0xffd2:16,er6)

00000c40 <.L22>:
/home/dram.c:186
      }
      if (!((uint32)p & 0xfff)) {
 c40:	0f c3       	mov.l	er4,er3
 c42:	e3 0f       	and.b	#0xf,r3h
 c44:	0d 33       	mov.w	r3,r3
 c46:	46 14       	bne	.+20 (0xc5c)

00000c48 <.LM82>:
/home/dram.c:187
	putxval((unsigned long)p, 8);
 c48:	79 01 00 08 	mov.w	#0x8,r1
 c4c:	0f c0       	mov.l	er4,er0
 c4e:	5e 00 05 90 	jsr	@0x590:24

00000c52 <.LM83>:
/home/dram.c:188
	puts("\x08\x08\x08\x08\x08\x08\x08\x08");
 c52:	7a 00 00 00 	mov.l	#0xffb,er0
 c56:	0f fb 
 c58:	5e 00 05 26 	jsr	@0x526:24

00000c5c <.L23>:
/home/dram.c:177 (discriminator 2)
    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 c5c:	0b 94       	adds	#4,er4
 c5e:	7a 24 00 60 	cmp.l	#0x600000,er4
 c62:	00 00 
 c64:	58 60 ff 7e 	bne	.-130 (0xbe6)

00000c68 <.LM85>:
/home/dram.c:192
      }
    }

    puts("\n");
 c68:	7a 00 00 00 	mov.l	#0xf65,er0
 c6c:	0f 65 
 c6e:	5e 00 05 26 	jsr	@0x526:24

00000c72 <.LVL51>:
 c72:	0b 05       	adds	#1,er5
 c74:	01 00 6f 62 	mov.l	@(0xffd4:16,er6),er2
 c78:	ff d4 
 c7a:	0b 92       	adds	#4,er2
 c7c:	01 00 6f e2 	mov.l	er2,@(0xffd4:16,er6)
 c80:	ff d4 

00000c82 <.L19>:
/home/dram.c:160 (discriminator 1)
  for (i = 0; getval[i]; i++) {
 c82:	01 00 6f 62 	mov.l	@(0xffd4:16,er6),er2
 c86:	ff d4 
 c88:	01 00 69 22 	mov.l	@er2,er2
 c8c:	01 00 6f e2 	mov.l	er2,@(0xffd8:16,er6)
 c90:	ff d8 
 c92:	58 60 fe ea 	bne	.-278 (0xb80)

00000c96 <.LM87>:
/home/dram.c:196

  }

  if (ret == 0) {
 c96:	6f 62 ff d2 	mov.w	@(0xffd2:16,er6),r2
 c9a:	46 0a       	bne	.+10 (0xca6)

00000c9c <.LM88>:
/home/dram.c:197
    puts("\nall check OK.\n");
 c9c:	7a 00 00 00 	mov.l	#0x1004,er0
 ca0:	10 04 
 ca2:	5e 00 05 26 	jsr	@0x526:24

00000ca6 <.L18>:
/home/dram.c:201
  }

  return ret;
}
 ca6:	6f 60 ff d2 	mov.w	@(0xffd2:16,er6),r0
 caa:	7a 17 00 00 	add.l	#0x2c,er7
 cae:	00 2c 
 cb0:	01 00 6d 75 	mov.l	@er7+,er5
 cb4:	01 00 6d 74 	mov.l	@er7+,er4
 cb8:	01 00 6d 76 	mov.l	@er7+,er6
 cbc:	54 70       	rts	

00000cbe <_dram_clear>:
dram_clear():
/home/dram.c:204

int dram_clear()
{
 cbe:	01 00 6d f6 	mov.l	er6,@-er7
 cc2:	0f f6       	mov.l	er7,er6

00000cc4 <.LM91>:
/home/dram.c:207
  uint32 *p;

  puts("DRAM clearing...\n");
 cc4:	7a 00 00 00 	mov.l	#0x1061,er0
 cc8:	10 61 
 cca:	5e 00 05 26 	jsr	@0x526:24

00000cce <.LM92>:
/home/dram.c:209

  for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++)
 cce:	7a 02 00 40 	mov.l	#0x400000,er2
 cd2:	00 00 

00000cd4 <.LM93>:
/home/dram.c:210
    *p = 0;
 cd4:	1a b3       	sub.l	er3,er3

00000cd6 <.L30>:
/home/dram.c:210 (discriminator 3)
 cd6:	01 00 69 a3 	mov.l	er3,@er2

00000cda <.LM95>:
/home/dram.c:209
  for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++)
 cda:	0b 92       	adds	#4,er2
 cdc:	7a 22 00 60 	cmp.l	#0x600000,er2
 ce0:	00 00 
 ce2:	46 f2       	bne	.-14 (0xcd6)

00000ce4 <.LM96>:
/home/dram.c:212

  puts("DRAM cleared.\n");
 ce4:	7a 00 00 00 	mov.l	#0x1073,er0
 ce8:	10 73 
 cea:	5e 00 05 26 	jsr	@0x526:24

00000cee <.LM97>:
/home/dram.c:215

  return 0;
}
 cee:	19 00       	sub.w	r0,r0
 cf0:	01 00 6d 76 	mov.l	@er7+,er6
 cf4:	54 70       	rts	

Disassembly of section .text.startup:

00000cf6 <_main>:
main():
/home/main.c:66
  for (i = 0; i < 15000; i++)
    ;
}

int main(void)
{
 cf6:	01 00 6d f6 	mov.l	er6,@-er7
 cfa:	0f f6       	mov.l	er7,er6
 cfc:	7a 37 00 00 	sub.l	#0x8,er7
 d00:	00 08 

00000d02 <.LM2>:
/home/main.c:74
  static unsigned char *loadbuf = NULL;
  char *entry_point;
  void (*f)(void);
  extern int buffer_start; /* リンカ・スクリプトで定義されているバッファ */

  INTR_DISABLE; /* 割込み無効にする */
 d02:	04 c0       	orc	#0xc0,ccr

00000d04 <.LBB8>:
init():
/home/main.c:24
  softvec_init();
 d04:	5e 00 02 b0 	jsr	@0x2b0:24

00000d08 <.LM4>:
/home/main.c:27
  serial_init(SERIAL_DEFAULT_DEVICE);
 d08:	79 00 00 01 	mov.w	#0x1,r0
 d0c:	5e 00 05 fe 	jsr	@0x5fe:24

00000d10 <.LM5>:
/home/main.c:30
  dram_init();
 d10:	5e 00 0a 20 	jsr	@0xa20:24

00000d14 <.LM6>:
main():
/home/main.c:78

  init();

  puts("kzload (kozos boot loader) started.\n");
 d14:	7a 00 00 00 	mov.l	#0xf1c,er0
 d18:	0f 1c 

00000d1a <.L20>:
 d1a:	5e 00 05 26 	jsr	@0x526:24

00000d1e <.L2>:
/home/main.c:81

  while (1) {
    puts("kzload> "); /* プロンプト表示 */
 d1e:	7a 00 00 00 	mov.l	#0xf41,er0
 d22:	0f 41 
 d24:	5e 00 05 26 	jsr	@0x526:24

00000d28 <.LM8>:
/home/main.c:82
    gets(buf); /* シリアルからのコマンド受信 */
 d28:	7a 00 00 ff 	mov.l	#0xffc008,er0
 d2c:	c0 08 
 d2e:	5e 00 05 4a 	jsr	@0x54a:24

00000d32 <.LM9>:
/home/main.c:84

    if (!strcmp(buf, "load")) { /* XMODEMでのファイルのダウンロード */
 d32:	7a 01 00 00 	mov.l	#0xf4a,er1
 d36:	0f 4a 
 d38:	7a 00 00 ff 	mov.l	#0xffc008,er0
 d3c:	c0 08 
 d3e:	5e 00 04 46 	jsr	@0x446:24

00000d42 <.LVL6>:
 d42:	0d 00       	mov.w	r0,r0
 d44:	46 4a       	bne	.+74 (0xd90)

00000d46 <.LM10>:
/home/main.c:85
      loadbuf = (char *)(&buffer_start);
 d46:	7a 02 00 50 	mov.l	#0x500000,er2
 d4a:	00 00 
 d4c:	01 00 6b a2 	mov.l	er2,@0xffc004:32
 d50:	00 ff c0 04 

00000d54 <.LM11>:
/home/main.c:86
      size = xmodem_recv(loadbuf);
 d54:	0f a0       	mov.l	er2,er0
 d56:	5e 00 06 e0 	jsr	@0x6e0:24

00000d5a <.LVL7>:
 d5a:	01 00 6b a0 	mov.l	er0,@0xffc000:32
 d5e:	00 ff c0 00 

00000d62 <.LBB10>:
wait():
/home/main.c:61
  for (i = 0; i < 15000; i++)
 d62:	1a a2       	sub.l	er2,er2
 d64:	40 06       	bra	.+6 (0xd6c)

00000d66 <.L5>:
 d66:	01 00 69 62 	mov.l	@er6,er2
 d6a:	0b 02       	adds	#1,er2

00000d6c <.L21>:
 d6c:	01 00 69 e2 	mov.l	er2,@er6
 d70:	01 00 69 62 	mov.l	@er6,er2
 d74:	7a 22 00 00 	cmp.l	#0x3a97,er2
 d78:	3a 97 
 d7a:	4f ea       	ble	.-22 (0xd66)

00000d7c <.LM13>:
main():
/home/main.c:88
      wait(); /* 転送アプリが終了し端末アプリに制御が戻るまで待ち合わせる */
      if (size < 0) {
 d7c:	0f 80       	mov.l	er0,er0
 d7e:	4c 08       	bge	.+8 (0xd88)

00000d80 <.LM14>:
/home/main.c:89
	puts("\nXMODEM receive error!\n");
 d80:	7a 00 00 00 	mov.l	#0xf4f,er0
 d84:	0f 4f 
 d86:	40 92       	bra	.-110 (0xd1a)

00000d88 <.L6>:
/home/main.c:91
      } else {
	puts("\nXMODEM receive succeeded.\n");
 d88:	7a 00 00 00 	mov.l	#0xf67,er0
 d8c:	0f 67 
 d8e:	40 8a       	bra	.-118 (0xd1a)

00000d90 <.L3>:
/home/main.c:93
      }
    } else if (!strcmp(buf, "dump")) { /* メモリの16進ダンプ出力 */
 d90:	7a 01 00 00 	mov.l	#0xf83,er1
 d94:	0f 83 
 d96:	7a 00 00 ff 	mov.l	#0xffc008,er0
 d9a:	c0 08 
 d9c:	5e 00 04 46 	jsr	@0x446:24

00000da0 <.LVL8>:
 da0:	0d 00       	mov.w	r0,r0
 da2:	58 60 00 9e 	bne	.+158 (0xe44)

00000da6 <.LM17>:
/home/main.c:94
      puts("size: ");
 da6:	7a 00 00 00 	mov.l	#0xf88,er0
 daa:	0f 88 
 dac:	5e 00 05 26 	jsr	@0x526:24

00000db0 <.LM18>:
/home/main.c:95
      putxval(size, 0);
 db0:	19 11       	sub.w	r1,r1
 db2:	01 00 6b 20 	mov.l	@0xffc000:32,er0
 db6:	00 ff c0 00 
 dba:	5e 00 05 90 	jsr	@0x590:24

00000dbe <.LM19>:
/home/main.c:96
      puts("\n");
 dbe:	7a 00 00 00 	mov.l	#0xf65,er0
 dc2:	0f 65 
 dc4:	5e 00 05 26 	jsr	@0x526:24

00000dc8 <.LM20>:
/home/main.c:97
      dump(loadbuf, size);
 dc8:	01 00 6b 25 	mov.l	@0xffc000:32,er5
 dcc:	00 ff c0 00 
 dd0:	01 00 6b 22 	mov.l	@0xffc004:32,er2
 dd4:	00 ff c0 04 
 dd8:	01 00 6f e2 	mov.l	er2,@(0xfffc:16,er6)
 ddc:	ff fc 

00000dde <.LBB12>:
dump():
/home/main.c:40
  if (size < 0) {
 dde:	0f d5       	mov.l	er5,er5
 de0:	4c 52       	bge	.+82 (0xe34)

00000de2 <.LM22>:
/home/main.c:41
    puts("no data.\n");
 de2:	7a 00 00 00 	mov.l	#0xf8f,er0
 de6:	0f 8f 
 de8:	58 00 ff 2e 	bra	.-210 (0xd1a)

00000dec <.L13>:
/home/main.c:45
    putxval(buf[i], 2);
 dec:	79 01 00 02 	mov.w	#0x2,r1
 df0:	01 00 6f 62 	mov.l	@(0xfffc:16,er6),er2
 df4:	ff fc 
 df6:	0a c2       	add.l	er4,er2
 df8:	1a 80       	sub.l	er0,er0
 dfa:	68 28       	mov.b	@er2,r0l
 dfc:	5e 00 05 90 	jsr	@0x590:24

00000e00 <.LM24>:
/home/main.c:46
    if ((i & 0xf) == 15) {
 e00:	1a a2       	sub.l	er2,er2
 e02:	0c ca       	mov.b	r4l,r2l
 e04:	ea 0f       	and.b	#0xf,r2l
 e06:	7a 22 00 00 	cmp.l	#0xf,er2
 e0a:	00 0f 
 e0c:	46 08       	bne	.+8 (0xe16)

00000e0e <.LM25>:
/home/main.c:47
      puts("\n");
 e0e:	7a 00 00 00 	mov.l	#0xf65,er0
 e12:	0f 65 
 e14:	40 16       	bra	.+22 (0xe2c)

00000e16 <.L10>:
/home/main.c:49
      if ((i & 0xf) == 7) puts(" ");
 e16:	da 07       	xor.b	#0x7,r2l
 e18:	0f a2       	mov.l	er2,er2
 e1a:	46 0a       	bne	.+10 (0xe26)
 e1c:	7a 00 00 00 	mov.l	#0x101b,er0
 e20:	10 1b 
 e22:	5e 00 05 26 	jsr	@0x526:24

00000e26 <.L12>:
/home/main.c:50
      puts(" ");
 e26:	7a 00 00 00 	mov.l	#0x101b,er0
 e2a:	10 1b 

00000e2c <.L22>:
 e2c:	5e 00 05 26 	jsr	@0x526:24

00000e30 <.LM28>:
/home/main.c:44
  for (i = 0; i < size; i++) {
 e30:	0b 04       	adds	#1,er4
 e32:	40 02       	bra	.+2 (0xe36)

00000e34 <.L19>:
 e34:	1a c4       	sub.l	er4,er4

00000e36 <.L9>:
 e36:	1f c5       	cmp.l	er4,er5
 e38:	46 b2       	bne	.-78 (0xdec)

00000e3a <.LM29>:
/home/main.c:53
  puts("\n");
 e3a:	7a 00 00 00 	mov.l	#0xf65,er0
 e3e:	0f 65 
 e40:	58 00 fe d6 	bra	.-298 (0xd1a)

00000e44 <.L8>:
main():
/home/main.c:98
    } else if (!strcmp(buf, "run")) { /* ELF形式ファイルの実行 */
 e44:	7a 01 00 00 	mov.l	#0xf99,er1
 e48:	0f 99 
 e4a:	7a 00 00 ff 	mov.l	#0xffc008,er0
 e4e:	c0 08 
 e50:	5e 00 04 46 	jsr	@0x446:24

00000e54 <.LVL21>:
 e54:	0d 00       	mov.w	r0,r0
 e56:	46 3c       	bne	.+60 (0xe94)

00000e58 <.LM31>:
/home/main.c:99
      entry_point = elf_load(loadbuf); /* メモリ上に展開(ロード) */
 e58:	01 00 6b 20 	mov.l	@0xffc004:32,er0
 e5c:	00 ff c0 04 
 e60:	5e 00 08 2e 	jsr	@0x82e:24

00000e64 <.LVL22>:
 e64:	0f 84       	mov.l	er0,er4

00000e66 <.LM32>:
/home/main.c:100
      if (!entry_point) {
 e66:	46 0a       	bne	.+10 (0xe72)

00000e68 <.LM33>:
/home/main.c:101
	puts("run error!\n");
 e68:	7a 00 00 00 	mov.l	#0xf9d,er0
 e6c:	0f 9d 

00000e6e <.LVL24>:
 e6e:	58 00 fe a8 	bra	.-344 (0xd1a)

00000e72 <.L15>:
/home/main.c:103
      } else {
	puts("starting from entry point: ");
 e72:	7a 00 00 00 	mov.l	#0xfa9,er0
 e76:	0f a9 

00000e78 <.LVL26>:
 e78:	5e 00 05 26 	jsr	@0x526:24

00000e7c <.LM35>:
/home/main.c:104
	putxval((unsigned long)entry_point, 0);
 e7c:	19 11       	sub.w	r1,r1
 e7e:	0f c0       	mov.l	er4,er0
 e80:	5e 00 05 90 	jsr	@0x590:24

00000e84 <.LM36>:
/home/main.c:105
	puts("\n");
 e84:	7a 00 00 00 	mov.l	#0xf65,er0
 e88:	0f 65 
 e8a:	5e 00 05 26 	jsr	@0x526:24

00000e8e <.LM37>:
/home/main.c:107
	f = (void (*)(void))entry_point;
	f(); /* ここで，ロードしたプログラムに処理を渡す */
 e8e:	5d 40       	jsr	@er4

00000e90 <.LVL30>:
 e90:	58 00 fe 8a 	bra	.-374 (0xd1e)

00000e94 <.L14>:
/home/main.c:110
	/* ここには返ってこない */
      }
    } else if (!strcmp(buf, "ramchk")) {
 e94:	7a 01 00 00 	mov.l	#0xfc5,er1
 e98:	0f c5 
 e9a:	7a 00 00 ff 	mov.l	#0xffc008,er0
 e9e:	c0 08 
 ea0:	5e 00 04 46 	jsr	@0x446:24

00000ea4 <.LVL32>:
 ea4:	0d 00       	mov.w	r0,r0
 ea6:	46 08       	bne	.+8 (0xeb0)

00000ea8 <.LM39>:
/home/main.c:111
      dram_check();
 ea8:	5e 00 0a 7c 	jsr	@0xa7c:24

00000eac <.LVL33>:
 eac:	58 00 fe 6e 	bra	.-402 (0xd1e)

00000eb0 <.L16>:
/home/main.c:112
    } else if (!strcmp(buf, "ramchk2")) {
 eb0:	7a 01 00 00 	mov.l	#0xfcc,er1
 eb4:	0f cc 
 eb6:	7a 00 00 ff 	mov.l	#0xffc008,er0
 eba:	c0 08 
 ebc:	5e 00 04 46 	jsr	@0x446:24

00000ec0 <.LVL34>:
 ec0:	0d 00       	mov.w	r0,r0
 ec2:	46 08       	bne	.+8 (0xecc)

00000ec4 <.LM41>:
/home/main.c:113
      dram_check2();
 ec4:	5e 00 0b 3c 	jsr	@0xb3c:24

00000ec8 <.LVL35>:
 ec8:	58 00 fe 52 	bra	.-430 (0xd1e)

00000ecc <.L17>:
/home/main.c:114
    } else if (!strcmp(buf, "ramclr")) {
 ecc:	7a 01 00 00 	mov.l	#0xfd4,er1
 ed0:	0f d4 
 ed2:	7a 00 00 ff 	mov.l	#0xffc008,er0
 ed6:	c0 08 
 ed8:	5e 00 04 46 	jsr	@0x446:24

00000edc <.LVL36>:
 edc:	0d 00       	mov.w	r0,r0
 ede:	46 08       	bne	.+8 (0xee8)

00000ee0 <.LM43>:
/home/main.c:115
      dram_clear();
 ee0:	5e 00 0c be 	jsr	@0xcbe:24

00000ee4 <.LVL37>:
 ee4:	58 00 fe 36 	bra	.-458 (0xd1e)

00000ee8 <.L18>:
/home/main.c:117
    } else {
      puts("unknown.\n");
 ee8:	7a 00 00 00 	mov.l	#0xfdb,er0
 eec:	0f db 
 eee:	58 00 fe 28 	bra	.-472 (0xd1a)

Disassembly of section .rodata:

00000ef4 <_rodata_start>:
_rodata_start():
     ef4:	00 ff       	.word	H'0,H'ff
     ef6:	ff b0       	mov.b	#0xb0,r7l
     ef8:	00 ff       	.word	H'0,H'ff
     efa:	ff b8       	mov.b	#0xb8,r7l
     efc:	00 ff       	.word	H'0,H'ff
     efe:	ff c0       	mov.b	#0xc0,r7l

00000f00 <.LC0>:
.LC0():
     f00:	00 00       	nop	
     f02:	09 c4       	add.w	e4,r4
     f04:	00 00       	nop	
     f06:	09 d6       	add.w	e5,r6
     f08:	00 00       	nop	
     f0a:	09 e8       	add.w	e6,e0
     f0c:	00 00       	nop	
     f0e:	09 f6       	add.w	e7,r6
     f10:	00 00       	nop	
     f12:	0a 06       	inc	r6h
     f14:	00 00       	nop	
     f16:	0a 12       	add.w	#0x1,r2
     f18:	00 00       	nop	
     f1a:	00 00       	nop	
     f1c:	6b 7a       	.word	H'6b,H'7a
     f1e:	6c 6f       	mov.b	@er6+,r7l
     f20:	61 64       	bnot	r6h,r4h
     f22:	20 28       	mov.b	@0x28:8,r0h
     f24:	6b 6f       	.word	H'6b,H'6f
     f26:	7a 6f 73 20 	and.l	#0x7320,er7
     f2a:	62 6f       	bclr	r6h,r7l
     f2c:	6f 74 20 6c 	mov.w	@(0x206c:16,er7),r4
     f30:	6f 61 64 65 	mov.w	@(0x6465:16,er6),r1
     f34:	72 29       	bclr	#0x2,r1l
     f36:	20 73       	mov.b	@0x73:8,r0h
     f38:	74 61       	bor	#0x6,r1h
     f3a:	72 74       	bclr	#0x7,r4h
     f3c:	65 64       	xor.w	r6,r4
     f3e:	2e 0a       	mov.b	@0xa:8,r6l
     f40:	00 6b       	.word	H'0,H'6b
     f42:	7a 6c 6f 61 	and.l	#0x6f61,er4
     f46:	64 3e       	or.w	r3,e6
     f48:	20 00       	mov.b	@0x0:8,r0h
     f4a:	6c 6f       	mov.b	@er6+,r7l
     f4c:	61 64       	bnot	r6h,r4h
     f4e:	00 0a       	.word	H'0,H'a
     f50:	58 4d       	.word	H'58,H'4d
     f52:	4f 44       	ble	.+68 (0xf98)
     f54:	45 4d       	.word	H'45,H'4d
     f56:	20 72       	mov.b	@0x72:8,r0h
     f58:	65 63       	xor.w	r6,r3
     f5a:	65 69       	xor.w	r6,e1
     f5c:	76 65       	band	#0x6,r5h
     f5e:	20 65       	mov.b	@0x65:8,r0h
     f60:	72 72       	bclr	#0x7,r2h
     f62:	6f 72 21 0a 	mov.w	@(0x210a:16,er7),r2
     f66:	00 0a       	.word	H'0,H'a
     f68:	58 4d       	.word	H'58,H'4d
     f6a:	4f 44       	ble	.+68 (0xfb0)
     f6c:	45 4d       	.word	H'45,H'4d
     f6e:	20 72       	mov.b	@0x72:8,r0h
     f70:	65 63       	xor.w	r6,r3
     f72:	65 69       	xor.w	r6,e1
     f74:	76 65       	band	#0x6,r5h
     f76:	20 73       	mov.b	@0x73:8,r0h
     f78:	75 63       	bxor	#0x6,r3h
     f7a:	63 65       	btst	r6h,r5h
     f7c:	65 64       	xor.w	r6,r4
     f7e:	65 64       	xor.w	r6,r4
     f80:	2e 0a       	mov.b	@0xa:8,r6l
     f82:	00 64       	.word	H'0,H'64
     f84:	75 6d       	bxor	#0x6,r5l
     f86:	70 00       	bset	#0x0,r0h
     f88:	73 69       	btst	#0x6,r1l
     f8a:	7a 65 3a 20 	and.l	#0x3a20006e,er5
     f8e:	00 6e 
     f90:	6f 20 64 61 	mov.w	@(0x6461:16,er2),r0
     f94:	74 61       	bor	#0x6,r1h
     f96:	2e 0a       	mov.b	@0xa:8,r6l
     f98:	00 72       	.word	H'0,H'72
     f9a:	75 6e       	bxor	#0x6,r6l
     f9c:	00 72       	.word	H'0,H'72
     f9e:	75 6e       	bxor	#0x6,r6l
     fa0:	20 65       	mov.b	@0x65:8,r0h
     fa2:	72 72       	bclr	#0x7,r2h
     fa4:	6f 72 21 0a 	mov.w	@(0x210a:16,er7),r2
     fa8:	00 73       	.word	H'0,H'73
     faa:	74 61       	bor	#0x6,r1h
     fac:	72 74       	bclr	#0x7,r4h
     fae:	69 6e       	mov.w	@er6,e6
     fb0:	67 20       	bst	#0x2,r0h
     fb2:	66 72       	and.w	r7,r2
     fb4:	6f 6d 20 65 	mov.w	@(0x2065:16,er6),e5
     fb8:	6e 74 72 79 	mov.b	@(0x7279:16,er7),r4h
     fbc:	20 70       	mov.b	@0x70:8,r0h
     fbe:	6f 69 6e 74 	mov.w	@(0x6e74:16,er6),e1
     fc2:	3a 20       	mov.b	r2l,@0x20:8
     fc4:	00 72       	.word	H'0,H'72
     fc6:	61 6d       	bnot	r6h,r5l
     fc8:	63 68       	btst	r6h,r0l
     fca:	6b 00 72 61 	mov.w	@0x7261:16,r0
     fce:	6d 63       	mov.w	@er6+,r3
     fd0:	68 6b       	mov.b	@er6,r3l
     fd2:	32 00       	mov.b	r2h,@0x0:8
     fd4:	72 61       	bclr	#0x6,r1h
     fd6:	6d 63       	mov.w	@er6+,r3
     fd8:	6c 72       	mov.b	@er7+,r2h
     fda:	00 75       	.word	H'0,H'75
     fdc:	6e 6b 6e 6f 	mov.b	@(0x6e6f:16,er6),r3l
     fe0:	77 6e       	bld	#0x6,r6l
     fe2:	2e 0a       	mov.b	@0xa:8,r6l
     fe4:	00 30       	.word	H'0,H'30
     fe6:	31 32       	mov.b	r1h,@0x32:8
     fe8:	33 34       	mov.b	r3h,@0x34:8
     fea:	35 36       	mov.b	r5h,@0x36:8
     fec:	37 38       	mov.b	r7h,@0x38:8
     fee:	39 61       	mov.b	r1l,@0x61:8
     ff0:	62 63       	bclr	r6h,r3h
     ff2:	64 65       	or.w	r6,r5
     ff4:	66 00       	and.w	r0,r0
     ff6:	7f 45       	.word	H'7f,H'45
     ff8:	4c 46       	bge	.+70 (0x1040)
     ffa:	00 08       	.word	H'0,H'8
     ffc:	08 08       	add.b	r0h,r0l
     ffe:	08 08       	add.b	r0h,r0l
    1000:	08 08       	add.b	r0h,r0l
    1002:	08 00       	add.b	r0h,r0h
    1004:	0a 61       	add.w	#0x6,r1
    1006:	6c 6c       	mov.b	@er6+,r4l
    1008:	20 63       	mov.b	@0x63:8,r0h
    100a:	68 65       	mov.b	@er6,r5h
    100c:	63 6b       	btst	r6h,r3l
    100e:	20 4f       	mov.b	@0x4f:8,r0h
    1010:	4b 2e       	bmi	.+46 (0x1040)
    1012:	0a 00       	inc	r0h
    1014:	0a 45       	add.w	#0x4,r5
    1016:	52 52       	mulxu.w	r5,er2
    1018:	4f 52       	ble	.+82 (0x106c)
    101a:	3a 20       	mov.b	r2l,@0x20:8
    101c:	00 44       	.word	H'0,H'44
    101e:	52 41       	mulxu.w	r4,er1
    1020:	4d 20       	blt	.+32 (0x1042)
    1022:	63 68       	btst	r6h,r0l
    1024:	65 63       	xor.w	r6,r3
    1026:	6b 20 70 61 	mov.w	@0x70617474:32,r0
    102a:	74 74 
    102c:	65 72       	xor.w	r7,r2
    102e:	6e 3a 20 00 	mov.b	@(0x2000:16,er3),r2l
    1032:	0a 44       	add.w	#0x4,r4
    1034:	52 41       	mulxu.w	r4,er1
    1036:	4d 20       	blt	.+32 (0x1058)
    1038:	73 65       	btst	#0x6,r5h
    103a:	74 74       	bor	#0x7,r4h
    103c:	69 6e       	mov.w	@er6,e6
    103e:	67 2e       	bst	#0x2,r6l
    1040:	2e 2e       	mov.b	@0x2e:8,r6l
    1042:	0a 00       	inc	r0h
    1044:	0a 44       	add.w	#0x4,r4
    1046:	52 41       	mulxu.w	r4,er1
    1048:	4d 20       	blt	.+32 (0x106a)
    104a:	63 68       	btst	r6h,r0l
    104c:	65 63       	xor.w	r6,r3
    104e:	6b 69       	.word	H'6b,H'69
    1050:	6e 67 2e 2e 	mov.b	@(0x2e2e:16,er6),r7h
    1054:	2e 0a       	mov.b	@0xa:8,r6l
    1056:	00 0a       	.word	H'0,H'a
    1058:	45 52       	bcs	.+82 (0x10ac)
    105a:	52 4f       	.word	H'52,H'4f
    105c:	52 21       	mulxu.w	r2,er1
    105e:	20 3a       	mov.b	@0x3a:8,r0h
    1060:	00 44       	.word	H'0,H'44
    1062:	52 41       	mulxu.w	r4,er1
    1064:	4d 20       	blt	.+32 (0x1086)
    1066:	63 6c       	btst	r6h,r4l
    1068:	65 61       	xor.w	r6,r1
    106a:	72 69       	bclr	#0x6,r1l
    106c:	6e 67 2e 2e 	mov.b	@(0x2e2e:16,er6),r7h
    1070:	2e 0a       	mov.b	@0xa:8,r6l
    1072:	00 44       	.word	H'0,H'44
    1074:	52 41       	mulxu.w	r4,er1
    1076:	4d 20       	blt	.+32 (0x1098)
    1078:	63 6c       	btst	r6h,r4l
    107a:	65 61       	xor.w	r6,r1
    107c:	72 65       	bclr	#0x6,r5h
    107e:	64 2e       	or.w	r2,e6
    1080:	0a 00       	inc	r0h

Disassembly of section .data:

00ffc000 <_data_start>:
_data_start():
  ffc000:	ff ff       	mov.b	#0xff,r7l
  ffc002:	ff ff       	mov.b	#0xff,r7l

Disassembly of section .bss:

00ffc004 <_bss_start>:
_bss_start():
  ffc004:	00 00       	nop	
	...

00ffc008 <_buf___966>:
	...

Disassembly of section .debug_info:

00000000 <.Ldebug_info0>:
.Ldebug_info0():
       0:	00 00       	nop	
       2:	00 57       	.word	H'0,H'57
       4:	00 04       	.word	H'0,H'4
       6:	00 00       	nop	
       8:	00 00       	nop	
       a:	04 01       	orc	#0x1,ccr
       c:	00 00       	nop	
       e:	00 00       	nop	
      10:	0c 00       	mov.b	r0h,r0h
      12:	00 00       	nop	
      14:	67 00       	bst	#0x0,r0h
      16:	00 00       	nop	
      18:	4b 00       	bmi	.0 (0x1a)
      1a:	00 00       	nop	
      1c:	00 02       	.word	H'0,H'2
      1e:	01 08 00 00 	mov.l	@er0,@er0
      22:	00 51       	.word	H'0,H'51
      24:	02 02       	stc	ccr,r2h
      26:	07 00       	ldc	#0x0,ccr
      28:	00 00       	nop	
      2a:	38 02       	mov.b	r0l,@0x2:8
      2c:	04 07       	orc	#0x7,ccr
      2e:	00 00       	nop	
      30:	00 26       	.word	H'0,H'26
      32:	03 00       	ldc	r0h,ccr
      34:	00 00       	nop	
      36:	42 00       	bhi	.0 (0x38)
      38:	00 00       	nop	
      3a:	42 04       	bhi	.+4 (0x40)
      3c:	00 00       	nop	
      3e:	00 2b       	.word	H'0,H'2b
      40:	3f 00       	mov.b	r7l,@0x0:8
      42:	05 04       	xorc	#0x4,ccr
      44:	00 00       	nop	
      46:	00 48       	.word	H'0,H'48
      48:	06 07       	andc	#0x7,ccr
      4a:	00 00       	nop	
      4c:	00 5f       	.word	H'0,H'5f
      4e:	01 0e       	.word	H'1,H'e
      50:	00 00       	nop	
      52:	00 32       	.word	H'0,H'32
      54:	05 03       	xorc	#0x3,ccr
      56:	00 00       	nop	
      58:	00 00       	nop	
	...

0000005b <.Ldebug_info0>:
      5b:	00 00       	nop	
      5d:	04 ae       	orc	#0xae,ccr
      5f:	00 04       	.word	H'0,H'4
      61:	00 00       	nop	
      63:	00 4e       	.word	H'0,H'4e
      65:	04 01       	orc	#0x1,ccr
      67:	00 00       	nop	
      69:	00 00       	nop	
      6b:	0c 00       	mov.b	r0h,r0h
      6d:	00 00       	nop	
      6f:	81 00       	add.b	#0x0,r1h
      71:	00 00       	nop	
      73:	4b 00       	bmi	.0 (0x75)
	...
      7d:	00 00       	nop	
      7f:	34 02       	mov.b	r4h,@0x2:8
      81:	01 08 00 00 	mov.l	@er0,@er0
      85:	00 51       	.word	H'0,H'51
      87:	02 02       	stc	ccr,r2h
      89:	07 00       	ldc	#0x0,ccr
      8b:	00 00       	nop	
      8d:	38 02       	mov.b	r0l,@0x2:8
      8f:	04 07       	orc	#0x7,ccr
      91:	00 00       	nop	
      93:	00 26       	.word	H'0,H'26
      95:	03 00       	ldc	r0h,ccr
      97:	00 01       	.word	H'0,H'1
      99:	3d 02       	mov.b	r5l,@0x2:8
      9b:	05 00       	xorc	#0x0,ccr
      9d:	00 00       	nop	
      9f:	45 02       	bcs	.+2 (0xa3)
      a1:	01 08 00 00 	mov.l	@er0,@er0
      a5:	00 5a       	.word	H'0,H'5a
      a7:	02 02       	stc	ccr,r2h
      a9:	05 00       	xorc	#0x0,ccr
      ab:	00 01       	.word	H'0,H'1
      ad:	33 04       	mov.b	r3h,@0x4:8
      af:	00 00       	nop	
      b1:	00 95       	.word	H'0,H'95
      b3:	01 41       	.word	H'1,H'41
      b5:	00 00       	nop	
      b7:	03 69       	ldc	er1,vbr
      b9:	00 00       	nop	
      bb:	0c f6       	mov.b	r7l,r6h
      bd:	00 00       	nop	
      bf:	01 fc       	.word	H'1,H'fc
      c1:	01 9c       	.word	H'1,H'9c
      c3:	00 00       	nop	
      c5:	03 69       	ldc	er1,vbr
      c7:	05 62       	xorc	#0x62,ccr
      c9:	75 66       	bxor	#0x6,r6h
      cb:	00 01       	.word	H'0,H'1
      cd:	43 00       	bls	.0 (0xcf)
      cf:	00 03       	.word	H'0,H'3
      d1:	70 05       	bset	#0x0,r5h
      d3:	03 00       	ldc	r0h,ccr
      d5:	ff c0       	mov.b	#0xc0,r7l
      d7:	08 06       	add.b	r0h,r6h
      d9:	00 00       	nop	
      db:	02 de       	.word	H'2,H'de
      dd:	01 44       	.word	H'1,H'44
      df:	00 00       	nop	
      e1:	03 80       	.word	H'3,H'80
      e3:	05 03       	xorc	#0x3,ccr
      e5:	00 ff       	.word	H'0,H'ff
      e7:	c0 00       	or.b	#0x0,r0h
      e9:	06 00       	andc	#0x0,ccr
      eb:	00 01       	.word	H'0,H'1
      ed:	1c 01       	cmp.b	r0h,r1h
      ef:	45 00       	bcs	.0 (0xf1)
      f1:	00 03       	.word	H'0,H'3
      f3:	8c 05       	add.b	#0x5,r4l
      f5:	03 00       	ldc	r0h,ccr
      f7:	ff c0       	mov.b	#0xc0,r7l
      f9:	04 07       	orc	#0x7,ccr
      fb:	00 00       	nop	
      fd:	00 f7       	.word	H'0,H'f7
      ff:	01 46       	.word	H'1,H'46
     101:	00 00       	nop	
     103:	03 92       	.word	H'3,H'92
     105:	00 00       	nop	
     107:	00 00       	nop	
     109:	08 66       	add.b	r6h,r6h
     10b:	00 01       	.word	H'0,H'1
     10d:	47 00       	beq	.0 (0x10f)
     10f:	00 03       	.word	H'0,H'3
     111:	99 00       	addx	#0x0,r1l
     113:	00 00       	nop	
     115:	34 03       	mov.b	r4h,@0x3:8
     117:	00 00       	nop	
     119:	00 e3       	.word	H'0,H'e3
     11b:	01 48       	.word	H'1,H'48
     11d:	00 00       	nop	
     11f:	03 69       	ldc	er1,vbr
     121:	09 00       	add.w	r0,r0
     123:	00 03       	.word	H'0,H'3
     125:	e5 00       	and.b	#0x0,r5h
     127:	00 0d       	.word	H'0,H'd
     129:	04 00       	orc	#0x0,ccr
     12b:	00 00       	nop	
     12d:	10 01       	shll.b	r1h
     12f:	4c 00       	bge	.0 (0x131)
     131:	00 01       	.word	H'0,H'1
     133:	22 0a       	mov.b	@0xa:8,r2h
     135:	00 00       	nop	
     137:	0d 04       	mov.w	r0,r4
     139:	00 00       	nop	
     13b:	00 10       	.word	H'0,H'10
     13d:	0b 00       	adds	#1,er0
     13f:	00 03       	.word	H'0,H'3
     141:	f5 0b       	mov.b	#0xb,r5h
     143:	00 00       	nop	
     145:	04 00       	orc	#0x0,ccr
     147:	0b 00       	adds	#1,er0
     149:	00 04       	.word	H'0,H'4
     14b:	0b 0b       	adds	#1,er3
     14d:	00 00       	nop	
     14f:	04 16       	orc	#0x16,ccr
     151:	0b 00       	adds	#1,er0
     153:	00 04       	.word	H'0,H'4
     155:	21 0c       	mov.b	@0xc:8,r1h
     157:	00 00       	nop	
     159:	0d 08       	mov.w	r0,e0
     15b:	00 00       	nop	
     15d:	04 2d       	orc	#0x2d,ccr
     15f:	0d 00       	mov.w	r0,r0
     161:	00 0d       	.word	H'0,H'd
     163:	10 00       	shll.b	r0h
     165:	00 04       	.word	H'0,H'4
     167:	38 00       	mov.b	r0l,@0x0:8
     169:	00 01       	.word	H'0,H'1
     16b:	17 0e       	not.b	r6l
     16d:	01 50       	.word	H'1,H'50
     16f:	01 31       	.word	H'1,H'31
     171:	00 0c       	.word	H'0,H'c
     173:	00 00       	nop	
     175:	0d 14       	mov.w	r1,r4
     177:	00 00       	nop	
     179:	04 43       	orc	#0x43,ccr
     17b:	00 00       	nop	
     17d:	09 00       	add.w	r0,r0
     17f:	00 03       	.word	H'0,H'3
     181:	9f 00       	addx	#0x0,r7l
     183:	00 0d       	.word	H'0,H'd
     185:	62 00       	bclr	r0h,r0h
     187:	00 00       	nop	
     189:	1a 01       	dec.b	r1h
     18b:	57 00       	trapa	#0x0
     18d:	00 01       	.word	H'0,H'1
     18f:	48 0a       	bvc	.+10 (0x19b)
     191:	00 00       	nop	
     193:	0d 62       	mov.w	r6,r2
     195:	00 00       	nop	
     197:	00 1a       	.word	H'0,H'1a
     199:	0f 00       	daa	r0h
     19b:	00 03       	.word	H'0,H'3
     19d:	ab 02       	cmp.b	#0x2,r3l
     19f:	91 78       	addx	#0x78,r1h
     1a1:	00 00       	nop	
     1a3:	09 00       	add.w	r0,r0
     1a5:	00 03       	.word	H'0,H'3
     1a7:	b5 00       	subx	#0x0,r5h
     1a9:	00 0d       	.word	H'0,H'd
     1ab:	de 00       	xor.b	#0x0,r6l
     1ad:	00 00       	nop	
     1af:	66 01       	and.w	r0,r1
     1b1:	61 00       	bnot	r0h,r0h
     1b3:	00 01       	.word	H'0,H'1
     1b5:	b4 10       	subx	#0x10,r4h
     1b7:	00 00       	nop	
     1b9:	03 d0       	.word	H'3,H'd0
     1bb:	00 00       	nop	
     1bd:	00 47       	.word	H'0,H'47
     1bf:	10 00       	shll.b	r0h
     1c1:	00 03       	.word	H'0,H'3
     1c3:	c5 00       	or.b	#0x0,r5h
     1c5:	00 00       	nop	
     1c7:	5a 0a 00 00 	jmp	@0xa0000:24
     1cb:	0d de       	mov.w	e5,e6
     1cd:	00 00       	nop	
     1cf:	00 66       	.word	H'0,H'66
     1d1:	11 00       	shlr.b	r0h
     1d3:	00 03       	.word	H'0,H'3
     1d5:	db 00       	xor.b	#0x0,r3l
     1d7:	00 00       	nop	
     1d9:	90 0d       	addx	#0xd,r0h
     1db:	00 00       	nop	
     1dd:	0e 00       	addx	r0h,r0h
     1df:	00 00       	nop	
     1e1:	04 4e       	orc	#0x4e,ccr
     1e3:	00 00       	nop	
     1e5:	01 92       	.word	H'1,H'92
     1e7:	0e 01       	addx	r0h,r1h
     1e9:	51 01       	divxu.b	r0h,r1
     1eb:	32 00       	mov.b	r2h,@0x0:8
     1ed:	0d 00       	mov.w	r0,r0
     1ef:	00 0e       	.word	H'0,H'e
     1f1:	26 00       	mov.b	@0x0:8,r6h
     1f3:	00 04       	.word	H'0,H'4
     1f5:	59 00       	jmp	@er0
     1f7:	00 01       	.word	H'0,H'1
     1f9:	a9 0e       	cmp.b	#0xe,r1l
     1fb:	01 50       	.word	H'1,H'50
     1fd:	05 03       	xorc	#0x3,ccr
     1ff:	00 00       	nop	
     201:	10 1b       	shll.w	e3
     203:	00 0c       	.word	H'0,H'c
     205:	00 00       	nop	
     207:	0e 30       	addx	r3h,r0h
     209:	00 00       	nop	
     20b:	04 59       	orc	#0x59,ccr
     20d:	00 00       	nop	
     20f:	0c 00       	mov.b	r0h,r0h
     211:	00 0d       	.word	H'0,H'd
     213:	1e 00       	subx	r0h,r0h
     215:	00 04       	.word	H'0,H'4
     217:	59 0d       	.word	H'59,H'd
     219:	00 00       	nop	
     21b:	0d 28       	mov.w	r2,e0
     21d:	00 00       	nop	
     21f:	04 59       	orc	#0x59,ccr
     221:	00 00       	nop	
     223:	01 d4       	.word	H'1,H'd4
     225:	0e 01       	addx	r0h,r1h
     227:	50 05       	mulxu.b	r0h,r5
     229:	03 00       	ldc	r0h,ccr
     22b:	00 0f       	.word	H'0,H'f
     22d:	41 00       	brn	.0 (0x22f)
     22f:	0d 00       	mov.w	r0,r0
     231:	00 0d       	.word	H'0,H'd
     233:	32 00       	mov.b	r2h,@0x0:8
     235:	00 04       	.word	H'0,H'4
     237:	64 00       	or.w	r0,r0
     239:	00 01       	.word	H'0,H'1
     23b:	eb 0e       	and.b	#0xe,r3l
     23d:	01 50       	.word	H'1,H'50
     23f:	05 03       	xorc	#0x3,ccr
     241:	00 ff       	.word	H'0,H'ff
     243:	c0 08       	or.b	#0x8,r0h
     245:	00 0d       	.word	H'0,H'd
     247:	00 00       	nop	
     249:	0d 42       	mov.w	r4,r2
     24b:	00 00       	nop	
     24d:	04 6f       	orc	#0x6f,ccr
     24f:	00 00       	nop	
     251:	02 0b       	stc	ccr,r3l
     253:	0e 01       	addx	r0h,r1h
     255:	50 05       	mulxu.b	r0h,r5
     257:	03 00       	ldc	r0h,ccr
     259:	ff c0       	mov.b	#0xc0,r7l
     25b:	08 0e       	add.b	r0h,r6l
     25d:	01 51       	.word	H'1,H'51
     25f:	05 03       	xorc	#0x3,ccr
     261:	00 00       	nop	
     263:	0f 4a       	mov.w	#0x4,e2
     265:	00 0c       	.word	H'0,H'c
     267:	00 00       	nop	
     269:	0d 5a       	mov.w	r5,e2
     26b:	00 00       	nop	
     26d:	04 7a       	orc	#0x7a,ccr
     26f:	0d 00       	mov.w	r0,r0
     271:	00 0d       	.word	H'0,H'd
     273:	a0 00       	cmp.b	#0x0,r0h
     275:	00 04       	.word	H'0,H'4
     277:	6f 00 00 02 	mov.w	@(0x2:16,er0),r0
     27b:	34 0e       	mov.b	r4h,@0xe:8
     27d:	01 50       	.word	H'1,H'50
     27f:	05 03       	xorc	#0x3,ccr
     281:	00 ff       	.word	H'0,H'ff
     283:	c0 08       	or.b	#0x8,r0h
     285:	0e 01       	addx	r0h,r1h
     287:	51 05       	divxu.b	r0h,r5
     289:	03 00       	ldc	r0h,ccr
     28b:	00 0f       	.word	H'0,H'f
     28d:	83 00       	add.b	#0x0,r3h
     28f:	0d 00       	mov.w	r0,r0
     291:	00 0d       	.word	H'0,H'd
     293:	b0 00       	subx	#0x0,r0h
     295:	00 04       	.word	H'0,H'4
     297:	59 00       	jmp	@er0
     299:	00 02       	.word	H'0,H'2
     29b:	4b 0e       	bmi	.+14 (0x2ab)
     29d:	01 50       	.word	H'1,H'50
     29f:	05 03       	xorc	#0x3,ccr
     2a1:	00 00       	nop	
     2a3:	0f 88       	.word	H'f,H'88
     2a5:	00 0d       	.word	H'0,H'd
     2a7:	00 00       	nop	
     2a9:	0d be       	mov.w	e3,e6
     2ab:	00 00       	nop	
     2ad:	04 4e       	orc	#0x4e,ccr
     2af:	00 00       	nop	
softvec_init():
/home/interrupt.c:7
{
     2b1:	02 5e       	.word	H'2,H'5e
     2b3:	0e 01       	addx	r0h,r1h
     2b5:	51 01       	divxu.b	r0h,r1
softvec_setintr():
/home/interrupt.c:17
  SOFTVECS[type] = handler;
     2b7:	30 00       	mov.b	r0h,@0x0:8
     2b9:	0d 00       	mov.w	r0,r0
     2bb:	00 0d       	.word	H'0,H'd
     2bd:	c8 00       	or.b	#0x0,r0l
     2bf:	00 04       	.word	H'0,H'4
     2c1:	59 00       	jmp	@er0
     2c3:	00 02       	.word	H'0,H'2
     2c5:	75 0e       	bxor	#0x0,r6l
     2c7:	01 50       	.word	H'1,H'50
     2c9:	05 03       	xorc	#0x3,ccr
     2cb:	00 00       	nop	
     2cd:	0f 65       	mov.w	#0x6,r5
     2cf:	00 0d       	.word	H'0,H'd
     2d1:	00 00       	nop	
     2d3:	0e 54       	addx	r5h,r4h
     2d5:	00 00       	nop	
     2d7:	04 6f       	orc	#0x6f,ccr
     2d9:	00 00       	nop	
     2db:	02 95       	.word	H'2,H'95
     2dd:	0e 01       	addx	r0h,r1h
     2df:	50 05       	mulxu.b	r0h,r5
     2e1:	03 00       	ldc	r0h,ccr
     2e3:	ff c0       	mov.b	#0xc0,r7l
     2e5:	08 0e       	add.b	r0h,r6l
     2e7:	01 51       	.word	H'1,H'51
     2e9:	05 03       	xorc	#0x3,ccr
     2eb:	00 00       	nop	
     2ed:	0f 99       	mov.l	#0x1,er1
     2ef:	00 0c       	.word	H'0,H'c
     2f1:	00 00       	nop	
     2f3:	0e 64       	addx	r6h,r4h
     2f5:	00 00       	nop	
     2f7:	04 85       	orc	#0x85,ccr
     2f9:	0d 00       	mov.w	r0,r0
     2fb:	00 0e       	.word	H'0,H'e
     2fd:	7c 00       	.word	H'7c,H'0
     2ff:	00 04       	.word	H'0,H'4
     301:	59 00       	jmp	@er0
     303:	00 02       	.word	H'0,H'2
     305:	b5 0e       	subx	#0xe,r5h
     307:	01 50       	.word	H'1,H'50
     309:	05 03       	xorc	#0x3,ccr
     30b:	00 00       	nop	
     30d:	0f a9       	mov.l	#0x2,er1
     30f:	00 0d       	.word	H'0,H'd
     311:	00 00       	nop	
     313:	0e 84       	addx	r0l,r4h
     315:	00 00       	nop	
     317:	04 4e       	orc	#0x4e,ccr
     319:	00 00       	nop	
     31b:	02 ce       	.word	H'2,H'ce
     31d:	0e 01       	addx	r0h,r1h
     31f:	50 02       	mulxu.b	r0h,r2
     321:	74 00       	bor	#0x0,r0h
     323:	0e 01       	addx	r0h,r1h
     325:	51 01       	divxu.b	r0h,r1
     327:	30 00       	mov.b	r0h,@0x0:8
     329:	0d 00       	mov.w	r0,r0
     32b:	00 0e       	.word	H'0,H'e
     32d:	8e 00       	add.b	#0x0,r6l
     32f:	00 04       	.word	H'0,H'4
softvec_init():
/home/interrupt.c:12
}
     331:	59 00       	jmp	@er0
     333:	00 02       	.word	H'0,H'2
     335:	e5 0e       	and.b	#0xe,r5h
     337:	01 50       	.word	H'1,H'50
softvec_setintr():
/home/interrupt.c:16
{
     339:	05 03       	xorc	#0x3,ccr
     33b:	00 00       	nop	
     33d:	0f 65       	mov.w	#0x6,r5
/home/interrupt.c:17
  SOFTVECS[type] = handler;
     33f:	00 12       	.word	H'0,H'12
     341:	00 00       	nop	
     343:	0e 90       	addx	r1l,r0h
     345:	02 74       	stc	sbr,er4
     347:	00 0d       	.word	H'0,H'd
     349:	00 00       	nop	
     34b:	0e a4       	addx	r2l,r4h
     34d:	00 00       	nop	
/home/interrupt.c:19
}
     34f:	04 6f       	orc	#0x6f,ccr
     351:	00 00       	nop	
     353:	03 0d       	ldc	r5l,ccr
     355:	0e 01       	addx	r0h,r1h
interrupt():
/home/interrupt.c:26
{
     357:	50 05       	mulxu.b	r0h,r5
     359:	03 00       	ldc	r0h,ccr
     35b:	ff c0       	mov.b	#0xc0,r7l
/home/interrupt.c:27
  softvec_handler_t handler = SOFTVECS[type];
     35d:	08 0e       	add.b	r0h,r6l
     35f:	01 51       	.word	H'1,H'51
     361:	05 03       	xorc	#0x3,ccr
     363:	00 00       	nop	
     365:	0f c5       	mov.l	er4,er5
     367:	00 0c       	.word	H'0,H'c
     369:	00 00       	nop	
     36b:	0e ac       	addx	r2l,r4l
     36d:	00 00       	nop	
/home/interrupt.c:28
  if (handler)
     36f:	04 90       	orc	#0x90,ccr
/home/interrupt.c:29
    handler(type, sp);
     371:	0d 00       	mov.w	r0,r0
/home/interrupt.c:30
}
     373:	00 0e       	.word	H'0,H'e
     375:	c0 00       	or.b	#0x0,r0h
     377:	00 04       	.word	H'0,H'4
memset():
/home/lib.c:6
{
     379:	6f 00 00 03 	mov.w	@(0x3:16,er0),r0
     37d:	36 0e       	mov.b	r6h,@0xe:8
     37f:	01 50       	.word	H'1,H'50
     381:	05 03       	xorc	#0x3,ccr
/home/lib.c:8
  for (p = b; len > 0; len--)
     383:	00 ff       	.word	H'0,H'ff
     385:	c0 08       	or.b	#0x8,r0h
     387:	0e 01       	addx	r0h,r1h
/home/lib.c:9 (discriminator 3)
    *(p++) = c;
     389:	51 05       	divxu.b	r0h,r5
     38b:	03 00       	ldc	r0h,ccr
     38d:	00 0f       	.word	H'0,H'f
     38f:	cc 00       	or.b	#0x0,r4l
/home/lib.c:8 (discriminator 1)
  for (p = b; len > 0; len--)
     391:	0c 00       	mov.b	r0h,r0h
     393:	00 0e       	.word	H'0,H'e
/home/lib.c:11
}
     395:	c8 00       	or.b	#0x0,r0l
     397:	00 04       	.word	H'0,H'4
     399:	9b 0d       	addx	#0xd,r3l
     39b:	00 00       	nop	
     39d:	0e dc       	addx	r5l,r4l
memcpy():
/home/lib.c:14
{
     39f:	00 00       	nop	
     3a1:	04 6f       	orc	#0x6f,ccr
     3a3:	00 00       	nop	
     3a5:	03 5f       	.word	H'3,H'5f
     3a7:	0e 01       	addx	r0h,r1h
     3a9:	50 05       	mulxu.b	r0h,r5
     3ab:	03 00       	ldc	r0h,ccr
/home/lib.c:17
  for (; len > 0; len--)
     3ad:	ff c0       	mov.b	#0xc0,r7l
     3af:	08 0e       	add.b	r0h,r6l
/home/lib.c:18 (discriminator 2)
    *(d++) = *(s++);
     3b1:	01 51       	.word	H'1,H'51
     3b3:	05 03       	xorc	#0x3,ccr
     3b5:	00 00       	nop	
     3b7:	0f d4       	mov.l	er5,er4
     3b9:	00 0c       	.word	H'0,H'c
     3bb:	00 00       	nop	
     3bd:	0e e4       	addx	r6l,r4h
     3bf:	00 00       	nop	
     3c1:	04 a6       	orc	#0xa6,ccr
/home/lib.c:17 (discriminator 1)
  for (; len > 0; len--)
     3c3:	00 13       	.word	H'0,H'13
     3c5:	02 05       	stc	ccr,r5h
/home/lib.c:20
}
     3c7:	69 6e       	mov.w	@er6,e6
     3c9:	74 00       	bor	#0x0,r0h
     3cb:	14 00       	or.b	r0h,r0h
     3cd:	00 00       	nop	
     3cf:	45 00       	bcs	.0 (0x3d1)
     3d1:	00 03       	.word	H'0,H'3
     3d3:	80 15       	add.b	#0x15,r0h
memcmp():
/home/lib.c:23
{
     3d5:	00 00       	nop	
     3d7:	00 33       	.word	H'0,H'33
     3d9:	0f 00       	daa	r0h
     3db:	02 04       	stc	ccr,r4h
     3dd:	05 00       	xorc	#0x0,ccr
     3df:	00 01       	.word	H'0,H'1
/home/lib.c:25
  for (; len > 0; len--) {
     3e1:	0b 16       	.word	H'b,H'16
/home/lib.c:26
    if (*p1 != *p2)
     3e3:	00 00       	nop	
     3e5:	03 80       	.word	H'3,H'80
     3e7:	17 04       	not.b	r4h
     3e9:	00 00       	nop	
/home/lib.c:27
      return (*p1 > *p2) ? 1 : -1;
     3eb:	00 25       	.word	H'0,H'25
     3ed:	17 04       	not.b	r4h
     3ef:	00 00       	nop	
     3f1:	00 45       	.word	H'0,H'45
/home/lib.c:28
    p1++;
     3f3:	18 17       	sub.b	r1h,r7h
/home/lib.c:29
    p2++;
     3f5:	04 00       	orc	#0x0,ccr
     3f7:	00 03       	.word	H'0,H'3
     3f9:	98 19       	addx	#0x19,r0l
/home/lib.c:25 (discriminator 1)
  for (; len > 0; len--) {
     3fb:	00 00       	nop	
     3fd:	02 ae       	stmac	mach,er6
/home/lib.c:31
  return 0;
     3ff:	01 3a       	.word	H'1,H'3a
     401:	01 00       	.word	H'1,H'0
/home/lib.c:27
      return (*p1 > *p2) ? 1 : -1;
     403:	00 03       	.word	H'0,H'3
     405:	b5 1a       	subx	#0x1a,r5h
/home/lib.c:32
}
     407:	69 00       	mov.w	@er0,r0
     409:	01 3c       	.word	H'1,H'3c
     40b:	00 00       	nop	
     40d:	03 87       	.word	H'3,H'87
     40f:	00 1b       	.word	H'0,H'1b
strlen():
/home/lib.c:35
{
     411:	00 00       	nop	
     413:	01 2e       	.word	H'1,H'2e
     415:	01 24       	.word	H'1,H'24
/home/lib.c:37
  for (len = 0; *s; s++, len++)
     417:	00 00       	nop	
     419:	03 69       	ldc	er1,vbr
/home/lib.c:37 (discriminator 3)
     41b:	01 00       	.word	H'1,H'0
     41d:	00 03       	.word	H'0,H'3
/home/lib.c:37 (discriminator 1)
     41f:	e5 1c       	and.b	#0x1c,r5h
     421:	62 75       	bclr	r7h,r5h
/home/lib.c:40
}
     423:	66 00       	and.w	r0,r0
     425:	01 24       	.word	H'1,H'24
     427:	00 00       	nop	
     429:	03 92       	.word	H'3,H'92
strcpy():
/home/lib.c:43
{
     42b:	1d 00       	cmp.w	r0,r0
     42d:	00 02       	.word	H'0,H'2
     42f:	de 01       	xor.b	#0x1,r6l
     431:	24 00       	mov.b	@0x0:8,r4h
/home/lib.c:46
    *dst = *src;
     433:	00 03       	.word	H'0,H'3
     435:	80 1a       	add.b	#0x1a,r0h
/home/lib.c:47
    if (!*src) break;
     437:	69 00       	mov.w	@er0,r0
     439:	01 26       	.word	H'1,H'26
/home/lib.c:45
  for (;; dst++, src++) {
     43b:	00 00       	nop	
     43d:	03 80       	.word	H'3,H'80
/home/lib.c:46
    *dst = *src;
     43f:	00 1b       	.word	H'0,H'1b
/home/lib.c:50
}
     441:	00 00       	nop	
     443:	00 90       	.word	H'0,H'90
     445:	01 09       	.word	H'1,H'9
strcmp():
/home/lib.c:53
{
     447:	00 00       	nop	
     449:	03 69       	ldc	er1,vbr
     44b:	01 00       	.word	H'1,H'0
/home/lib.c:54
  while (*s1 || *s2) {
     44d:	00 04       	.word	H'0,H'4
/home/lib.c:55
    if (*s1 != *s2)
     44f:	2d 03       	mov.b	@0x3:8,r5l
     451:	00 00       	nop	
/home/lib.c:56
      return (*s1 > *s2) ? 1 : -1;
     453:	01 14       	.word	H'1,H'14
     455:	01 0c       	.word	H'1,H'c
     457:	00 00       	nop	
     459:	03 69       	ldc	er1,vbr
/home/lib.c:57
    s1++;
     45b:	03 00       	ldc	r0h,ccr
/home/lib.c:58
    s2++;
     45d:	00 00       	nop	
/home/lib.c:54
  while (*s1 || *s2) {
     45f:	a4 01       	cmp.b	#0x1,r4h
     461:	0c 00       	mov.b	r0h,r0h
     463:	00 03       	.word	H'0,H'3
     465:	69 03       	mov.w	@er0,r3
/home/lib.c:54 (discriminator 1)
     467:	00 00       	nop	
     469:	00 af       	.word	H'0,H'af
     46b:	01 0c       	.word	H'1,H'c
     46d:	00 00       	nop	
     46f:	03 69       	ldc	er1,vbr
     471:	03 00       	ldc	r0h,ccr
     473:	00 00       	nop	
/home/lib.c:56
      return (*s1 > *s2) ? 1 : -1;
     475:	9a 01       	addx	#0x1,r2l
     477:	0c 00       	mov.b	r0h,r0h
/home/lib.c:61
}
     479:	00 03       	.word	H'0,H'3
     47b:	69 03       	mov.w	@er0,r3
     47d:	00 00       	nop	
strncmp():
/home/lib.c:64
{
     47f:	01 29       	.word	H'1,H'29
     481:	01 0c       	.word	H'1,H'c
     483:	00 00       	nop	
     485:	03 69       	ldc	er1,vbr
     487:	00 1e       	.word	H'0,H'1e
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
     489:	00 00       	nop	
/home/lib.c:66
    if (*s1 != *s2)
     48b:	00 88       	.word	H'0,H'88
     48d:	00 00       	nop	
     48f:	00 88       	.word	H'0,H'88
/home/lib.c:67
      return (*s1 > *s2) ? 1 : -1;
     491:	02 12       	stc	exr,r2h
     493:	1e 00       	subx	r0h,r0h
     495:	00 00       	nop	
     497:	70 00       	bset	#0x0,r0h
/home/lib.c:68
    s1++;
     499:	00 00       	nop	
/home/lib.c:69
    s2++;
     49b:	70 03       	bset	#0x0,r3h
/home/lib.c:70
    len--;
     49d:	04 1e       	orc	#0x1e,ccr
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
     49f:	00 00       	nop	
     4a1:	01 45       	.word	H'1,H'45
/home/lib.c:65 (discriminator 2)
     4a3:	00 00       	nop	
     4a5:	01 45       	.word	H'1,H'45
     4a7:	04 07       	orc	#0x7,ccr
/home/lib.c:65 (discriminator 3)
     4a9:	1e 00       	subx	r0h,r0h
     4ab:	00 01       	.word	H'0,H'1
/home/lib.c:72
  return 0;
     4ad:	03 00       	ldc	r0h,ccr
     4af:	00 01       	.word	H'0,H'1
/home/lib.c:67
      return (*s1 > *s2) ? 1 : -1;
     4b1:	03 05       	ldc	r5h,ccr
     4b3:	10 1e       	shll.w	e6
     4b5:	00 00       	nop	
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
     4b7:	00 7c       	.word	H'0,H'7c
     4b9:	00 00       	nop	
     4bb:	00 7c       	.word	H'0,H'7c
     4bd:	05 0e       	xorc	#0xe,ccr
     4bf:	1e 00       	subx	r0h,r0h
     4c1:	00 01       	.word	H'0,H'1
/home/lib.c:73
}
     4c3:	24 00       	mov.b	@0x0:8,r4h
     4c5:	00 01       	.word	H'0,H'1
     4c7:	24 05       	mov.b	@0x5:8,r4h
     4c9:	0f 1e       	mov.w	#0x1,e6
     4cb:	00 00       	nop	
putc():
/home/lib.c:77
{
     4cd:	00 f0       	.word	H'0,H'f0
     4cf:	00 00       	nop	
     4d1:	00 f0       	.word	H'0,H'f0
     4d3:	05 09       	xorc	#0x9,ccr
     4d5:	1e 00       	subx	r0h,r0h
     4d7:	00 00       	nop	
/home/lib.c:78
  if (c == '\n')
     4d9:	cc 00       	or.b	#0x0,r4l
     4db:	00 00       	nop	
/home/lib.c:79
    serial_send_byte(SERIAL_DEFAULT_DEVICE, '\r');
     4dd:	cc 06       	or.b	#0x6,r4l
     4df:	04 1e       	orc	#0x1e,ccr
     4e1:	00 00       	nop	
     4e3:	01 4f       	.word	H'1,H'4f
     4e5:	00 00       	nop	
/home/lib.c:80
  return serial_send_byte(SERIAL_DEFAULT_DEVICE, c);
     4e7:	01 4f       	.word	H'1,H'4f
     4e9:	07 04       	ldc	#0x4,ccr
     4eb:	1e 00       	subx	r0h,r0h
     4ed:	00 00       	nop	
     4ef:	c1 00       	or.b	#0x0,r1h
/home/lib.c:81
}
     4f1:	00 00       	nop	
     4f3:	c1 04       	or.b	#0x4,r1h
     4f5:	08 1e       	add.b	r1h,r6l
     4f7:	00 00       	nop	
     4f9:	00 b5       	.word	H'0,H'b5
getc():
/home/lib.c:85
{
     4fb:	00 00       	nop	
     4fd:	00 b5       	.word	H'0,H'b5
     4ff:	04 09       	orc	#0x9,ccr
     501:	1e 00       	subx	r0h,r0h
     503:	00 00       	nop	
/home/lib.c:86
  unsigned char c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
     505:	d8 00       	xor.b	#0x0,r0l
     507:	00 00       	nop	
     509:	d8 04       	xor.b	#0x4,r0l
     50b:	0a 00       	inc	r0h

0000050d <.Ldebug_info0>:
.Ldebug_info0():
     50d:	00 00       	nop	
getc():
/home/lib.c:87
  c = (c == '\r') ? '\n' : c;
     50f:	01 6b       	.word	H'1,H'6b
     511:	00 04       	.word	H'0,H'4
     513:	00 00       	nop	
/home/lib.c:88 (discriminator 4)
  putc(c); /* エコー・バック */
     515:	01 d2       	.word	H'1,H'd2
     517:	04 01       	orc	#0x1,ccr
     519:	00 00       	nop	
/home/lib.c:90
}
     51b:	00 00       	nop	
     51d:	0c 00       	mov.b	r0h,r0h
     51f:	00 01       	.word	H'0,H'1
     521:	6c 00       	mov.b	@er0+,r0h
     523:	00 00       	nop	
     525:	4b 00       	bmi	.0 (0x527)
puts():
/home/lib.c:94
{
     527:	00 02       	.word	H'0,H'2
     529:	b0 00       	subx	#0x0,r0h
     52b:	00 00       	nop	
     52d:	c8 00       	or.b	#0x0,r0l
     52f:	00 02       	.word	H'0,H'2
     531:	0f 02       	daa	r2h
/home/lib.c:95
  while (*str)
     533:	01 08 00 00 	mov.l	@er0,@er0
/home/lib.c:96
    putc(*(str++));
     537:	00 51       	.word	H'0,H'51
     539:	02 02       	stc	ccr,r2h
/home/lib.c:95
  while (*str)
     53b:	07 00       	ldc	#0x0,ccr
     53d:	00 00       	nop	
/home/lib.c:98
}
     53f:	38 02       	mov.b	r0l,@0x2:8
     541:	04 07       	orc	#0x7,ccr
     543:	00 00       	nop	
     545:	00 26       	.word	H'0,H'26
     547:	03 00       	ldc	r0h,ccr
     549:	00 01       	.word	H'0,H'1
gets():
/home/lib.c:102
{
     54b:	3d 02       	mov.b	r5l,@0x2:8
     54d:	05 00       	xorc	#0x0,ccr
     54f:	00 00       	nop	
     551:	45 02       	bcs	.+2 (0x555)
     553:	01 08 00 00 	mov.l	@er0,@er0
     557:	00 5a       	.word	H'0,H'5a
     559:	04 00       	orc	#0x0,ccr
     55b:	00 01       	.word	H'0,H'1
     55d:	5d 02       	jsr	@@520 (0x208)
     55f:	08 00       	add.b	r0h,r0h
     561:	00 00       	nop	
/home/lib.c:106
    c = getc();
     563:	57 02       	.word	H'57,H'2
     565:	02 05       	stc	ccr,r5h
     567:	00 00       	nop	
     569:	01 33       	.word	H'1,H'33
     56b:	04 00       	orc	#0x0,ccr
/home/lib.c:107
    if (c == '\n')
     56d:	00 01       	.word	H'0,H'1
     56f:	78 02       	.word	H'78,H'2
     571:	0a 00       	inc	r0h
     573:	00 00       	nop	
     575:	69 05       	mov.w	@er0,r5
/home/lib.c:108
      c = '\0';
     577:	04 00       	orc	#0x0,ccr
/home/lib.c:109
    buf[i++] = c;
     579:	00 00       	nop	
     57b:	6f 06 00 00 	mov.w	@(0x0:16,er0),r6
/home/lib.c:112
}
     57f:	00 7f       	.word	H'0,H'7f
     581:	07 00       	ldc	#0x0,ccr
     583:	00 00       	nop	
     585:	4c 07       	.word	H'4c,H'7
     587:	00 00       	nop	
     589:	00 33       	.word	H'0,H'33
     58b:	00 08       	.word	H'0,H'8
     58d:	00 00       	nop	
     58f:	01 9a       	.word	H'1,H'9a
putxval():
/home/lib.c:116
{
     591:	01 19       	.word	H'1,H'19
     593:	00 00       	nop	
     595:	03 56       	.word	H'3,H'56
     597:	00 00       	nop	
     599:	00 22       	.word	H'0,H'22
     59b:	01 9c       	.word	H'1,H'9c
     59d:	00 00       	nop	
     59f:	00 d5       	.word	H'0,H'd5
/home/lib.c:121
  *(p--) = '\0';
     5a1:	09 00       	add.w	r0,r0
     5a3:	00 01       	.word	H'0,H'1
     5a5:	58 01       	.word	H'58,H'1
/home/lib.c:123
  if (!value && !column)
     5a7:	19 00       	sub.w	r0,r0
     5a9:	00 00       	nop	
/home/lib.c:123 (discriminator 1)
     5ab:	4c 00       	bge	.0 (0x5ad)
     5ad:	00 00       	nop	
/home/lib.c:124
    column++;
     5af:	ae 0a       	cmp.b	#0xa,r6l
     5b1:	73 70       	btst	#0x7,r0h
     5b3:	00 01       	.word	H'0,H'1
     5b5:	19 00       	sub.w	r0,r0
     5b7:	00 00       	nop	
/home/lib.c:127
    *(p--) = "0123456789abcdef"[value & 0xf];
     5b9:	33 00       	mov.b	r3h,@0x0:8
     5bb:	00 00       	nop	
     5bd:	cf 0b       	or.b	#0xb,r7l
     5bf:	00 00       	nop	
     5c1:	01 a4       	.word	H'1,H'a4
     5c3:	01 1b       	.word	H'1,H'1b
     5c5:	00 00       	nop	
     5c7:	00 5e       	.word	H'0,H'5e
     5c9:	00 00       	nop	
     5cb:	00 f0       	.word	H'0,H'f0
/home/lib.c:128
    value >>= 4;
     5cd:	0c 00       	mov.b	r0h,r0h
     5cf:	00 03       	.word	H'0,H'3
     5d1:	72 0d       	bclr	#0x0,r5l
     5d3:	01 50       	.word	H'1,H'50
/home/lib.c:129
    if (column) column--;
     5d5:	03 f3       	.word	H'3,H'f3
     5d7:	01 50       	.word	H'1,H'50
/home/lib.c:129 (discriminator 1)
     5d9:	0d 01       	mov.w	r0,r1
     5db:	51 03       	divxu.b	r0h,r3
/home/lib.c:126
  while (value || column) {
     5dd:	f3 01       	mov.b	#0x1,r3h
     5df:	51 00       	divxu.b	r0h,r0
/home/lib.c:126 (discriminator 1)
     5e1:	00 0e       	.word	H'0,H'e
     5e3:	00 00       	nop	
/home/lib.c:132
  puts(p + 1);
     5e5:	01 8a       	.word	H'1,H'8a
     5e7:	01 0f       	.word	H'1,H'f
     5e9:	00 00       	nop	
     5eb:	00 fc       	.word	H'0,H'fc
/home/lib.c:135
}
     5ed:	01 00       	.word	H'1,H'0
     5ef:	00 00       	nop	
     5f1:	fc 0f       	mov.b	#0xf,r4l
     5f3:	00 00       	nop	
     5f5:	01 58       	.word	H'1,H'58
     5f7:	01 0f       	.word	H'1,H'f
     5f9:	00 00       	nop	
     5fb:	00 4c       	.word	H'0,H'4c
     5fd:	0f 00       	daa	r0h
serial_init():
/home/serial.c:59
{
     5ff:	00 01       	.word	H'0,H'1
     601:	a4 01       	cmp.b	#0x1,r4h
     603:	0f 00       	daa	r0h
/home/serial.c:60
  volatile struct h8_3069f_sci *sci = regs[index].sci;
     605:	00 00       	nop	
     607:	5e 00 10 02 	jsr	@0x1002:24
     60b:	05 69       	xorc	#0x69,ccr
     60d:	6e 74 00 11 	mov.b	@(0x11:16,er7),r4h
     611:	00 00       	nop	
     613:	00 88       	.word	H'0,H'88
/home/serial.c:62
  sci->scr = 0;
     615:	01 06       	.word	H'1,H'6
     617:	00 00       	nop	
     619:	00 fc       	.word	H'0,H'fc
/home/serial.c:63
  sci->smr = 0;
     61b:	00 00       	nop	
/home/serial.c:64
  sci->brr = 64; /* 20MHzのクロックから9600bpsを生成(25MHzの場合は80にする) */
     61d:	02 b0       	stmac	macl,er0
     61f:	00 00       	nop	
     621:	00 88       	.word	H'0,H'88
/home/serial.c:65
  sci->scr = H8_3069F_SCI_SCR_RE | H8_3069F_SCI_SCR_TE; /* 送受信可能 */
     623:	01 9c       	.word	H'1,H'9c
     625:	00 00       	nop	
     627:	01 4e       	.word	H'1,H'4e
/home/serial.c:66
  sci->ssr = 0;
     629:	0b 00       	adds	#1,er0
     62b:	00 01       	.word	H'0,H'1
/home/serial.c:69
}
     62d:	58 01       	.word	H'58,H'1
     62f:	08 00       	add.b	r0h,r0h
     631:	00 00       	nop	
     633:	fc 00       	mov.b	#0x0,r4l
serial_is_send_enable():
/home/serial.c:73
{
     635:	00 01       	.word	H'0,H'1
     637:	03 12       	ldc	r2h,exr
     639:	00 00       	nop	
/home/serial.c:74
  volatile struct h8_3069f_sci *sci = regs[index].sci;
     63b:	00 d5       	.word	H'0,H'd5
     63d:	00 00       	nop	
     63f:	02 b6       	stmac	macl,er6
     641:	00 00       	nop	
     643:	00 7a       	.word	H'0,H'7a
     645:	01 0a       	.word	H'1,H'a
     647:	13 00       	rotxr.b	r0h
     649:	00 00       	nop	
/home/serial.c:75
  return (sci->ssr & H8_3069F_SCI_SSR_TDRE);
     64b:	f0 00       	mov.b	#0x0,r0h
     64d:	00 01       	.word	H'0,H'1
     64f:	53 13       	divxu.w	r1,er3
/home/serial.c:76
}
     651:	00 00       	nop	
     653:	00 e5       	.word	H'0,H'e5
     655:	00 00       	nop	
     657:	01 67       	.word	H'1,H'67
serial_send_byte():
/home/serial.c:80
{
     659:	00 00       	nop	
     65b:	14 00       	or.b	r0h,r0h
     65d:	00 00       	nop	
/home/serial.c:81
  volatile struct h8_3069f_sci *sci = regs[index].sci;
     65f:	d5 00       	xor.b	#0x0,r5h
     661:	00 03       	.word	H'0,H'3
     663:	38 00       	mov.b	r0l,@0x0:8
     665:	00 00       	nop	
     667:	1e 01       	subx	r0h,r1h
     669:	9c 13       	addx	#0x13,r4l
     66b:	00 00       	nop	
     66d:	00 e5       	.word	H'0,H'e5
serial_is_send_enable():
/home/serial.c:75 (discriminator 1)
  return (sci->ssr & H8_3069F_SCI_SSR_TDRE);
     66f:	00 00       	nop	
     671:	01 ab       	.word	H'1,H'ab
serial_send_byte():
/home/serial.c:84
  while (!serial_is_send_enable(index))
     673:	15 00       	xor.b	r0h,r0h
/home/serial.c:86
  sci->tdr = c;
     675:	00 00       	nop	
     677:	f0 01       	mov.b	#0x1,r0h
/home/serial.c:87
  sci->ssr &= ~H8_3069F_SCI_SSR_TDRE; /* 送信開始 */
     679:	51 00       	divxu.b	r0h,r0
	...

0000067c <.Ldebug_info0>:
.Ldebug_info0():
     67c:	00 00       	nop	
serial_send_byte():
/home/serial.c:87
     67e:	04 06       	orc	#0x6,ccr
     680:	00 04       	.word	H'0,H'4
/home/serial.c:90
}
     682:	00 00       	nop	
     684:	02 fe       	.word	H'2,H'fe
     686:	04 01       	orc	#0x1,ccr
     688:	00 00       	nop	
serial_is_recv_enable():
/home/serial.c:94
{
     68a:	00 00       	nop	
     68c:	0c 00       	mov.b	r0h,r0h
     68e:	00 01       	.word	H'0,H'1
/home/serial.c:95
  volatile struct h8_3069f_sci *sci = regs[index].sci;
     690:	ed 00       	and.b	#0x0,r5l
     692:	00 00       	nop	
     694:	4b 00       	bmi	.0 (0x696)
     696:	00 03       	.word	H'0,H'3
     698:	78 00       	.word	H'78,H'0
     69a:	00 02       	.word	H'0,H'2
     69c:	86 00       	add.b	#0x0,r6h
     69e:	00 02       	.word	H'0,H'2
/home/serial.c:96
  return (sci->ssr & H8_3069F_SCI_SSR_RDRF);
     6a0:	ad 02       	cmp.b	#0x2,r5l
     6a2:	01 08 00 00 	mov.l	@er0,@er0
/home/serial.c:97
}
     6a6:	00 51       	.word	H'0,H'51
     6a8:	02 02       	stc	ccr,r2h
     6aa:	07 00       	ldc	#0x0,ccr
     6ac:	00 00       	nop	
serial_recv_byte():
/home/serial.c:101
{
     6ae:	38 02       	mov.b	r0l,@0x2:8
     6b0:	04 07       	orc	#0x7,ccr
     6b2:	00 00       	nop	
/home/serial.c:102
  volatile struct h8_3069f_sci *sci = regs[index].sci;
     6b4:	00 26       	.word	H'0,H'26
     6b6:	03 00       	ldc	r0h,ccr
     6b8:	00 01       	.word	H'0,H'1
     6ba:	03 01       	ldc	r1h,ccr
     6bc:	73 00       	btst	#0x0,r0h
     6be:	00 00       	nop	
     6c0:	96 00       	addx	#0x0,r6h
     6c2:	00 05       	.word	H'0,H'5
serial_is_recv_enable():
/home/serial.c:96 (discriminator 1)
  return (sci->ssr & H8_3069F_SCI_SSR_RDRF);
     6c4:	90 00       	addx	#0x0,r0h
     6c6:	00 00       	nop	
serial_recv_byte():
/home/serial.c:106
  while (!serial_is_recv_enable(index))
     6c8:	6e 01 9c 00 	mov.b	@(0x9c00:16,er0),r1h
/home/serial.c:108
  c = sci->rdr;
     6cc:	00 00       	nop	
     6ce:	96 04       	addx	#0x4,r6h
/home/serial.c:109
  sci->ssr &= ~H8_3069F_SCI_SSR_RDRF; /* 受信完了 */
     6d0:	00 00       	nop	
     6d2:	01 fa       	.word	H'1,H'fa
     6d4:	01 73       	.word	H'1,H'73
     6d6:	00 00       	nop	
     6d8:	00 33       	.word	H'0,H'33
/home/serial.c:112
}
     6da:	00 00       	nop	
     6dc:	01 cc       	.word	H'1,H'cc
     6de:	04 00       	orc	#0x0,ccr
xmodem_recv():
/home/xmodem.c:60
{
     6e0:	00 01       	.word	H'0,H'1
     6e2:	f3 01       	mov.b	#0x1,r3h
     6e4:	73 00       	btst	#0x0,r0h
     6e6:	00 00       	nop	
     6e8:	96 00       	addx	#0x0,r6h
     6ea:	00 01       	.word	H'0,H'1
     6ec:	f6 05       	mov.b	#0x5,r6h
     6ee:	62 75       	bclr	r7h,r5h
     6f0:	66 00       	and.w	r0,r0
     6f2:	01 75       	.word	H'1,H'75
     6f4:	00 00       	nop	
/home/xmodem.c:63
  unsigned char c, block_number = 1;
     6f6:	00 9d       	.word	H'0,H'9d
     6f8:	02 91       	.word	H'2,H'91
     6fa:	6b 06 70 00 	mov.w	@0x7000:16,r6
/home/xmodem.c:61
  int r, receiving = 0;
     6fe:	01 76       	.word	H'1,H'76
     700:	00 00       	nop	
     702:	00 b9       	.word	H'0,H'b9
/home/xmodem.c:66
    if (!receiving)
     704:	00 00       	nop	
     706:	02 22       	stmac	mach,er2
     708:	07 00       	ldc	#0x0,ccr
/home/xmodem.c:69
    c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
     70a:	00 05       	.word	H'0,H'5
     70c:	ec 00       	and.b	#0x0,r4l
     70e:	00 01       	.word	H'0,H'1
     710:	11 00       	shlr.b	r0h
/home/xmodem.c:71
    if (c == XMODEM_EOT) { /* 受信終了 */
     712:	08 02       	add.b	r0h,r2h
     714:	05 69       	xorc	#0x69,ccr
     716:	6e 74 00 09 	mov.b	@(0x9:16,er7),r4h
xmodem_wait():
/home/xmodem.c:22
    if (++cnt >= 50000) {
     71a:	00 00       	nop	
/home/xmodem.c:24
      serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_NAK);
     71c:	00 ad       	.word	H'0,H'ad
     71e:	00 00       	nop	
     720:	00 ad       	.word	H'0,H'ad
     722:	0a 00       	inc	r0h
     724:	00 00       	nop	
xmodem_recv():
/home/xmodem.c:61
  int r, receiving = 0;
     726:	33 08       	mov.b	r3h,@0x8:8
     728:	00 02       	.word	H'0,H'2
     72a:	01 08 00 00 	mov.l	@er0,@er0
xmodem_wait():
/home/xmodem.c:21
  while (!serial_is_recv_enable(SERIAL_DEFAULT_DEVICE)) {
     72e:	00 5a       	.word	H'0,H'5a
     730:	0b 00       	adds	#1,er0
     732:	00 00       	nop	
     734:	ad 0c       	cmp.b	#0xc,r5l
     736:	04 00       	orc	#0x0,ccr
     738:	00 00       	nop	
     73a:	ad 03       	cmp.b	#0x3,r5l
     73c:	00 00       	nop	
     73e:	01 24       	.word	H'1,H'24
     740:	01 65       	.word	H'1,H'65
     742:	00 00       	nop	
     744:	00 96       	.word	H'0,H'96
xmodem_recv():
/home/xmodem.c:72
      serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_ACK);
     746:	00 00       	nop	
     748:	05 4a       	xorc	#0x4a,ccr
     74a:	00 00       	nop	
     74c:	00 46       	.word	H'0,H'46
     74e:	01 9c       	.word	H'1,H'9c
/home/xmodem.c:93
  return size;
     750:	00 00       	nop	
     752:	01 0b       	.word	H'1,H'b
/home/xmodem.c:74
    } else if (c == XMODEM_CAN) { /* 受信中断 */
     754:	0d 62       	mov.w	r6,r2
     756:	75 66       	bxor	#0x6,r6h
     758:	00 01       	.word	H'0,H'1
/home/xmodem.c:77
      receiving++;
     75a:	65 00       	xor.w	r0,r0
     75c:	00 01       	.word	H'0,H'1
/home/xmodem.c:76
    } else if (c == XMODEM_SOH) { /* 受信開始 */
     75e:	0b 00       	adds	#1,er0
     760:	00 02       	.word	H'0,H'2
     762:	4f 06       	ble	.+6 (0x76a)
/home/xmodem.c:77
      receiving++;
     764:	69 00       	mov.w	@er0,r0
     766:	01 67       	.word	H'1,H'67
     768:	00 00       	nop	
xmodem_read_block():
/home/xmodem.c:37
  block_num = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
     76a:	00 96       	.word	H'0,H'96
     76c:	00 00       	nop	
     76e:	02 7b       	stc	sbr,er3
     770:	06 63       	andc	#0x63,ccr
/home/xmodem.c:38
  if (block_num != block_number)
     772:	00 01       	.word	H'0,H'1
     774:	68 00       	mov.b	@er0,r0h
     776:	00 00       	nop	
     778:	25 00       	mov.b	@0x0:8,r5h
     77a:	00 02       	.word	H'0,H'2
/home/xmodem.c:41
  block_num ^= serial_recv_byte(SERIAL_DEFAULT_DEVICE);
     77c:	f3 07       	mov.b	#0x7,r3h
     77e:	00 00       	nop	
     780:	05 6c       	xorc	#0x6c,ccr
     782:	00 00       	nop	
     784:	01 43       	.word	H'1,H'43
     786:	00 0c       	.word	H'0,H'c
     788:	04 00       	orc	#0x0,ccr
/home/xmodem.c:42
  if (block_num != 0xff)
     78a:	00 00       	nop	
     78c:	25 03       	mov.b	@0x3:8,r5h
     78e:	00 00       	nop	
     790:	00 7c       	.word	H'0,H'7c
     792:	01 5d 00 00 	mov.w	#0x0,@er0
/home/xmodem.c:45
  check_sum = 0;
     796:	00 96       	.word	H'0,H'96
/home/xmodem.c:47
    c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
     798:	00 00       	nop	
     79a:	05 26       	xorc	#0x26,ccr
     79c:	00 00       	nop	
     79e:	00 24       	.word	H'0,H'24
     7a0:	01 9c       	.word	H'1,H'9c
     7a2:	00 00       	nop	
     7a4:	01 43       	.word	H'1,H'43
     7a6:	0d 73       	mov.w	r7,r3
     7a8:	74 72       	bor	#0x7,r2h
     7aa:	00 01       	.word	H'0,H'1
     7ac:	5d 00       	jsr	@er0
     7ae:	00 01       	.word	H'0,H'1
     7b0:	0b 00       	adds	#1,er0
/home/xmodem.c:48
    *(buf++) = c;
     7b2:	00 03       	.word	H'0,H'3
     7b4:	12 07       	rotxl.b	r7h
     7b6:	00 00       	nop	
     7b8:	05 3a       	xorc	#0x3a,ccr
/home/xmodem.c:49
    check_sum += c;
     7ba:	00 00       	nop	
     7bc:	01 8d       	.word	H'1,H'8d
     7be:	00 03       	.word	H'0,H'3
     7c0:	00 00       	nop	
     7c2:	01 e1       	.word	H'1,H'e1
/home/xmodem.c:46
  for (i = 0; i < XMODEM_BLOCK_SIZE; i++) {
     7c4:	01 54       	.word	H'1,H'54
     7c6:	00 00       	nop	
     7c8:	00 25       	.word	H'0,H'25
     7ca:	00 00       	nop	
     7cc:	04 fa       	orc	#0xfa,ccr
/home/xmodem.c:52
  check_sum ^= serial_recv_byte(SERIAL_DEFAULT_DEVICE);
     7ce:	00 00       	nop	
     7d0:	00 2c       	.word	H'0,H'2c
     7d2:	01 9c       	.word	H'1,H'9c
     7d4:	00 00       	nop	
     7d6:	01 8d       	.word	H'1,H'8d
     7d8:	06 63       	andc	#0x63,ccr
     7da:	00 01       	.word	H'0,H'1
/home/xmodem.c:53
  if (check_sum)
     7dc:	56 00       	rte/l	er0
     7de:	00 00       	nop	
     7e0:	25 00       	mov.b	@0x0:8,r5h
     7e2:	00 03       	.word	H'0,H'3
     7e4:	30 0e       	mov.b	r0h,@0xe:8
xmodem_recv():
/home/xmodem.c:82
	block_number++;
     7e6:	00 00       	nop	
     7e8:	05 0c       	xorc	#0xc,ccr
     7ea:	00 00       	nop	
     7ec:	03 f3       	.word	H'3,H'f3
     7ee:	00 00       	nop	
/home/xmodem.c:83
	size += r;
     7f0:	01 7c       	.word	H'1,H'7c
     7f2:	0f 01       	daa	r1h
     7f4:	50 01       	mulxu.b	r0h,r1
/home/xmodem.c:84
	buf  += r;
     7f6:	31 00       	mov.b	r1h,@0x0:8
     7f8:	10 00       	shll.b	r0h
     7fa:	00 05       	.word	H'0,H'5
/home/xmodem.c:85
	serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_ACK);
     7fc:	1a 00       	dec.b	r0h
     7fe:	00 01       	.word	H'0,H'1
/home/xmodem.c:80
	serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_NAK);
     800:	8d 0f       	add.b	#0xf,r5l
     802:	01 50       	.word	H'1,H'50
     804:	02 74       	stc	sbr,er4
     806:	00 00       	nop	
     808:	00 03       	.word	H'0,H'3
     80a:	00 00       	nop	
     80c:	01 cb       	.word	H'1,H'cb
/home/xmodem.c:88
      if (receiving)
     80e:	01 4c       	.word	H'1,H'4c
     810:	00 00       	nop	
     812:	00 96       	.word	H'0,H'96
/home/xmodem.c:75
      return -1;
     814:	00 00       	nop	
     816:	04 cc       	orc	#0xcc,ccr
/home/xmodem.c:94
}
     818:	00 00       	nop	
     81a:	00 2e       	.word	H'0,H'2e
     81c:	01 9c       	.word	H'1,H'9c
     81e:	00 00       	nop	
     820:	01 e1       	.word	H'1,H'e1
     822:	0d 63       	mov.w	r6,r3
     824:	00 01       	.word	H'0,H'1
     826:	4c 00       	bge	.0 (0x828)
     828:	00 00       	nop	
     82a:	25 00       	mov.b	@0x0:8,r5h
     82c:	00 03       	.word	H'0,H'3
elf_load():
/home/elf.c:84
{
     82e:	59 0e       	.word	H'59,H'e
     830:	00 00       	nop	
     832:	04 e6       	orc	#0xe6,ccr
     834:	00 00       	nop	
     836:	03 fe       	.word	H'3,H'fe
     838:	00 00       	nop	
     83a:	01 cb       	.word	H'1,H'cb
     83c:	0f 01       	daa	r1h
     83e:	50 01       	mulxu.b	r0h,r1
elf_check():
/home/elf.c:44
  if (memcmp(header->id.magic, "\x7f" "ELF", 4))
     840:	31 0f       	mov.b	r1h,@0xf:8
     842:	01 51       	.word	H'1,H'51
     844:	01 3d       	.word	H'1,H'3d
     846:	00 10       	.word	H'0,H'10
     848:	00 00       	nop	
     84a:	04 f0       	orc	#0xf0,ccr
     84c:	00 00       	nop	
     84e:	03 fe       	.word	H'3,H'fe
     850:	0f 01       	daa	r1h
     852:	50 01       	mulxu.b	r0h,r1
/home/elf.c:47
  if (header->id.class   != 1) return -1; /* ELF32 */
     854:	31 0f       	mov.b	r1h,@0xf:8
     856:	01 51       	.word	H'1,H'51
     858:	02 74       	stc	sbr,er4
     85a:	00 00       	nop	
     85c:	00 03       	.word	H'0,H'3
/home/elf.c:48
  if (header->id.format  != 2) return -1; /* Big endian */
     85e:	00 00       	nop	
     860:	02 07       	stc	ccr,r7h
     862:	01 3f       	.word	H'1,H'3f
     864:	00 00       	nop	
     866:	00 96       	.word	H'0,H'96
/home/elf.c:49
  if (header->id.version != 1) return -1; /* version 1 */
     868:	00 00       	nop	
     86a:	04 7e       	orc	#0x7e,ccr
     86c:	00 00       	nop	
     86e:	00 4e       	.word	H'0,H'4e
     870:	01 9c       	.word	H'1,H'9c
/home/elf.c:50
  if (header->type       != 2) return -1; /* Executable file */
     872:	00 00       	nop	
     874:	02 26       	stmac	mach,er6
     876:	0d 73       	mov.w	r7,r3
     878:	31 00       	mov.b	r1h,@0x0:8
     87a:	01 3f       	.word	H'1,H'3f
/home/elf.c:51
  if (header->version    != 1) return -1; /* version 1 */
     87c:	00 00       	nop	
     87e:	02 26       	stmac	mach,er6
     880:	00 00       	nop	
     882:	03 85       	.word	H'3,H'85
     884:	0d 73       	mov.w	r7,r3
     886:	32 00       	mov.b	r2h,@0x0:8
/home/elf.c:54
  if ((header->arch != 46) && (header->arch != 47)) return -1;
     888:	01 3f       	.word	H'1,H'3f
     88a:	00 00       	nop	
     88c:	02 26       	stmac	mach,er6
     88e:	00 00       	nop	
     890:	03 b9       	ldmac	er1,macl
     892:	0d 6c       	mov.w	r6,e4
     894:	65 6e       	xor.w	r6,e6
elf_load_program():
/home/elf.c:69
       header->program_header_size * i);
     896:	00 01       	.word	H'0,H'1
     898:	3f 00       	mov.b	r7l,@0x0:8
     89a:	00 00       	nop	
     89c:	96 00       	addx	#0x0,r6h
     89e:	00 03       	.word	H'0,H'3
/home/elf.c:68
      ((char *)header + header->program_header_offset +
     8a0:	d7 00       	xor.b	#0x0,r7h
     8a2:	0c 04       	mov.b	r0h,r4h
     8a4:	00 00       	nop	
     8a6:	00 b4       	.word	H'0,H'b4
/home/elf.c:67
    phdr = (struct elf_program_header *)
     8a8:	03 00       	ldc	r0h,ccr
/home/elf.c:71
    if (phdr->type != 1) /* ロード可能なセグメントか？ */
     8aa:	00 00       	nop	
     8ac:	f0 01       	mov.b	#0x1,r0h
     8ae:	34 00       	mov.b	r4h,@0x0:8
     8b0:	00 00       	nop	
/home/elf.c:74
    memcpy((char *)phdr->physical_addr, (char *)header + phdr->offset,
     8b2:	96 00       	addx	#0x0,r6h
     8b4:	00 04       	.word	H'0,H'4
     8b6:	46 00       	bne	.0 (0x8b8)
     8b8:	00 00       	nop	
     8ba:	38 01       	mov.b	r0l,@0x1:8
     8bc:	9c 00       	addx	#0x0,r4l
     8be:	00 02       	.word	H'0,H'2
     8c0:	62 0d       	bclr	r0h,r5l
     8c2:	73 31       	btst	#0x3,r1h
     8c4:	00 01       	.word	H'0,H'1
     8c6:	34 00       	mov.b	r4h,@0x0:8
     8c8:	00 02       	.word	H'0,H'2
     8ca:	26 00       	mov.b	@0x0:8,r6h
     8cc:	00 03       	.word	H'0,H'3
     8ce:	f5 0d       	mov.b	#0xd,r5h
/home/elf.c:77
	   phdr->memory_size - phdr->file_size);
     8d0:	73 32       	btst	#0x3,r2h
     8d2:	00 01       	.word	H'0,H'1
     8d4:	34 00       	mov.b	r4h,@0x0:8
/home/elf.c:76
    memset((char *)phdr->physical_addr + phdr->file_size, 0,
     8d6:	00 02       	.word	H'0,H'2
     8d8:	26 00       	mov.b	@0x0:8,r6h
     8da:	00 04       	.word	H'0,H'4
     8dc:	1e 00       	subx	r0h,r0h
     8de:	03 00       	ldc	r0h,ccr
     8e0:	00 01       	.word	H'0,H'1
     8e2:	ac 01       	cmp.b	#0x1,r4l
     8e4:	2a 00       	mov.b	@0x0:8,r2l
     8e6:	00 00       	nop	
     8e8:	b9 00       	subx	#0x0,r1l
     8ea:	00 04       	.word	H'0,H'4
     8ec:	2a 00       	mov.b	@0x0:8,r2l
     8ee:	00 00       	nop	
     8f0:	1c 01       	cmp.b	r0h,r1h
/home/elf.c:65
  for (i = 0; i < header->program_header_num; i++) {
     8f2:	9c 00       	addx	#0x0,r4l
     8f4:	00 02       	.word	H'0,H'2
     8f6:	a5 0d       	cmp.b	#0xd,r5h
     8f8:	64 73       	or.w	r7,r3
     8fa:	74 00       	bor	#0x0,r0h
elf_load():
/home/elf.c:93
  return (char *)header->entry_point;
     8fc:	01 2a       	.word	H'1,H'2a
     8fe:	00 00       	nop	
     900:	00 b9       	.word	H'0,H'b9
     902:	00 00       	nop	
/home/elf.c:88
    return NULL;
     904:	04 3c       	orc	#0x3c,ccr
/home/elf.c:94
}
     906:	0d 73       	mov.w	r7,r3
     908:	72 63       	bclr	#0x6,r3h
     90a:	00 01       	.word	H'0,H'1
     90c:	2a 00       	mov.b	@0x0:8,r2l
     90e:	00 02       	.word	H'0,H'2
     910:	26 00       	mov.b	@0x0:8,r6h
     912:	00 04       	.word	H'0,H'4
     914:	5a 05 64 00 	jmp	@0x56400:24
check_val():
/home/dram.c:77
{
     918:	01 2c       	.word	H'1,H'2c
     91a:	00 00       	nop	
     91c:	00 b9       	.word	H'0,H'b9
/home/dram.c:80
  p->u.val8[0] = wval->u.val8[0]; p->u.val8[1] = wval->u.val8[1];
     91e:	01 50       	.word	H'1,H'50
     920:	00 03       	.word	H'0,H'3
     922:	00 00       	nop	
     924:	01 e6       	.word	H'1,H'e6
     926:	01 22       	.word	H'1,H'22
     928:	00 00       	nop	
/home/dram.c:81
  p->u.val8[2] = wval->u.val8[2]; p->u.val8[3] = wval->u.val8[3];
     92a:	00 96       	.word	H'0,H'96
     92c:	00 00       	nop	
     92e:	04 10       	orc	#0x10,ccr
     930:	00 00       	nop	
     932:	00 1a       	.word	H'0,H'1a
     934:	01 9c       	.word	H'1,H'9c
     936:	00 00       	nop	
     938:	02 db       	.word	H'2,H'db
/home/dram.c:82
  rval.u.val8[0] = p->u.val8[0]; rval.u.val8[1] = p->u.val8[1];
     93a:	0d 73       	mov.w	r7,r3
     93c:	00 01       	.word	H'0,H'1
     93e:	22 00       	mov.b	@0x0:8,r2h
     940:	00 02       	.word	H'0,H'2
     942:	26 00       	mov.b	@0x0:8,r6h
     944:	00 04       	.word	H'0,H'4
     946:	78 06       	.word	H'78,H'6
/home/dram.c:83
  rval.u.val8[2] = p->u.val8[2]; rval.u.val8[3] = p->u.val8[3];
     948:	6c 65       	mov.b	@er6+,r5h
     94a:	6e 00 01 24 	mov.b	@(0x124:16,er0),r0h
     94e:	00 00       	nop	
     950:	00 96       	.word	H'0,H'96
     952:	00 00       	nop	
     954:	04 96       	orc	#0x96,ccr
     956:	00 03       	.word	H'0,H'3
/home/dram.c:85
  if (rval.u.val32[0] != wval->u.val32[0])
     958:	00 00       	nop	
     95a:	01 c4       	.word	H'1,H'c4
     95c:	01 16       	.word	H'1,H'16
     95e:	00 00       	nop	
     960:	00 96       	.word	H'0,H'96
     962:	00 00       	nop	
     964:	03 d4       	.word	H'3,H'd4
/home/dram.c:86
    return -1;
     966:	00 00       	nop	
     968:	00 3c       	.word	H'0,H'3c
     96a:	01 9c       	.word	H'1,H'9c
/home/dram.c:88
  p->u.val16[0] = wval->u.val16[0]; p->u.val16[1] = wval->u.val16[1];
     96c:	00 00       	nop	
     96e:	03 3a       	ldmac	er2,macl
     970:	0d 62       	mov.w	r6,r2
     972:	31 00       	mov.b	r1h,@0x0:8
     974:	01 16       	.word	H'1,H'16
     976:	00 00       	nop	
/home/dram.c:89
  rval.u.val16[0] = p->u.val16[0]; rval.u.val16[1] = p->u.val16[1];
     978:	03 3a       	ldmac	er2,macl
     97a:	00 00       	nop	
     97c:	04 b5       	orc	#0xb5,ccr
     97e:	0d 62       	mov.w	r6,r2
     980:	32 00       	mov.b	r2h,@0x0:8
     982:	01 16       	.word	H'1,H'16
     984:	00 00       	nop	
/home/dram.c:91
  if (rval.u.val32[0] != wval->u.val32[0])
     986:	03 3a       	ldmac	er2,macl
     988:	00 00       	nop	
     98a:	04 d6       	orc	#0xd6,ccr
     98c:	0d 6c       	mov.w	r6,e4
     98e:	65 6e       	xor.w	r6,e6
     990:	00 01       	.word	H'0,H'1
     992:	16 00       	and.b	r0h,r0h
/home/dram.c:94
  p->u.val32[0] = wval->u.val32[0];
     994:	00 03       	.word	H'0,H'3
     996:	41 00       	brn	.0 (0x998)
     998:	00 04       	.word	H'0,H'4
     99a:	f7 06       	mov.b	#0x6,r7h
/home/dram.c:95
  rval.u.val32[0] = p->u.val32[0];
     99c:	70 31       	bset	#0x3,r1h
     99e:	00 01       	.word	H'0,H'1
     9a0:	18 00       	sub.b	r0h,r0h
     9a2:	00 02       	.word	H'0,H'2
     9a4:	26 00       	mov.b	@0x0:8,r6h
/home/dram.c:97
  if (rval.u.val32[0] != wval->u.val32[0])
     9a6:	00 05       	.word	H'0,H'5
     9a8:	83 05       	add.b	#0x5,r3h
     9aa:	70 32       	bset	#0x3,r2h
     9ac:	00 01       	.word	H'0,H'1
     9ae:	18 00       	sub.b	r0h,r0h
     9b0:	00 02       	.word	H'0,H'2
     9b2:	26 01       	mov.b	@0x1:8,r6h
     9b4:	51 00       	divxu.b	r0h,r0
     9b6:	0c 04       	mov.b	r0h,r4h
     9b8:	00 00       	nop	
     9ba:	03 40       	.word	H'3,H'40
/home/dram.c:101
}
     9bc:	11 02       	shlr.b	r2h
     9be:	04 05       	orc	#0x5,ccr
     9c0:	00 00       	nop	
     9c2:	01 0b       	.word	H'1,H'b
dram_check2_val0():
/home/dram.c:139
static uint32 dram_check2_val0(uint32 *addr) {  return  0x55555555UL; }
     9c4:	03 00       	ldc	r0h,ccr
     9c6:	00 04       	.word	H'0,H'4
     9c8:	84 01       	add.b	#0x1,r4h
     9ca:	0d 00       	mov.w	r0,r0
     9cc:	00 03       	.word	H'0,H'3
     9ce:	a5 00       	cmp.b	#0x0,r5h
     9d0:	00 03       	.word	H'0,H'3
     9d2:	9e 00       	addx	#0x0,r6l
     9d4:	00 00       	nop	
dram_check2_val1():
/home/dram.c:140
static uint32 dram_check2_val1(uint32 *addr) {  return  0xaaaaaaaaUL; }
     9d6:	36 01       	mov.b	r6h,@0x1:8
     9d8:	9c 00       	addx	#0x0,r4l
     9da:	00 03       	.word	H'0,H'3
     9dc:	a5 12       	cmp.b	#0x12,r5h
     9de:	64 73       	or.w	r7,r3
     9e0:	74 00       	bor	#0x0,r0h
     9e2:	01 0d 00 00 	mov.l	#0x0,@er0
     9e6:	03 a5       	ldmac	er5,mach
dram_check2_val2():
/home/dram.c:141
static uint32 dram_check2_val2(uint32 *addr) {  return  0x00000000UL; }
     9e8:	01 50       	.word	H'1,H'50
     9ea:	12 73       	rotxl.l	#2,er3
     9ec:	72 63       	bclr	#0x6,r3h
     9ee:	00 01       	.word	H'0,H'1
     9f0:	0d 00       	mov.w	r0,r0
     9f2:	00 03       	.word	H'0,H'3
     9f4:	3a 01       	mov.b	r2l,@0x1:8
dram_check2_val3():
/home/dram.c:142
static uint32 dram_check2_val3(uint32 *addr) {  return  0xffffffffUL; }
     9f6:	51 0d       	divxu.b	r0h,e5
     9f8:	6c 65       	mov.b	@er6+,r5h
     9fa:	6e 00 01 0d 	mov.b	@(0x10d:16,er0),r0h
     9fe:	00 00       	nop	
     a00:	03 41       	.word	H'3,H'41
     a02:	00 00       	nop	
     a04:	05 ac       	xorc	#0xac,ccr
dram_check2_val4():
/home/dram.c:143
static uint32 dram_check2_val4(uint32 *addr) {  return  (uint32)addr; }
     a06:	06 64       	andc	#0x64,ccr
     a08:	00 01       	.word	H'0,H'1
     a0a:	0f 00       	daa	r0h
     a0c:	00 00       	nop	
     a0e:	b9 00       	subx	#0x0,r1l
     a10:	00 06       	.word	H'0,H'6
dram_check2_val5():
/home/dram.c:144
static uint32 dram_check2_val5(uint32 *addr) {  return ~(uint32)addr; }
     a12:	16 06       	and.b	r0h,r6h
     a14:	73 00       	btst	#0x0,r0h
     a16:	01 10       	.word	H'1,H'10
     a18:	00 00       	nop	
     a1a:	02 26       	stmac	mach,er6
     a1c:	00 00       	nop	
     a1e:	06 4b       	andc	#0x4b,ccr
dram_init():
/home/dram.c:29
{
     a20:	00 13       	.word	H'0,H'13
     a22:	04 03       	orc	#0x3,ccr
     a24:	00 00       	nop	
/home/dram.c:37
  *H8_3069F_ABWCR  = 0xff;
     a26:	02 00       	stc	ccr,r0h
     a28:	01 05       	.word	H'1,H'5
     a2a:	00 00       	nop	
     a2c:	03 a5       	ldmac	er5,mach
/home/dram.c:41
  *H8_3069F_RTCOR  = 0x03; /* リフレッシュ周期を短めに設定 */
     a2e:	00 00       	nop	
     a30:	03 78       	ldc	er0,sbr
     a32:	00 00       	nop	
     a34:	00 26       	.word	H'0,H'26
/home/dram.c:44
  *H8_3069F_RTMCSR = 0x37;
     a36:	01 9c       	.word	H'1,H'9c
     a38:	00 00       	nop	
     a3a:	03 f3       	.word	H'3,H'f3
     a3c:	12 62       	.word	H'12,H'62
/home/dram.c:49
  *H8_3069F_DRCRB  = 0x98;
     a3e:	00 01       	.word	H'0,H'1
     a40:	05 00       	xorc	#0x0,ccr
     a42:	00 03       	.word	H'0,H'3
     a44:	a5 01       	cmp.b	#0x1,r5h
/home/dram.c:53
  *H8_3069F_DRCRA  = 0x30;
     a46:	50 12       	mulxu.b	r1h,r2
     a48:	63 00       	btst	r0h,r0h
     a4a:	01 05       	.word	H'1,H'5
     a4c:	00 00       	nop	
/home/dram.c:55
  *H8_3069F_P1DDR  = 0xff;
     a4e:	00 96       	.word	H'0,H'96
     a50:	01 51       	.word	H'1,H'51
     a52:	0d 6c       	mov.w	r6,e4
/home/dram.c:56
  *H8_3069F_P2DDR  = 0x07;
     a54:	65 6e       	xor.w	r6,e6
     a56:	00 01       	.word	H'0,H'1
     a58:	05 00       	xorc	#0x0,ccr
     a5a:	00 03       	.word	H'0,H'3
/home/dram.c:57
  *H8_3069F_P8DDR  = 0xe4;
     a5c:	41 00       	brn	.0 (0xa5e)
     a5e:	00 06       	.word	H'0,H'6
     a60:	80 06       	add.b	#0x6,r0h
     a62:	70 00       	bset	#0x0,r0h
/home/dram.c:62
  *H8_3069F_WCRL = 0xcf;
     a64:	01 07       	.word	H'1,H'7
     a66:	00 00       	nop	
     a68:	00 b9       	.word	H'0,H'b9
     a6a:	00 00       	nop	
/home/dram.c:68
  *H8_3069F_ASTCR = 0xfb; /* 2ステートアクセス */
     a6c:	06 de       	andc	#0xde,ccr
     a6e:	00 14       	.word	H'0,H'14
     a70:	00 00       	nop	
     a72:	01 d0       	.word	H'1,H'd0
/home/dram.c:74
}
     a74:	00 00       	nop	
     a76:	01 d0       	.word	H'1,H'd0
     a78:	02 08       	stc	ccr,r0l
     a7a:	14 00       	or.b	r0h,r0h
dram_check():
/home/dram.c:104
{
     a7c:	00 01       	.word	H'0,H'1
     a7e:	b3 00       	subx	#0x0,r3h
     a80:	00 01       	.word	H'0,H'1
     a82:	b3 02       	subx	#0x2,r3h
     a84:	06 00       	andc	#0x0,ccr

00000a86 <.Ldebug_info0>:
.Ldebug_info0():
     a86:	00 00       	nop	
dram_check():
/home/dram.c:109
  puts("DRAM checking...\n");
     a88:	02 8a       	.word	H'2,H'8a
     a8a:	00 04       	.word	H'0,H'4
     a8c:	00 00       	nop	
     a8e:	03 fd       	.word	H'3,H'fd
     a90:	04 01       	orc	#0x1,ccr
/home/dram.c:111
  for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
     a92:	00 00       	nop	
     a94:	00 00       	nop	
     a96:	0c 00       	mov.b	r0h,r0h
/home/dram.c:112
    putxval((unsigned long)p, 8);
     a98:	00 02       	.word	H'0,H'2
     a9a:	27 00       	mov.b	@0x0:8,r7h
     a9c:	00 00       	nop	
     a9e:	4b 00       	bmi	.0 (0xaa0)
     aa0:	00 05       	.word	H'0,H'5
/home/dram.c:115
    val.u.val32[0] = (uint32)p;
     aa2:	fe 00       	mov.b	#0x0,r6l
     aa4:	00 00       	nop	
     aa6:	e2 00       	and.b	#0x0,r2h
/home/dram.c:116
    if (check_val((val_t *)p, &val) < 0)
     aa8:	00 06       	.word	H'0,H'6
     aaa:	36 02       	mov.b	r6h,@0x2:8
     aac:	00 00       	nop	
     aae:	02 0f       	stc	ccr,r7l
     ab0:	02 07       	stc	ccr,r7h
     ab2:	00 00       	nop	
     ab4:	00 35       	.word	H'0,H'35
     ab6:	03 00       	ldc	r0h,ccr
/home/dram.c:119
    val.u.val32[0] = 0;
     ab8:	00 00       	nop	
     aba:	25 04       	mov.b	@0x4:8,r5h
     abc:	01 08 00 00 	mov.l	@er0,@er0
/home/dram.c:120
    if (check_val((val_t *)p, &val) < 0)
     ac0:	00 51       	.word	H'0,H'51
     ac2:	04 02       	orc	#0x2,ccr
     ac4:	07 00       	ldc	#0x0,ccr
     ac6:	00 00       	nop	
     ac8:	38 04       	mov.b	r0l,@0x4:8
     aca:	04 07       	orc	#0x7,ccr
     acc:	00 00       	nop	
     ace:	00 26       	.word	H'0,H'26
/home/dram.c:123
    val.u.val32[0] = 0xffffffffUL;
     ad0:	05 00       	xorc	#0x0,ccr
     ad2:	00 02       	.word	H'0,H'2
     ad4:	15 07       	xor.b	r0h,r7h
     ad6:	01 0a       	.word	H'1,H'a
     ad8:	00 00       	nop	
/home/dram.c:124
    if (check_val((val_t *)p, &val) < 0)
     ada:	00 ab       	.word	H'0,H'ab
     adc:	06 73       	andc	#0x73,ccr
     ade:	6d 72       	mov.w	@er7+,r2
     ae0:	00 01       	.word	H'0,H'1
     ae2:	0b 00       	adds	#1,er0
     ae4:	00 00       	nop	
     ae6:	30 00       	mov.b	r0h,@0x0:8
     ae8:	06 62       	andc	#0x62,ccr
/home/dram.c:127 (discriminator 2)
    puts("\x08\x08\x08\x08\x08\x08\x08\x08");
     aea:	72 72       	bclr	#0x7,r2h
     aec:	00 01       	.word	H'0,H'1
     aee:	0c 00       	mov.b	r0h,r0h
     af0:	00 00       	nop	
     af2:	30 01       	mov.b	r0h,@0x1:8
/home/dram.c:111
  for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
     af4:	06 73       	andc	#0x73,ccr
     af6:	63 72       	btst	r7h,r2h
     af8:	00 01       	.word	H'0,H'1
     afa:	0d 00       	mov.w	r0,r0
     afc:	00 00       	nop	
/home/dram.c:129
  puts("\nall check OK.\n");
     afe:	30 02       	mov.b	r0h,@0x2:8
     b00:	06 74       	andc	#0x74,ccr
     b02:	64 72       	or.w	r7,r2
     b04:	00 01       	.word	H'0,H'1
     b06:	0e 00       	addx	r0h,r0h
/home/dram.c:130
  return 0;
     b08:	00 00       	nop	
     b0a:	30 03       	mov.b	r0h,@0x3:8
/home/dram.c:133
  puts("\nERROR: ");
     b0c:	06 73       	andc	#0x73,ccr
     b0e:	73 72       	btst	#0x7,r2h
     b10:	00 01       	.word	H'0,H'1
     b12:	0f 00       	daa	r0h
     b14:	00 00       	nop	
/home/dram.c:134
  putxval((unsigned long)*p, 8);
     b16:	30 04       	mov.b	r0h,@0x4:8
     b18:	06 72       	andc	#0x72,ccr
     b1a:	64 72       	or.w	r7,r2
     b1c:	00 01       	.word	H'0,H'1
     b1e:	10 00       	shll.b	r0h
     b20:	00 00       	nop	
/home/dram.c:135
  puts("\n");
     b22:	30 05       	mov.b	r0h,@0x5:8
     b24:	07 00       	ldc	#0x0,ccr
     b26:	00 02       	.word	H'0,H'2
     b28:	22 01       	mov.b	@0x1:8,r2h
     b2a:	11 00       	shlr.b	r0h
/home/dram.c:136
  return -1;
     b2c:	00 00       	nop	
     b2e:	30 06       	mov.b	r0h,@0x6:8
/home/dram.c:137
}
     b30:	00 03       	.word	H'0,H'3
     b32:	00 00       	nop	
     b34:	00 4a       	.word	H'0,H'4a
     b36:	08 04       	add.b	r0h,r4h
     b38:	01 31       	.word	H'1,H'31
     b3a:	00 00       	nop	
dram_check2():
/home/dram.c:147
{
     b3c:	00 c5       	.word	H'0,H'c5
     b3e:	06 73       	andc	#0x73,ccr
     b40:	63 69       	btst	r6h,r1l
     b42:	00 01       	.word	H'0,H'1
     b44:	32 00       	mov.b	r2h,@0x0:8
     b46:	00 00       	nop	
     b48:	c5 00       	or.b	#0x0,r5h
     b4a:	00 09       	.word	H'0,H'9
     b4c:	04 00       	orc	#0x0,ccr
     b4e:	00 00       	nop	
/home/dram.c:150
  uint32 (*getval[])(uint32 *) = {
     b50:	ab 0a       	cmp.b	#0xa,r3l
     b52:	00 00       	nop	
     b54:	00 b0       	.word	H'0,H'b0
     b56:	00 00       	nop	
     b58:	00 db       	.word	H'0,H'db
     b5a:	0b 00       	adds	#1,er0
     b5c:	00 00       	nop	
     b5e:	43 02       	bls	.+2 (0xb62)
     b60:	00 0c       	.word	H'0,H'c
     b62:	00 00       	nop	
     b64:	02 5c       	.word	H'2,H'5c
     b66:	01 33       	.word	H'1,H'33
     b68:	00 00       	nop	
     b6a:	00 cb       	.word	H'0,H'cb
     b6c:	05 03       	xorc	#0x3,ccr
     b6e:	00 00       	nop	
     b70:	0e f4       	addx	r7l,r4h
     b72:	0d 00       	mov.w	r0,r0
/home/dram.c:160
  for (i = 0; getval[i]; i++) {
     b74:	00 01       	.word	H'0,H'1
/home/dram.c:149
  int ret = 0, i;
     b76:	d0 01       	xor.b	#0x1,r0h
     b78:	64 00       	or.w	r0,r0
     b7a:	00 00       	nop	
/home/dram.c:160
  for (i = 0; getval[i]; i++) {
     b7c:	35 00       	mov.b	r5h,@0x0:8
     b7e:	00 06       	.word	H'0,H'6
/home/dram.c:162
    puts("DRAM check pattern: ");
     b80:	ae 00       	cmp.b	#0x0,r6l
     b82:	00 00       	nop	
     b84:	32 01       	mov.b	r2h,@0x1:8
     b86:	9c 00       	addx	#0x0,r4l
     b88:	00 01       	.word	H'0,H'1
/home/dram.c:163
    putxval(i, 0);
     b8a:	55 0e       	bsr	.+14 (0xb9a)
     b8c:	00 00       	nop	
     b8e:	02 d3       	.word	H'2,H'd3
     b90:	01 64       	.word	H'1,H'64
/home/dram.c:165
    puts("\nDRAM setting...\n");
     b92:	00 00       	nop	
     b94:	01 55       	.word	H'1,H'55
     b96:	00 00       	nop	
     b98:	07 09       	ldc	#0x9,ccr
     b9a:	0f 73       	mov.w	#0x7,r3
/home/dram.c:167
    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
     b9c:	63 69       	btst	r6h,r1l
     b9e:	00 01       	.word	H'0,H'1
     ba0:	66 00       	and.w	r0,r0
/home/dram.c:168
      *p = getval[i](p);
     ba2:	00 00       	nop	
     ba4:	c5 01       	or.b	#0x1,r5h
     ba6:	52 0f       	.word	H'52,H'f
     ba8:	63 00       	btst	r0h,r0h
     baa:	01 67       	.word	H'1,H'67
     bac:	00 00       	nop	
     bae:	00 35       	.word	H'0,H'35
/home/dram.c:169
      if (!((uint32)p & 0xfff)) {
     bb0:	01 50       	.word	H'1,H'50
     bb2:	10 00       	shll.b	r0h
     bb4:	00 01       	.word	H'0,H'1
     bb6:	5c 00 00 06 	bsr	.+6 (0xbc0)
/home/dram.c:170
	putxval((unsigned long)p, 8);
     bba:	c4 00       	or.b	#0x0,r4h
     bbc:	00 00       	nop	
     bbe:	04 01       	orc	#0x1,ccr
     bc0:	6a 11       	.word	H'6a,H'11
/home/dram.c:171
	puts("\x08\x08\x08\x08\x08\x08\x08\x08");
     bc2:	00 00       	nop	
     bc4:	01 6c       	.word	H'1,H'6c
     bc6:	00 00       	nop	
     bc8:	07 2a       	ldc	#0x2a,ccr
     bca:	12 00       	rotxl.b	r0h
/home/dram.c:167 (discriminator 2)
    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
     bcc:	00 06       	.word	H'0,H'6
     bce:	c4 00       	or.b	#0x0,r4h
     bd0:	00 00       	nop	
     bd2:	04 13       	orc	#0x13,ccr
     bd4:	00 00       	nop	
/home/dram.c:175
    puts("\nDRAM checking...\n");
     bd6:	02 85       	.word	H'2,H'85
     bd8:	00 00       	nop	
     bda:	00 14       	.word	H'0,H'14
     bdc:	02 05       	stc	ccr,r5h
     bde:	69 6e       	mov.w	@er6,e6
/home/dram.c:177
    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
     be0:	74 00       	bor	#0x0,r0h
     be2:	15 00       	xor.b	r0h,r0h
     be4:	00 02       	.word	H'0,H'2
/home/dram.c:178
      if (*p != getval[i](p)) {
     be6:	30 01       	mov.b	r0h,@0x1:8
     be8:	5d 00       	jsr	@er0
     bea:	00 01       	.word	H'0,H'1
     bec:	55 01       	bsr	.+1 (0xbef)
     bee:	00 00       	nop	
     bf0:	01 83       	.word	H'1,H'83
     bf2:	16 00       	and.b	r0h,r0h
     bf4:	00 02       	.word	H'0,H'2
     bf6:	d3 01       	xor.b	#0x1,r3h
     bf8:	5d 00       	jsr	@er0
     bfa:	00 01       	.word	H'0,H'1
     bfc:	55 17       	bsr	.+23 (0xc15)
     bfe:	73 63       	btst	#0x6,r3h
     c00:	69 00       	mov.w	@er0,r0
     c02:	01 5f       	.word	H'1,H'5f
/home/dram.c:179
	puts("\nERROR! :");
     c04:	00 00       	nop	
     c06:	00 c5       	.word	H'0,H'c5
     c08:	00 0d       	.word	H'0,H'd
     c0a:	00 00       	nop	
     c0c:	01 b3       	.word	H'1,H'b3
/home/dram.c:180
	putxval((unsigned long)p, 8);
     c0e:	01 4f       	.word	H'1,H'4f
     c10:	00 00       	nop	
     c12:	01 55       	.word	H'1,H'55
     c14:	00 00       	nop	
     c16:	06 58       	andc	#0x58,ccr
/home/dram.c:181
	puts(" ");
     c18:	00 00       	nop	
     c1a:	00 32       	.word	H'0,H'32
     c1c:	01 9c       	.word	H'1,H'9c
     c1e:	00 00       	nop	
     c20:	01 ec       	.word	H'1,H'ec
/home/dram.c:182
	putxval((unsigned long)*p, 8);
     c22:	0e 00       	addx	r0h,r0h
     c24:	00 02       	.word	H'0,H'2
     c26:	d3 01       	xor.b	#0x1,r3h
     c28:	4f 00       	ble	.0 (0xc2a)
     c2a:	00 01       	.word	H'0,H'1
     c2c:	55 00       	bsr	.0 (0xc2e)
/home/dram.c:183
	puts("\n");
     c2e:	00 07       	.word	H'0,H'7
     c30:	40 18       	bra	.+24 (0xc4a)
     c32:	63 00       	btst	r0h,r0h
     c34:	01 4f       	.word	H'1,H'4f
     c36:	00 00       	nop	
/home/dram.c:184
	ret = -1;
     c38:	00 35       	.word	H'0,H'35
     c3a:	01 51       	.word	H'1,H'51
     c3c:	0f 73       	mov.w	#0x7,r3
     c3e:	63 69       	btst	r6h,r1l
/home/dram.c:186
      if (!((uint32)p & 0xfff)) {
     c40:	00 01       	.word	H'0,H'1
     c42:	51 00       	divxu.b	r0h,r0
     c44:	00 00       	nop	
     c46:	c5 01       	or.b	#0x1,r5h
/home/dram.c:187
	putxval((unsigned long)p, 8);
     c48:	52 10       	mulxu.w	r1,er0
     c4a:	00 00       	nop	
     c4c:	01 ec       	.word	H'1,H'ec
     c4e:	00 00       	nop	
     c50:	06 6e       	andc	#0x6e,ccr
/home/dram.c:188
	puts("\x08\x08\x08\x08\x08\x08\x08\x08");
     c52:	00 00       	nop	
     c54:	00 04       	.word	H'0,H'4
     c56:	01 54       	.word	H'1,H'54
     c58:	11 00       	shlr.b	r0h
     c5a:	00 01       	.word	H'0,H'1
/home/dram.c:177 (discriminator 2)
    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
     c5c:	fc 00       	mov.b	#0x0,r4l
     c5e:	00 07       	.word	H'0,H'7
     c60:	61 12       	bnot	r1h,r2h
     c62:	00 00       	nop	
     c64:	06 6e       	andc	#0x6e,ccr
     c66:	00 00       	nop	
/home/dram.c:192
    puts("\n");
     c68:	00 04       	.word	H'0,H'4
     c6a:	13 00       	rotxr.b	r0h
     c6c:	00 02       	.word	H'0,H'2
     c6e:	65 00       	xor.w	r0,r0
     c70:	00 00       	nop	
     c72:	15 00       	xor.b	r0h,r0h
     c74:	00 02       	.word	H'0,H'2
     c76:	46 01       	.word	H'46,H'1
     c78:	48 00       	bvc	.0 (0xc7a)
     c7a:	00 01       	.word	H'0,H'1
     c7c:	55 01       	bsr	.+1 (0xc7f)
     c7e:	00 00       	nop	
     c80:	02 13       	stc	exr,r3h
/home/dram.c:160 (discriminator 1)
  for (i = 0; getval[i]; i++) {
     c82:	16 00       	and.b	r0h,r0h
     c84:	00 02       	.word	H'0,H'2
     c86:	d3 01       	xor.b	#0x1,r3h
     c88:	48 00       	bvc	.0 (0xc8a)
     c8a:	00 01       	.word	H'0,H'1
     c8c:	55 17       	bsr	.+23 (0xca5)
     c8e:	73 63       	btst	#0x6,r3h
     c90:	69 00       	mov.w	@er0,r0
     c92:	01 4a       	.word	H'1,H'4a
     c94:	00 00       	nop	
/home/dram.c:196
  if (ret == 0) {
     c96:	00 c5       	.word	H'0,H'c5
     c98:	00 0d       	.word	H'0,H'd
     c9a:	00 00       	nop	
/home/dram.c:197
    puts("\nall check OK.\n");
     c9c:	00 70       	.word	H'0,H'70
     c9e:	01 3a       	.word	H'1,H'3a
     ca0:	00 00       	nop	
     ca2:	01 55       	.word	H'1,H'55
     ca4:	00 00       	nop	
/home/dram.c:201
}
     ca6:	05 fe       	xorc	#0xfe,ccr
     ca8:	00 00       	nop	
     caa:	00 36       	.word	H'0,H'36
     cac:	01 9c       	.word	H'1,H'9c
     cae:	00 00       	nop	
     cb0:	02 49       	.word	H'2,H'49
     cb2:	0e 00       	addx	r0h,r0h
     cb4:	00 02       	.word	H'0,H'2
     cb6:	d3 01       	xor.b	#0x1,r3h
     cb8:	3a 00       	mov.b	r2l,@0x0:8
     cba:	00 01       	.word	H'0,H'1
     cbc:	55 00       	bsr	.0 (0xcbe)
dram_clear():
/home/dram.c:204
{
     cbe:	00 07       	.word	H'0,H'7
     cc0:	77 0f       	bld	#0x0,r7l
     cc2:	73 63       	btst	#0x6,r3h
/home/dram.c:207
  puts("DRAM clearing...\n");
     cc4:	69 00       	mov.w	@er0,r0
     cc6:	01 3c       	.word	H'1,H'3c
     cc8:	00 00       	nop	
     cca:	00 c5       	.word	H'0,H'c5
     ccc:	01 52       	.word	H'1,H'52
/home/dram.c:209
  for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++)
     cce:	00 19       	.word	H'0,H'19
     cd0:	00 00       	nop	
     cd2:	01 ec       	.word	H'1,H'ec
/home/dram.c:210
    *p = 0;
     cd4:	00 00       	nop	
/home/dram.c:210 (discriminator 3)
     cd6:	06 34       	andc	#0x34,ccr
     cd8:	00 00       	nop	
/home/dram.c:209
  for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++)
     cda:	00 24       	.word	H'0,H'24
     cdc:	01 9c       	.word	H'1,H'9c
     cde:	00 00       	nop	
     ce0:	02 6d       	stc	vbr,er5
     ce2:	11 00       	shlr.b	r0h
/home/dram.c:212
  puts("DRAM cleared.\n");
     ce4:	00 01       	.word	H'0,H'1
     ce6:	fc 00       	mov.b	#0x0,r4l
     ce8:	00 07       	.word	H'0,H'7
     cea:	98 1a       	addx	#0x1a,r0l
     cec:	00 00       	nop	
/home/dram.c:215
}
     cee:	02 07       	stc	ccr,r7h
     cf0:	01 52       	.word	H'1,H'52
     cf2:	00 1b       	.word	H'0,H'1b
     cf4:	00 00       	nop	
main():
/home/main.c:66
{
     cf6:	01 5c       	.word	H'1,H'5c
     cf8:	00 00       	nop	
     cfa:	06 8a       	andc	#0x8a,ccr
     cfc:	00 00       	nop	
     cfe:	00 24       	.word	H'0,H'24
     d00:	01 9c       	.word	H'1,H'9c
/home/main.c:74
  INTR_DISABLE; /* 割込み無効にする */
     d02:	11 00       	shlr.b	r0h
init():
/home/main.c:24
  softvec_init();
     d04:	00 01       	.word	H'0,H'1
     d06:	6c 00       	mov.b	@er0+,r0h
/home/main.c:27
  serial_init(SERIAL_DEFAULT_DEVICE);
     d08:	00 07       	.word	H'0,H'7
     d0a:	b9 1a       	subx	#0x1a,r1l
     d0c:	00 00       	nop	
     d0e:	01 77       	.word	H'1,H'77
/home/main.c:30
  dram_init();
     d10:	01 52       	.word	H'1,H'52
	...

00000d14 <.Ldebug_info0>:
.Ldebug_info0():
     d14:	00 00       	nop	
main():
/home/main.c:78
  puts("kzload (kozos boot loader) started.\n");
     d16:	02 6a       	stc	vbr,er2
     d18:	00 04       	.word	H'0,H'4
     d1a:	00 00       	nop	
     d1c:	05 6a       	xorc	#0x6a,ccr
/home/main.c:81
    puts("kzload> "); /* プロンプト表示 */
     d1e:	04 01       	orc	#0x1,ccr
     d20:	00 00       	nop	
     d22:	00 00       	nop	
     d24:	0c 00       	mov.b	r0h,r0h
     d26:	00 02       	.word	H'0,H'2
/home/main.c:82
    gets(buf); /* シリアルからのコマンド受信 */
     d28:	94 00       	addx	#0x0,r4h
     d2a:	00 00       	nop	
     d2c:	4b 00       	bmi	.0 (0xd2e)
     d2e:	00 06       	.word	H'0,H'6
     d30:	e0 00       	and.b	#0x0,r0h
/home/main.c:84
    if (!strcmp(buf, "load")) { /* XMODEMでのファイルのダウンロード */
     d32:	00 01       	.word	H'0,H'1
     d34:	4e 00       	bgt	.0 (0xd36)
     d36:	00 07       	.word	H'0,H'7
     d38:	77 02       	bld	#0x0,r2h
     d3a:	01 08 00 00 	mov.l	@er0,@er0
     d3e:	00 51       	.word	H'0,H'51
     d40:	02 02       	stc	ccr,r2h
     d42:	07 00       	ldc	#0x0,ccr
     d44:	00 00       	nop	
/home/main.c:85
      loadbuf = (char *)(&buffer_start);
     d46:	38 02       	mov.b	r0l,@0x2:8
     d48:	04 07       	orc	#0x7,ccr
     d4a:	00 00       	nop	
     d4c:	00 26       	.word	H'0,H'26
     d4e:	03 00       	ldc	r0h,ccr
     d50:	00 00       	nop	
     d52:	cc 01       	or.b	#0x1,r4l
/home/main.c:86
      size = xmodem_recv(loadbuf);
     d54:	3b 00       	mov.b	r3l,@0x0:8
     d56:	00 01       	.word	H'0,H'1
     d58:	c6 00       	or.b	#0x0,r6h
     d5a:	00 06       	.word	H'0,H'6
     d5c:	e0 00       	and.b	#0x0,r0h
     d5e:	00 01       	.word	H'0,H'1
     d60:	4e 01       	.word	H'4e,H'1
wait():
/home/main.c:61
  for (i = 0; i < 15000; i++)
     d62:	9c 00       	addx	#0x0,r4l
     d64:	00 01       	.word	H'0,H'1
     d66:	c6 04       	or.b	#0x4,r6h
     d68:	62 75       	bclr	r7h,r5h
     d6a:	66 00       	and.w	r0,r0
     d6c:	01 3b       	.word	H'1,H'3b
     d6e:	00 00       	nop	
     d70:	01 cd       	.word	H'1,H'cd
     d72:	00 00       	nop	
     d74:	07 da       	ldc	#0xda,ccr
     d76:	05 72       	xorc	#0x72,ccr
     d78:	00 01       	.word	H'0,H'1
     d7a:	3d 00       	mov.b	r5l,@0x0:8
main():
/home/main.c:88
      if (size < 0) {
     d7c:	00 01       	.word	H'0,H'1
     d7e:	da 06       	xor.b	#0x6,r2l
/home/main.c:89
	puts("\nXMODEM receive error!\n");
     d80:	00 00       	nop	
     d82:	02 9d       	.word	H'2,H'9d
     d84:	01 3d       	.word	H'1,H'3d
     d86:	00 00       	nop	
/home/main.c:91
	puts("\nXMODEM receive succeeded.\n");
     d88:	01 da       	.word	H'1,H'da
     d8a:	00 00       	nop	
     d8c:	07 f8       	ldc	#0xf8,ccr
     d8e:	06 00       	andc	#0x0,ccr
/home/main.c:93
    } else if (!strcmp(buf, "dump")) { /* メモリの16進ダンプ出力 */
     d90:	00 02       	.word	H'0,H'2
     d92:	de 01       	xor.b	#0x1,r6l
     d94:	3e 00       	mov.b	r6l,@0x0:8
     d96:	00 01       	.word	H'0,H'1
     d98:	c6 00       	or.b	#0x0,r6h
     d9a:	00 08       	.word	H'0,H'8
     d9c:	3b 07       	mov.b	r3l,@0x7:8
     d9e:	63 00       	btst	r0h,r0h
     da0:	01 3f       	.word	H'1,H'3f
     da2:	00 00       	nop	
     da4:	00 25       	.word	H'0,H'25
/home/main.c:94
      puts("size: ");
     da6:	00 00       	nop	
     da8:	08 5a       	add.b	r5h,r2l
     daa:	06 00       	andc	#0x0,ccr
     dac:	00 02       	.word	H'0,H'2
     dae:	61 01       	bnot	r0h,r1h
/home/main.c:95
      putxval(size, 0);
     db0:	3f 00       	mov.b	r7l,@0x0:8
     db2:	00 00       	nop	
     db4:	25 00       	mov.b	@0x0:8,r5h
     db6:	00 08       	.word	H'0,H'8
     db8:	8e 08       	add.b	#0x8,r6l
     dba:	00 00       	nop	
     dbc:	02 30       	stmac	macl,er0
/home/main.c:96
      puts("\n");
     dbe:	00 00       	nop	
     dc0:	07 18       	ldc	#0x18,ccr
     dc2:	00 00       	nop	
     dc4:	00 10       	.word	H'0,H'10
     dc6:	01 43       	.word	H'1,H'43
/home/main.c:97
      dump(loadbuf, size);
     dc8:	00 00       	nop	
     dca:	00 ef       	.word	H'0,H'ef
     dcc:	09 00       	add.w	r0,r0
     dce:	00 00       	nop	
     dd0:	10 0a       	shll.b	r2l
     dd2:	00 00       	nop	
     dd4:	02 40       	.word	H'2,H'40
     dd6:	00 00       	nop	
     dd8:	08 d1       	add.b	r5l,r1h
     dda:	0b 00       	adds	#1,er0
     ddc:	00 07       	.word	H'0,H'7
dump():
/home/main.c:40
  if (size < 0) {
     dde:	26 00       	mov.b	@0x0:8,r6h
     de0:	00 02       	.word	H'0,H'2
/home/main.c:41
    puts("no data.\n");
     de2:	4c 00       	bge	.0 (0xde4)
     de4:	00 00       	nop	
     de6:	de 0c       	xor.b	#0xc,r6l
     de8:	01 50       	.word	H'1,H'50
     dea:	01 31       	.word	H'1,H'31
/home/main.c:45
    putxval(buf[i], 2);
     dec:	0c 01       	mov.b	r0h,r1h
     dee:	51 01       	divxu.b	r0h,r1
     df0:	45 00       	bcs	.0 (0xdf2)
     df2:	0d 00       	mov.w	r0,r0
     df4:	00 07       	.word	H'0,H'7
     df6:	3a 00       	mov.b	r2l,@0x0:8
     df8:	00 02       	.word	H'0,H'2
     dfa:	57 0c       	.word	H'57,H'c
     dfc:	01 50       	.word	H'1,H'50
     dfe:	01 31       	.word	H'1,H'31
/home/main.c:46
    if ((i & 0xf) == 15) {
     e00:	00 00       	nop	
     e02:	00 0e       	.word	H'0,H'e
     e04:	00 00       	nop	
     e06:	01 e1       	.word	H'1,H'e1
     e08:	00 00       	nop	
     e0a:	07 6a       	ldc	#0x6a,ccr
     e0c:	00 00       	nop	
/home/main.c:47
      puts("\n");
     e0e:	00 7c       	.word	H'0,H'7c
     e10:	01 4e       	.word	H'1,H'4e
     e12:	00 00       	nop	
     e14:	01 8b       	.word	H'1,H'8b
/home/main.c:49
      if ((i & 0xf) == 7) puts(" ");
     e16:	0f 00       	daa	r0h
     e18:	00 01       	.word	H'0,H'1
     e1a:	fc 00       	mov.b	#0x0,r4l
     e1c:	00 09       	.word	H'0,H'9
     e1e:	19 0f       	sub.w	r0,e7
     e20:	00 00       	nop	
     e22:	01 f1       	.word	H'1,H'f1
     e24:	00 00       	nop	
/home/main.c:50
      puts(" ");
     e26:	09 5f       	add.w	r5,e7
     e28:	10 00       	shll.b	r0h
     e2a:	00 07       	.word	H'0,H'7
     e2c:	6a 00 00 00 	mov.b	@0x0:16,r0h
/home/main.c:44
  for (i = 0; i < size; i++) {
     e30:	7c 0a       	.word	H'7c,H'a
     e32:	00 00       	nop	
     e34:	02 07       	stc	ccr,r7h
     e36:	00 00       	nop	
     e38:	09 7f       	add.w	r7,e7
/home/main.c:53
  puts("\n");
     e3a:	0a 00       	inc	r0h
     e3c:	00 02       	.word	H'0,H'2
     e3e:	10 00       	shll.b	r0h
     e40:	00 09       	.word	H'0,H'9
     e42:	9e 0a       	addx	#0xa,r6l
main():
/home/main.c:98
    } else if (!strcmp(buf, "run")) { /* ELF形式ファイルの実行 */
     e44:	00 00       	nop	
     e46:	02 1b       	stc	exr,r3l
     e48:	00 00       	nop	
     e4a:	09 ce       	add.w	e4,e6
     e4c:	0a 00       	inc	r0h
     e4e:	00 02       	.word	H'0,H'2
     e50:	26 00       	mov.b	@0x0:8,r6h
     e52:	00 09       	.word	H'0,H'9
     e54:	fe 0b       	mov.b	#0xb,r6l
     e56:	00 00       	nop	
/home/main.c:99
      entry_point = elf_load(loadbuf); /* メモリ上に展開(ロード) */
     e58:	07 72       	ldc	#0x72,ccr
     e5a:	00 00       	nop	
     e5c:	02 62       	stc	vbr,er2
     e5e:	00 00       	nop	
     e60:	01 54       	.word	H'1,H'54
     e62:	0c 01       	mov.b	r0h,r1h
     e64:	50 01       	mulxu.b	r0h,r1
/home/main.c:100
      if (!entry_point) {
     e66:	31 00       	mov.b	r1h,@0x0:8
/home/main.c:101
	puts("run error!\n");
     e68:	0b 00       	adds	#1,er0
     e6a:	00 07       	.word	H'0,H'7
     e6c:	84 00       	add.b	#0x0,r4h
     e6e:	00 02       	.word	H'0,H'2
     e70:	62 00       	bclr	r0h,r0h
/home/main.c:103
	puts("starting from entry point: ");
     e72:	00 01       	.word	H'0,H'1
     e74:	67 0c       	bst	#0x0,r4l
     e76:	01 50       	.word	H'1,H'50
     e78:	01 31       	.word	H'1,H'31
     e7a:	00 0b       	.word	H'0,H'b
/home/main.c:104
	putxval((unsigned long)entry_point, 0);
     e7c:	00 00       	nop	
     e7e:	07 b2       	ldc	#0xb2,ccr
     e80:	00 00       	nop	
     e82:	02 62       	stc	vbr,er2
/home/main.c:105
	puts("\n");
     e84:	00 00       	nop	
     e86:	01 7a       	.word	H'1,H'7a
     e88:	0c 01       	mov.b	r0h,r1h
     e8a:	50 01       	mulxu.b	r0h,r1
     e8c:	31 00       	mov.b	r1h,@0x0:8
/home/main.c:107
	f(); /* ここで，ロードしたプログラムに処理を渡す */
     e8e:	0d 00       	mov.w	r0,r0
     e90:	00 07       	.word	H'0,H'7
     e92:	dc 00       	xor.b	#0x0,r4l
/home/main.c:110
    } else if (!strcmp(buf, "ramchk")) {
     e94:	00 02       	.word	H'0,H'2
     e96:	62 0c       	bclr	r0h,r4l
     e98:	01 50       	.word	H'1,H'50
     e9a:	01 31       	.word	H'1,H'31
     e9c:	00 00       	nop	
     e9e:	00 0b       	.word	H'0,H'b
     ea0:	00 00       	nop	
     ea2:	07 12       	ldc	#0x12,ccr
     ea4:	00 00       	nop	
     ea6:	02 62       	stc	vbr,er2
/home/main.c:111
      dram_check();
     ea8:	00 00       	nop	
     eaa:	01 9e       	.word	H'1,H'9e
     eac:	0c 01       	mov.b	r0h,r1h
     eae:	50 01       	mulxu.b	r0h,r1
/home/main.c:112
    } else if (!strcmp(buf, "ramchk2")) {
     eb0:	31 00       	mov.b	r1h,@0x0:8
     eb2:	0b 00       	adds	#1,er0
     eb4:	00 07       	.word	H'0,H'7
     eb6:	50 00       	mulxu.b	r0h,r0
     eb8:	00 02       	.word	H'0,H'2
     eba:	4c 00       	bge	.0 (0xebc)
     ebc:	00 01       	.word	H'0,H'1
     ebe:	b6 0c       	subx	#0xc,r6h
     ec0:	01 50       	.word	H'1,H'50
     ec2:	01 31       	.word	H'1,H'31
/home/main.c:113
      dram_check2();
     ec4:	0c 01       	mov.b	r0h,r1h
     ec6:	51 01       	divxu.b	r0h,r1
     ec8:	36 00       	mov.b	r6h,@0x0:8
     eca:	0d 00       	mov.w	r0,r0
/home/main.c:114
    } else if (!strcmp(buf, "ramclr")) {
     ecc:	00 08       	.word	H'0,H'8
     ece:	0a 00       	inc	r0h
     ed0:	00 02       	.word	H'0,H'2
     ed2:	4c 0c       	bge	.+12 (0xee0)
     ed4:	01 50       	.word	H'1,H'50
     ed6:	01 31       	.word	H'1,H'31
     ed8:	00 00       	nop	
     eda:	02 04       	stc	ccr,r4h
     edc:	05 00       	xorc	#0x0,ccr
     ede:	00 01       	.word	H'0,H'1
/home/main.c:115
      dram_clear();
     ee0:	0b 11       	.word	H'b,H'11
     ee2:	04 00       	orc	#0x0,ccr
     ee4:	00 01       	.word	H'0,H'1
     ee6:	d3 02       	xor.b	#0x2,r3h
/home/main.c:117
      puts("unknown.\n");
     ee8:	01 08 00 00 	mov.l	@er0,@er0
     eec:	00 5a       	.word	H'0,H'5a
     eee:	12 02       	rotxl.b	r2h
     ef0:	05 69       	xorc	#0x69,ccr
.Ldebug_info0():
     ef2:	6e 74 00 13 	mov.b	@(0x13:16,er7),r4h
     ef6:	00 00       	nop	
     ef8:	02 78       	stc	sbr,er0
     efa:	01 20       	.word	H'1,H'20
     efc:	00 00       	nop	
     efe:	01 da       	.word	H'1,H'da
     f00:	01 00       	.word	H'1,H'0
     f02:	00 02       	.word	H'0,H'2
     f04:	30 14       	mov.b	r0h,@0x14:8
     f06:	00 00       	nop	
     f08:	02 61       	stc	vbr,er1
     f0a:	01 20       	.word	H'1,H'20
     f0c:	00 00       	nop	
     f0e:	00 25       	.word	H'0,H'25
     f10:	15 62       	xor.b	r6h,r2h
     f12:	75 66       	bxor	#0x6,r6h
     f14:	00 01       	.word	H'0,H'1
     f16:	20 00       	mov.b	@0x0:8,r0h
     f18:	00 01       	.word	H'0,H'1
     f1a:	cd 05       	or.b	#0x5,r5l
     f1c:	63 00       	btst	r0h,r0h
     f1e:	01 22       	.word	H'1,H'22
     f20:	00 00       	nop	
     f22:	00 25       	.word	H'0,H'25
     f24:	16 00       	and.b	r0h,r0h
     f26:	00 02       	.word	H'0,H'2
     f28:	6e 01 22 00 	mov.b	@(0x2200:16,er0),r1h
     f2c:	00 00       	nop	
     f2e:	25 16       	mov.b	@0x16:8,r5h
     f30:	00 00       	nop	
     f32:	02 8a       	.word	H'2,H'8a
     f34:	01 22       	.word	H'1,H'22
     f36:	00 00       	nop	
     f38:	00 25       	.word	H'0,H'25
     f3a:	05 69       	xorc	#0x69,ccr
     f3c:	00 01       	.word	H'0,H'1
     f3e:	23 00       	mov.b	@0x0:8,r3h
     f40:	00 01       	.word	H'0,H'1
     f42:	da 00       	xor.b	#0x0,r2l
     f44:	13 00       	rotxr.b	r0h
     f46:	00 02       	.word	H'0,H'2
     f48:	a7 01       	cmp.b	#0x1,r7h
     f4a:	11 00       	shlr.b	r0h
     f4c:	00 01       	.word	H'0,H'1
     f4e:	da 01       	xor.b	#0x1,r2l
     f50:	00 00       	nop	
     f52:	02 4c       	.word	H'2,H'4c
     f54:	05 63       	xorc	#0x63,ccr
     f56:	6e 74 00 01 	mov.b	@(0x1:16,er7),r4h
     f5a:	13 00       	rotxr.b	r0h
     f5c:	00 01       	.word	H'0,H'1
     f5e:	c6 00       	or.b	#0x0,r6h
     f60:	17 00       	not.b	r0h
     f62:	00 01       	.word	H'0,H'1
     f64:	b3 00       	subx	#0x0,r3h
     f66:	00 01       	.word	H'0,H'1
     f68:	b3 02       	subx	#0x2,r3h
     f6a:	06 17       	andc	#0x17,ccr
     f6c:	00 00       	nop	
     f6e:	02 30       	stmac	macl,er0
     f70:	00 00       	nop	
     f72:	02 30       	stmac	macl,er0
     f74:	02 07       	stc	ccr,r7h
     f76:	17 00       	not.b	r0h
     f78:	00 01       	.word	H'0,H'1
     f7a:	d0 00       	xor.b	#0x0,r0h
     f7c:	00 01       	.word	H'0,H'1
     f7e:	d0 02       	xor.b	#0x2,r0h
     f80:	08 00       	add.b	r0h,r0h

00000f82 <.Ldebug_info0>:
     f82:	00 00       	nop	
     f84:	03 2c       	ldmac	er4,mach
     f86:	00 04       	.word	H'0,H'4
     f88:	00 00       	nop	
     f8a:	06 a6       	andc	#0xa6,ccr
     f8c:	04 01       	orc	#0x1,ccr
     f8e:	00 00       	nop	
     f90:	00 00       	nop	
     f92:	0c 00       	mov.b	r0h,r0h
     f94:	00 03       	.word	H'0,H'3
     f96:	dc 00       	xor.b	#0x0,r4l
     f98:	00 00       	nop	
     f9a:	4b 00       	bmi	.0 (0xf9c)
     f9c:	00 08       	.word	H'0,H'8
     f9e:	2e 00       	mov.b	@0x0:8,r6l
     fa0:	00 00       	nop	
     fa2:	e8 00       	and.b	#0x0,r0l
     fa4:	00 08       	.word	H'0,H'8
     fa6:	e1 02       	and.b	#0x2,r1h
     fa8:	01 08 00 00 	mov.l	@er0,@er0
     fac:	00 51       	.word	H'0,H'51
     fae:	02 02       	stc	ccr,r2h
     fb0:	07 00       	ldc	#0x0,ccr
     fb2:	00 00       	nop	
     fb4:	38 02       	mov.b	r0l,@0x2:8
     fb6:	04 07       	orc	#0x7,ccr
     fb8:	00 00       	nop	
     fba:	00 26       	.word	H'0,H'26
     fbc:	03 10       	ldc	r0h,exr
     fbe:	01 06       	.word	H'1,H'6
     fc0:	00 00       	nop	
     fc2:	00 97       	.word	H'0,H'97
     fc4:	04 00       	orc	#0x0,ccr
     fc6:	00 03       	.word	H'0,H'3
     fc8:	e7 01       	and.b	#0x1,r7h
     fca:	07 00       	ldc	#0x0,ccr
     fcc:	00 00       	nop	
     fce:	97 00       	addx	#0x0,r7h
     fd0:	04 00       	orc	#0x0,ccr
     fd2:	00 03       	.word	H'0,H'3
     fd4:	05 01       	xorc	#0x1,ccr
     fd6:	08 00       	add.b	r0h,r0h
     fd8:	00 00       	nop	
     fda:	25 04       	mov.b	@0x4:8,r5h
     fdc:	04 00       	orc	#0x0,ccr
     fde:	00 03       	.word	H'0,H'3
     fe0:	7b 01       	.word	H'7b,H'1
     fe2:	09 00       	add.w	r0,r0
     fe4:	00 00       	nop	
     fe6:	25 05       	mov.b	@0x5:8,r5h
     fe8:	04 00       	orc	#0x0,ccr
     fea:	00 03       	.word	H'0,H'3
     fec:	d4 01       	xor.b	#0x1,r4h
     fee:	0a 00       	inc	r0h
     ff0:	00 00       	nop	
     ff2:	25 06       	mov.b	@0x6:8,r5h
     ff4:	05 61       	xorc	#0x61,ccr
     ff6:	62 69       	bclr	r6h,r1l
     ff8:	00 01       	.word	H'0,H'1
     ffa:	0b 00       	adds	#1,er0
     ffc:	00 00       	nop	
     ffe:	25 07       	mov.b	@0x7:8,r5h
    1000:	04 00       	orc	#0x0,ccr
    1002:	00 03       	.word	H'0,H'3
    1004:	d0 01       	xor.b	#0x1,r0h
    1006:	0c 00       	mov.b	r0h,r0h
    1008:	00 00       	nop	
    100a:	25 08       	mov.b	@0x8:8,r5h
    100c:	04 00       	orc	#0x0,ccr
    100e:	00 03       	.word	H'0,H'3
    1010:	0b 01       	adds	#1,er1
    1012:	0d 00       	mov.w	r0,r0
    1014:	00 00       	nop	
    1016:	a7 09       	cmp.b	#0x9,r7h
    1018:	00 06       	.word	H'0,H'6
    101a:	00 00       	nop	
    101c:	00 25       	.word	H'0,H'25
    101e:	00 00       	nop	
    1020:	00 a7       	.word	H'0,H'a7
    1022:	07 00       	ldc	#0x0,ccr
    1024:	00 00       	nop	
    1026:	33 03       	mov.b	r3h,@0x3:8
    1028:	00 06       	.word	H'0,H'6
    102a:	00 00       	nop	
    102c:	00 25       	.word	H'0,H'25
    102e:	00 00       	nop	
    1030:	00 b7       	.word	H'0,H'b7
    1032:	07 00       	ldc	#0x0,ccr
    1034:	00 00       	nop	
    1036:	33 06       	mov.b	r3h,@0x6:8
    1038:	00 08       	.word	H'0,H'8
    103a:	00 00       	nop	
    103c:	03 70       	ldc	er0,sbr
    103e:	34 01       	mov.b	r4h,@0x1:8
    1040:	05 00       	xorc	#0x0,ccr
    1042:	00 01       	.word	H'0,H'1
    1044:	6b 05 69 64 	mov.w	@0x6964:16,r5
    1048:	00 01       	.word	H'0,H'1
    104a:	0e 00       	addx	r0h,r0h
    104c:	00 00       	nop	
    104e:	3a 00       	mov.b	r2l,@0x0:8
    1050:	04 00       	orc	#0x0,ccr
    1052:	00 01       	.word	H'0,H'1
    1054:	58 01       	.word	H'58,H'1
    1056:	0f 00       	daa	r0h
    1058:	00 01       	.word	H'0,H'1
    105a:	6b 10       	.word	H'6b,H'10
    105c:	04 00       	orc	#0x0,ccr
    105e:	00 03       	.word	H'0,H'3
    1060:	99 01       	addx	#0x1,r1l
    1062:	10 00       	shll.b	r0h
    1064:	00 01       	.word	H'0,H'1
    1066:	6b 12       	.word	H'6b,H'12
    1068:	04 00       	orc	#0x0,ccr
    106a:	00 03       	.word	H'0,H'3
    106c:	d4 01       	xor.b	#0x1,r4h
    106e:	11 00       	shlr.b	r0h
    1070:	00 01       	.word	H'0,H'1
    1072:	72 14       	bclr	#0x1,r4h
    1074:	04 00       	orc	#0x0,ccr
    1076:	00 00       	nop	
    1078:	f7 01       	mov.b	#0x1,r7h
    107a:	12 00       	rotxl.b	r0h
    107c:	00 01       	.word	H'0,H'1
    107e:	72 18       	bclr	#0x1,r0l
    1080:	04 00       	orc	#0x0,ccr
    1082:	00 03       	.word	H'0,H'3
    1084:	b4 01       	subx	#0x1,r4h
    1086:	13 00       	rotxr.b	r0h
    1088:	00 01       	.word	H'0,H'1
    108a:	72 1c       	bclr	#0x1,r4l
    108c:	04 00       	orc	#0x0,ccr
    108e:	00 03       	.word	H'0,H'3
    1090:	9e 01       	addx	#0x1,r6l
    1092:	14 00       	or.b	r0h,r0h
    1094:	00 01       	.word	H'0,H'1
    1096:	72 20       	bclr	#0x2,r0h
    1098:	04 00       	orc	#0x0,ccr
    109a:	00 03       	.word	H'0,H'3
    109c:	93 01       	addx	#0x1,r3h
    109e:	15 00       	xor.b	r0h,r0h
    10a0:	00 01       	.word	H'0,H'1
    10a2:	72 24       	bclr	#0x2,r4h
    10a4:	04 00       	orc	#0x0,ccr
    10a6:	00 03       	.word	H'0,H'3
    10a8:	47 01       	.word	H'47,H'1
    10aa:	16 00       	and.b	r0h,r0h
    10ac:	00 01       	.word	H'0,H'1
    10ae:	6b 28 04 00 	mov.w	@0x4000003:32,e0
    10b2:	00 03 
    10b4:	3f 01       	mov.b	r7l,@0x1:8
    10b6:	17 00       	not.b	r0h
    10b8:	00 01       	.word	H'0,H'1
    10ba:	6b 2a 04 00 	mov.w	@0x4000003:32,e2
    10be:	00 03 
    10c0:	5d 01       	jsr	@@516 (0x204)
    10c2:	18 00       	sub.b	r0h,r0h
    10c4:	00 01       	.word	H'0,H'1
    10c6:	6b 2c 04 00 	mov.w	@0x4000002:32,e4
    10ca:	00 02 
    10cc:	e3 01       	and.b	#0x1,r3h
    10ce:	19 00       	sub.w	r0,r0
    10d0:	00 01       	.word	H'0,H'1
    10d2:	6b 2e 04 00 	mov.w	@0x4000003:32,e6
    10d6:	00 03 
    10d8:	2c 01       	mov.b	@0x1:8,r4l
    10da:	1a 00       	dec.b	r0h
    10dc:	00 01       	.word	H'0,H'1
    10de:	6b 30       	.word	H'6b,H'30
    10e0:	04 00       	orc	#0x0,ccr
    10e2:	00 02       	.word	H'0,H'2
    10e4:	c6 01       	or.b	#0x1,r6h
    10e6:	1b 00       	subs	#1,er0
    10e8:	00 01       	.word	H'0,H'1
    10ea:	6b 32       	.word	H'6b,H'32
    10ec:	00 02       	.word	H'0,H'2
    10ee:	02 05       	stc	ccr,r5h
    10f0:	00 00       	nop	
    10f2:	01 33       	.word	H'1,H'33
    10f4:	02 04       	stc	ccr,r4h
    10f6:	05 00       	xorc	#0x0,ccr
    10f8:	00 01       	.word	H'0,H'1
    10fa:	0b 08       	adds	#1,er0
    10fc:	00 00       	nop	
    10fe:	02 b3       	stmac	macl,er3
    1100:	20 01       	mov.b	@0x1:8,r0h
    1102:	1e 00       	subx	r0h,r0h
    1104:	00 01       	.word	H'0,H'1
    1106:	e6 04       	and.b	#0x4,r6h
    1108:	00 00       	nop	
    110a:	01 58       	.word	H'1,H'58
    110c:	01 1f       	.word	H'1,H'1f
    110e:	00 00       	nop	
    1110:	01 72       	.word	H'1,H'72
    1112:	00 04       	.word	H'0,H'4
    1114:	00 00       	nop	
    1116:	03 c3       	.word	H'3,H'c3
    1118:	01 20       	.word	H'1,H'20
    111a:	00 00       	nop	
    111c:	01 72       	.word	H'1,H'72
    111e:	04 04       	orc	#0x4,ccr
    1120:	00 00       	nop	
    1122:	03 1f       	ldc	r7l,exr
    1124:	01 21       	.word	H'1,H'21
    1126:	00 00       	nop	
    1128:	01 72       	.word	H'1,H'72
    112a:	08 04       	add.b	r0h,r4h
    112c:	00 00       	nop	
    112e:	02 f7       	.word	H'2,H'f7
    1130:	01 22       	.word	H'1,H'22
    1132:	00 00       	nop	
    1134:	01 72       	.word	H'1,H'72
    1136:	0c 04       	mov.b	r0h,r4h
    1138:	00 00       	nop	
    113a:	02 d9       	.word	H'2,H'd9
    113c:	01 23       	.word	H'1,H'23
    113e:	00 00       	nop	
    1140:	01 72       	.word	H'1,H'72
    1142:	10 04       	shll.b	r4h
    1144:	00 00       	nop	
    1146:	03 13       	ldc	r3h,exr
    1148:	01 24       	.word	H'1,H'24
    114a:	00 00       	nop	
    114c:	01 72       	.word	H'1,H'72
    114e:	14 04       	or.b	r0h,r4h
    1150:	00 00       	nop	
    1152:	03 93       	.word	H'3,H'93
    1154:	01 25       	.word	H'1,H'25
    1156:	00 00       	nop	
    1158:	01 72       	.word	H'1,H'72
    115a:	18 04       	sub.b	r0h,r4h
    115c:	00 00       	nop	
    115e:	03 ca       	.word	H'3,H'ca
    1160:	01 26       	.word	H'1,H'26
    1162:	00 00       	nop	
    1164:	01 72       	.word	H'1,H'72
    1166:	1c 00       	cmp.b	r0h,r0h
    1168:	09 00       	add.w	r0,r0
    116a:	00 01       	.word	H'0,H'1
    116c:	4f 01       	.word	H'4f,H'1
    116e:	53 00       	divxu.w	r0,er0
    1170:	00 02       	.word	H'0,H'2
    1172:	a2 00       	cmp.b	#0x0,r2h
    1174:	00 08       	.word	H'0,H'8
    1176:	2e 00       	mov.b	@0x0:8,r6l
    1178:	00 00       	nop	
    117a:	e8 01       	and.b	#0x1,r0l
    117c:	9c 00       	addx	#0x0,r4l
    117e:	00 02       	.word	H'0,H'2
    1180:	a2 0a       	cmp.b	#0xa,r2h
    1182:	62 75       	bclr	r7h,r5h
    1184:	66 00       	and.w	r0,r0
    1186:	01 53       	.word	H'1,H'53
    1188:	00 00       	nop	
    118a:	02 a2       	stmac	mach,er2
    118c:	00 00       	nop	
    118e:	0a 38       	add.w	#0x3,e0
    1190:	0b 00       	adds	#1,er0
    1192:	00 03       	.word	H'0,H'3
    1194:	74 01       	bor	#0x0,r1h
    1196:	55 00       	bsr	.0 (0x1198)
    1198:	00 02       	.word	H'0,H'2
    119a:	af 00       	cmp.b	#0x0,r7l
    119c:	00 0a       	.word	H'0,H'a
    119e:	64 0c       	or.w	r0,e4
    11a0:	00 00       	nop	
    11a2:	02 f2       	.word	H'2,H'f2
    11a4:	00 00       	nop	
    11a6:	08 40       	add.b	r4h,r0h
    11a8:	00 00       	nop	
    11aa:	00 56       	.word	H'0,H'56
    11ac:	01 57       	.word	H'1,H'57
    11ae:	00 00       	nop	
    11b0:	02 58       	.word	H'2,H'58
    11b2:	0d 00       	mov.w	r0,r0
    11b4:	00 03       	.word	H'0,H'3
    11b6:	02 00       	stc	ccr,r0h
    11b8:	00 0a       	.word	H'0,H'a
    11ba:	90 0e       	addx	#0xe,r0h
    11bc:	00 00       	nop	
    11be:	08 4e       	add.b	r4h,r6l
    11c0:	00 00       	nop	
    11c2:	03 0e       	ldc	r6l,ccr
    11c4:	0f 01       	daa	r1h
    11c6:	50 02       	mulxu.b	r0h,r2
    11c8:	75 00       	bxor	#0x0,r0h
    11ca:	0f 01       	daa	r1h
    11cc:	51 05       	divxu.b	r0h,r5
    11ce:	03 00       	ldc	r0h,ccr
    11d0:	00 0f       	.word	H'0,H'f
    11d2:	f6 0f       	mov.b	#0xf,r6h
    11d4:	01 52       	.word	H'1,H'52
    11d6:	01 34       	.word	H'1,H'34
    11d8:	00 00       	nop	
    11da:	10 00       	shll.b	r0h
    11dc:	00 02       	.word	H'0,H'2
    11de:	b5 00       	subx	#0x0,r5h
    11e0:	00 08       	.word	H'0,H'8
    11e2:	96 00       	addx	#0x0,r6h
    11e4:	00 00       	nop	
    11e6:	66 01       	and.w	r0,r1
    11e8:	5a 11 00 00 	jmp	@0x110000:24
    11ec:	02 c5       	.word	H'2,H'c5
    11ee:	12 00       	rotxl.b	r0h
    11f0:	00 08       	.word	H'0,H'8
    11f2:	96 00       	addx	#0x0,r6h
    11f4:	00 00       	nop	
    11f6:	66 13       	and.w	r1,r3
    11f8:	00 00       	nop	
    11fa:	02 d0       	.word	H'2,H'd0
    11fc:	00 00       	nop	
    11fe:	0a bc       	add.l	#0x3,er4
    1200:	13 00       	rotxr.b	r0h
    1202:	00 02       	.word	H'0,H'2
    1204:	d9 00       	xor.b	#0x0,r1l
    1206:	00 0a       	.word	H'0,H'a
    1208:	da 14       	xor.b	#0x14,r2l
    120a:	00 00       	nop	
    120c:	08 d0       	add.b	r5l,r0h
    120e:	00 00       	nop	
    1210:	03 19       	ldc	r1l,exr
    1212:	0e 00       	addx	r0h,r0h
    1214:	00 08       	.word	H'0,H'8
    1216:	ec 00       	and.b	#0x0,r4l
    1218:	00 03       	.word	H'0,H'3
    121a:	24 0f       	mov.b	@0xf:8,r4h
    121c:	01 51       	.word	H'1,H'51
    121e:	01 30       	.word	H'1,H'30
    1220:	00 00       	nop	
    1222:	00 00       	nop	
    1224:	15 04       	xor.b	r0h,r4h
    1226:	00 00       	nop	
    1228:	02 a8       	stmac	mach,er0
    122a:	02 01       	stc	ccr,r1h
    122c:	08 00       	add.b	r0h,r0h
    122e:	00 00       	nop	
    1230:	5a 15 04 00 	jmp	@0x150400:24
    1234:	00 00       	nop	
    1236:	b7 16       	subx	#0x16,r7h
    1238:	00 00       	nop	
    123a:	03 82       	.word	H'3,H'82
    123c:	01 3c       	.word	H'1,H'3c
    123e:	00 00       	nop	
    1240:	02 e5       	.word	H'2,H'e5
    1242:	01 00       	.word	H'1,H'0
    1244:	00 02       	.word	H'0,H'2
    1246:	e5 17       	and.b	#0x17,r5h
    1248:	00 00       	nop	
    124a:	03 74       	ldc	er4,sbr
    124c:	01 3c       	.word	H'1,H'3c
    124e:	00 00       	nop	
    1250:	02 af       	stmac	mach,er7
    1252:	18 69       	sub.b	r6h,r1l
    1254:	00 01       	.word	H'0,H'1
    1256:	3e 00       	mov.b	r6l,@0x0:8
    1258:	00 02       	.word	H'0,H'2
    125a:	e5 19       	and.b	#0x19,r5h
    125c:	00 00       	nop	
    125e:	03 e2       	.word	H'3,H'e2
    1260:	01 3f       	.word	H'1,H'3f
    1262:	00 00       	nop	
    1264:	02 ec       	.word	H'2,H'ec
    1266:	00 1a       	.word	H'0,H'1a
    1268:	02 05       	stc	ccr,r5h
    126a:	69 6e       	mov.w	@er6,e6
    126c:	74 00       	bor	#0x0,r0h
    126e:	15 04       	xor.b	r0h,r4h
    1270:	00 00       	nop	
    1272:	01 79       	.word	H'1,H'79
    1274:	16 00       	and.b	r0h,r0h
    1276:	00 03       	.word	H'0,H'3
    1278:	53 01       	divxu.w	r0,er1
    127a:	2a 00       	mov.b	@0x0:8,r2l
    127c:	00 02       	.word	H'0,H'2
    127e:	e5 01       	and.b	#0x1,r5h
    1280:	00 00       	nop	
    1282:	03 0e       	ldc	r6l,ccr
    1284:	17 00       	not.b	r0h
    1286:	00 03       	.word	H'0,H'3
    1288:	74 01       	bor	#0x0,r1h
    128a:	2a 00       	mov.b	@0x0:8,r2l
    128c:	00 02       	.word	H'0,H'2
    128e:	af 00       	cmp.b	#0x0,r7l
    1290:	1b 00       	subs	#1,er0
    1292:	00 01       	.word	H'0,H'1
    1294:	c4 00       	or.b	#0x0,r4h
    1296:	00 01       	.word	H'0,H'1
    1298:	c4 02       	or.b	#0x2,r4h
    129a:	06 1b       	andc	#0x1b,ccr
    129c:	00 00       	nop	
    129e:	04 84       	orc	#0x84,ccr
    12a0:	00 00       	nop	
    12a2:	04 84       	orc	#0x84,ccr
    12a4:	02 05       	stc	ccr,r5h
    12a6:	1b 00       	subs	#1,er0
    12a8:	00 02       	.word	H'0,H'2
    12aa:	00 00       	nop	
    12ac:	00 02       	.word	H'0,H'2
    12ae:	00 02       	.word	H'0,H'2
    12b0:	04 00       	orc	#0x0,ccr

000012b2 <.Ldebug_info0>:
    12b2:	00 00       	nop	
    12b4:	06 15       	andc	#0x15,ccr
    12b6:	00 04       	.word	H'0,H'4
    12b8:	00 00       	nop	
    12ba:	08 0e       	add.b	r0h,r6l
    12bc:	04 01       	orc	#0x1,ccr
    12be:	00 00       	nop	
    12c0:	00 00       	nop	
    12c2:	0c 00       	mov.b	r0h,r0h
    12c4:	00 04       	.word	H'0,H'4
    12c6:	9d 00       	addx	#0x0,r5l
    12c8:	00 00       	nop	
    12ca:	4b 00       	bmi	.0 (0x12cc)
    12cc:	00 09       	.word	H'0,H'9
    12ce:	16 00       	and.b	r0h,r0h
    12d0:	00 03       	.word	H'0,H'3
    12d2:	e0 00       	and.b	#0x0,r0h
    12d4:	00 09       	.word	H'0,H'9
    12d6:	b7 02       	subx	#0x2,r7h
    12d8:	00 00       	nop	
    12da:	02 0f       	stc	ccr,r7l
    12dc:	02 07       	stc	ccr,r7h
    12de:	00 00       	nop	
    12e0:	00 35       	.word	H'0,H'35
    12e2:	03 00       	ldc	r0h,ccr
    12e4:	00 00       	nop	
    12e6:	25 04       	mov.b	@0x4:8,r5h
    12e8:	01 08 00 00 	mov.l	@er0,@er0
    12ec:	00 51       	.word	H'0,H'51
    12ee:	02 00       	stc	ccr,r0h
    12f0:	00 04       	.word	H'0,H'4
    12f2:	96 02       	addx	#0x2,r6h
    12f4:	08 00       	add.b	r0h,r0h
    12f6:	00 00       	nop	
    12f8:	4c 03       	.word	H'4c,H'3
    12fa:	00 00       	nop	
    12fc:	00 3c       	.word	H'0,H'3c
    12fe:	04 02       	orc	#0x2,ccr
    1300:	07 00       	ldc	#0x0,ccr
    1302:	00 00       	nop	
    1304:	38 02       	mov.b	r0l,@0x2:8
    1306:	00 00       	nop	
    1308:	03 ed       	.word	H'3,H'ed
    130a:	02 09       	stc	ccr,r1l
    130c:	00 00       	nop	
    130e:	00 63       	.word	H'0,H'63
    1310:	03 00       	ldc	r0h,ccr
    1312:	00 00       	nop	
    1314:	53 04       	divxu.w	r0,er4
    1316:	04 07       	orc	#0x7,ccr
    1318:	00 00       	nop	
    131a:	00 26       	.word	H'0,H'26
    131c:	05 04       	xorc	#0x4,ccr
    131e:	01 15       	.word	H'1,H'15
    1320:	00 00       	nop	
    1322:	00 94       	.word	H'0,H'94
    1324:	06 00       	andc	#0x0,ccr
    1326:	00 04       	.word	H'0,H'4
    1328:	91 01       	addx	#0x1,r1h
    132a:	16 00       	and.b	r0h,r0h
    132c:	00 00       	nop	
    132e:	a4 06       	cmp.b	#0x6,r4h
    1330:	00 00       	nop	
    1332:	04 38       	orc	#0x38,ccr
    1334:	01 17       	.word	H'1,H'17
    1336:	00 00       	nop	
    1338:	00 b9       	.word	H'0,H'b9
    133a:	06 00       	andc	#0x0,ccr
    133c:	00 04       	.word	H'0,H'4
    133e:	59 01       	.word	H'59,H'1
    1340:	18 00       	sub.b	r0h,r0h
    1342:	00 00       	nop	
    1344:	ce 00       	or.b	#0x0,r6l
    1346:	07 00       	ldc	#0x0,ccr
    1348:	00 00       	nop	
    134a:	30 00       	mov.b	r0h,@0x0:8
    134c:	00 00       	nop	
    134e:	a4 08       	cmp.b	#0x8,r4h
    1350:	00 00       	nop	
    1352:	00 63       	.word	H'0,H'63
    1354:	03 00       	ldc	r0h,ccr
    1356:	03 00       	ldc	r0h,ccr
    1358:	00 00       	nop	
    135a:	94 07       	addx	#0x7,r4h
    135c:	00 00       	nop	
    135e:	00 47       	.word	H'0,H'47
    1360:	00 00       	nop	
    1362:	00 b9       	.word	H'0,H'b9
    1364:	08 00       	add.b	r0h,r0h
    1366:	00 00       	nop	
    1368:	63 01       	btst	r0h,r1h
    136a:	00 03       	.word	H'0,H'3
    136c:	00 00       	nop	
    136e:	00 a9       	.word	H'0,H'a9
    1370:	07 00       	ldc	#0x0,ccr
    1372:	00 00       	nop	
    1374:	5e 00 00 00 	jsr	@0x0:24
    1378:	ce 08       	or.b	#0x8,r6l
    137a:	00 00       	nop	
    137c:	00 63       	.word	H'0,H'63
    137e:	00 00       	nop	
    1380:	03 00       	ldc	r0h,ccr
    1382:	00 00       	nop	
    1384:	be 09       	subx	#0x9,r6l
    1386:	04 01       	orc	#0x1,ccr
    1388:	14 00       	or.b	r0h,r0h
    138a:	00 00       	nop	
    138c:	e6 0a       	and.b	#0xa,r6h
    138e:	75 00       	bxor	#0x0,r0h
    1390:	01 19       	.word	H'1,H'19
    1392:	00 00       	nop	
    1394:	00 6a       	.word	H'0,H'6a
    1396:	00 00       	nop	
    1398:	02 00       	stc	ccr,r0h
    139a:	00 04       	.word	H'0,H'4
    139c:	8b 01       	add.b	#0x1,r3l
    139e:	1a 00       	dec.b	r0h
    13a0:	00 00       	nop	
    13a2:	d3 03       	xor.b	#0x3,r3h
    13a4:	00 00       	nop	
    13a6:	00 e6       	.word	H'0,H'e6
    13a8:	0b 00       	adds	#1,er0
    13aa:	00 00       	nop	
    13ac:	d8 01       	xor.b	#0x1,r0l
    13ae:	cb 00       	or.b	#0x0,r3l
    13b0:	00 01       	.word	H'0,H'1
    13b2:	47 00       	beq	.0 (0x13b4)
    13b4:	00 0c       	.word	H'0,H'c
    13b6:	be 00       	subx	#0x0,r6l
    13b8:	00 00       	nop	
    13ba:	38 01       	mov.b	r0l,@0x1:8
    13bc:	9c 00       	addx	#0x0,r4l
    13be:	00 01       	.word	H'0,H'1
    13c0:	47 0c       	beq	.+12 (0x13ce)
    13c2:	70 00       	bset	#0x0,r0h
    13c4:	01 cd       	.word	H'1,H'cd
    13c6:	00 00       	nop	
    13c8:	01 4e       	.word	H'1,H'4e
    13ca:	00 00       	nop	
    13cc:	0a ed       	add.l	#0x6,er5
    13ce:	0d 00       	mov.w	r0,r0
    13d0:	00 0c       	.word	H'0,H'c
    13d2:	ce 00       	or.b	#0x0,r6l
    13d4:	00 05       	.word	H'0,H'5
    13d6:	f3 00       	mov.b	#0x0,r3h
    13d8:	00 01       	.word	H'0,H'1
    13da:	33 0e       	mov.b	r3h,@0xe:8
    13dc:	01 50       	.word	H'1,H'50
    13de:	05 03       	xorc	#0x3,ccr
    13e0:	00 00       	nop	
    13e2:	10 61       	shll.w	#8,r1
    13e4:	00 0f       	.word	H'0,H'f
    13e6:	00 00       	nop	
    13e8:	0c ee       	mov.b	r6l,r6l
    13ea:	00 00       	nop	
    13ec:	05 f3       	xorc	#0xf3,ccr
    13ee:	0e 01       	addx	r0h,r1h
    13f0:	50 05       	mulxu.b	r0h,r5
    13f2:	03 00       	ldc	r0h,ccr
    13f4:	00 10       	.word	H'0,H'10
    13f6:	73 00       	btst	#0x0,r0h
    13f8:	00 10       	.word	H'0,H'10
    13fa:	02 05       	stc	ccr,r5h
    13fc:	69 6e       	mov.w	@er6,e6
    13fe:	74 00       	bor	#0x0,r0h
    1400:	11 04       	shlr.b	r4h
    1402:	00 00       	nop	
    1404:	00 53       	.word	H'0,H'53
    1406:	0b 00       	adds	#1,er0
    1408:	00 00       	nop	
    140a:	b5 01       	subx	#0x1,r5h
    140c:	92 00       	addx	#0x0,r2h
    140e:	00 01       	.word	H'0,H'1
    1410:	47 00       	beq	.0 (0x1412)
    1412:	00 0b       	.word	H'0,H'b
    1414:	3c 00       	mov.b	r4l,@0x0:8
    1416:	00 01       	.word	H'0,H'1
    1418:	82 01       	add.b	#0x1,r2h
    141a:	9c 00       	addx	#0x0,r4l
    141c:	00 03       	.word	H'0,H'3
    141e:	48 0c       	bvc	.+12 (0x142c)
    1420:	70 00       	bset	#0x0,r0h
    1422:	01 94       	.word	H'1,H'94
    1424:	00 00       	nop	
    1426:	01 4e       	.word	H'1,H'4e
    1428:	00 00       	nop	
    142a:	0b 0e       	adds	#1,er6
    142c:	0c 72       	mov.b	r7h,r2h
    142e:	65 74       	xor.w	r7,r4
    1430:	00 01       	.word	H'0,H'1
    1432:	95 00       	addx	#0x0,r5h
    1434:	00 01       	.word	H'0,H'1
    1436:	47 00       	beq	.0 (0x1438)
    1438:	00 0b       	.word	H'0,H'b
    143a:	48 0c       	bvc	.+12 (0x1448)
    143c:	69 00       	mov.w	@er0,r0
    143e:	01 95       	.word	H'1,H'95
    1440:	00 00       	nop	
    1442:	01 47       	.word	H'1,H'47
    1444:	00 00       	nop	
    1446:	0b 8d       	adds	#2,er5
    1448:	12 00       	rotxl.b	r0h
    144a:	00 04       	.word	H'0,H'4
    144c:	a4 01       	cmp.b	#0x1,r4h
    144e:	96 00       	addx	#0x0,r6h
    1450:	00 03       	.word	H'0,H'3
    1452:	48 02       	bvc	.+2 (0x1456)
    1454:	91 54       	addx	#0x54,r1h
    1456:	0d 00       	mov.w	r0,r0
    1458:	00 0b       	.word	H'0,H'b
    145a:	66 00       	and.w	r0,r0
    145c:	00 05       	.word	H'0,H'5
    145e:	fe 00       	mov.b	#0x0,r6l
    1460:	00 01       	.word	H'0,H'1
    1462:	c6 0e       	or.b	#0xe,r6h
    1464:	01 50       	.word	H'1,H'50
    1466:	02 76       	stc	sbr,er6
    1468:	5c 0e       	.word	H'5c,H'e
    146a:	01 51       	.word	H'1,H'51
    146c:	05 03       	xorc	#0x3,ccr
    146e:	00 00       	nop	
    1470:	0f 00       	daa	r0h
    1472:	0e 01       	addx	r0h,r1h
    1474:	52 01       	mulxu.w	r0,er1
    1476:	4c 00       	bge	.0 (0x1478)
    1478:	0d 00       	mov.w	r0,r0
    147a:	00 0b       	.word	H'0,H'b
    147c:	8a 00       	add.b	#0x0,r2l
    147e:	00 05       	.word	H'0,H'5
    1480:	f3 00       	mov.b	#0x0,r3h
    1482:	00 01       	.word	H'0,H'1
    1484:	dd 0e       	xor.b	#0xe,r5l
    1486:	01 50       	.word	H'1,H'50
    1488:	05 03       	xorc	#0x3,ccr
    148a:	00 00       	nop	
    148c:	10 1d       	shll.w	e5
    148e:	00 0d       	.word	H'0,H'd
    1490:	00 00       	nop	
    1492:	0b 92       	adds	#4,er2
    1494:	00 00       	nop	
    1496:	06 0d       	andc	#0xd,ccr
    1498:	00 00       	nop	
    149a:	01 f6       	.word	H'1,H'f6
    149c:	0e 01       	addx	r0h,r1h
    149e:	50 02       	mulxu.b	r0h,r2
    14a0:	75 00       	bxor	#0x0,r0h
    14a2:	0e 01       	addx	r0h,r1h
    14a4:	51 01       	divxu.b	r0h,r1
    14a6:	30 00       	mov.b	r0h,@0x0:8
    14a8:	0d 00       	mov.w	r0,r0
    14aa:	00 0b       	.word	H'0,H'b
    14ac:	9c 00       	addx	#0x0,r4l
    14ae:	00 05       	.word	H'0,H'5
    14b0:	f3 00       	mov.b	#0x0,r3h
    14b2:	00 02       	.word	H'0,H'2
    14b4:	0d 0e       	mov.w	r0,e6
    14b6:	01 50       	.word	H'1,H'50
    14b8:	05 03       	xorc	#0x3,ccr
    14ba:	00 00       	nop	
    14bc:	10 32       	shll.l	er2
    14be:	00 13       	.word	H'0,H'13
    14c0:	00 00       	nop	
    14c2:	0b ac       	.word	H'b,H'ac
    14c4:	03 76       	ldc	er6,sbr
    14c6:	58 06       	.word	H'58,H'6
    14c8:	00 00       	nop	
    14ca:	02 21       	stmac	mach,er1
    14cc:	0e 01       	addx	r0h,r1h
    14ce:	50 02       	mulxu.b	r0h,r2
    14d0:	74 00       	bor	#0x0,r0h
    14d2:	00 0d       	.word	H'0,H'd
    14d4:	00 00       	nop	
    14d6:	0b c2       	.word	H'b,H'c2
    14d8:	00 00       	nop	
    14da:	06 0d       	andc	#0xd,ccr
    14dc:	00 00       	nop	
    14de:	02 3a       	stmac	macl,er2
    14e0:	0e 01       	addx	r0h,r1h
    14e2:	50 02       	mulxu.b	r0h,r2
    14e4:	74 00       	bor	#0x0,r0h
    14e6:	0e 01       	addx	r0h,r1h
    14e8:	51 01       	divxu.b	r0h,r1
    14ea:	38 00       	mov.b	r0l,@0x0:8
    14ec:	0d 00       	mov.w	r0,r0
    14ee:	00 0b       	.word	H'0,H'b
    14f0:	cc 00       	or.b	#0x0,r4l
    14f2:	00 05       	.word	H'0,H'5
    14f4:	f3 00       	mov.b	#0x0,r3h
    14f6:	00 02       	.word	H'0,H'2
    14f8:	51 0e       	divxu.b	r0h,e6
    14fa:	01 50       	.word	H'1,H'50
    14fc:	05 03       	xorc	#0x3,ccr
    14fe:	00 00       	nop	
    1500:	0f fb       	mov.l	#0x7,er3
    1502:	00 0d       	.word	H'0,H'd
    1504:	00 00       	nop	
    1506:	0b e0       	.word	H'b,H'e0
    1508:	00 00       	nop	
    150a:	05 f3       	xorc	#0xf3,ccr
    150c:	00 00       	nop	
    150e:	02 68       	stc	vbr,er0
    1510:	0e 01       	addx	r0h,r1h
    1512:	50 05       	mulxu.b	r0h,r5
    1514:	03 00       	ldc	r0h,ccr
    1516:	00 10       	.word	H'0,H'10
    1518:	44 00       	bcc	.0 (0x151a)
    151a:	13 00       	rotxr.b	r0h
    151c:	00 0b       	.word	H'0,H'b
    151e:	fa 03       	mov.b	#0x3,r2l
    1520:	76 58       	band	#0x5,r0l
    1522:	06 00       	andc	#0x0,ccr
    1524:	00 02       	.word	H'0,H'2
    1526:	7c 0e       	.word	H'7c,H'e
    1528:	01 50       	.word	H'1,H'50
    152a:	02 74       	stc	sbr,er4
    152c:	00 00       	nop	
    152e:	0d 00       	mov.w	r0,r0
    1530:	00 0c       	.word	H'0,H'c
    1532:	0e 00       	addx	r0h,r0h
    1534:	00 05       	.word	H'0,H'5
    1536:	f3 00       	mov.b	#0x0,r3h
    1538:	00 02       	.word	H'0,H'2
    153a:	93 0e       	addx	#0xe,r3h
    153c:	01 50       	.word	H'1,H'50
    153e:	05 03       	xorc	#0x3,ccr
    1540:	00 00       	nop	
    1542:	10 57       	shll.w	#2,r7
    1544:	00 0d       	.word	H'0,H'd
    1546:	00 00       	nop	
    1548:	0c 18       	mov.b	r1h,r0l
    154a:	00 00       	nop	
    154c:	06 0d       	andc	#0xd,ccr
    154e:	00 00       	nop	
    1550:	02 ac       	stmac	mach,er4
    1552:	0e 01       	addx	r0h,r1h
    1554:	50 02       	mulxu.b	r0h,r2
    1556:	74 00       	bor	#0x0,r0h
    1558:	0e 01       	addx	r0h,r1h
    155a:	51 01       	divxu.b	r0h,r1
    155c:	38 00       	mov.b	r0l,@0x0:8
    155e:	0d 00       	mov.w	r0,r0
    1560:	00 0c       	.word	H'0,H'c
    1562:	22 00       	mov.b	@0x0:8,r2h
    1564:	00 05       	.word	H'0,H'5
    1566:	f3 00       	mov.b	#0x0,r3h
    1568:	00 02       	.word	H'0,H'2
    156a:	c3 0e       	or.b	#0xe,r3h
    156c:	01 50       	.word	H'1,H'50
    156e:	05 03       	xorc	#0x3,ccr
    1570:	00 00       	nop	
    1572:	10 1b       	shll.w	e3
    1574:	00 0d       	.word	H'0,H'd
    1576:	00 00       	nop	
    1578:	0c 2e       	mov.b	r2h,r6l
    157a:	00 00       	nop	
    157c:	06 0d       	andc	#0xd,ccr
    157e:	00 00       	nop	
    1580:	02 d6       	.word	H'2,H'd6
    1582:	0e 01       	addx	r0h,r1h
    1584:	51 01       	divxu.b	r0h,r1
    1586:	38 00       	mov.b	r0l,@0x0:8
    1588:	0d 00       	mov.w	r0,r0
    158a:	00 0c       	.word	H'0,H'c
    158c:	38 00       	mov.b	r0l,@0x0:8
    158e:	00 05       	.word	H'0,H'5
    1590:	f3 00       	mov.b	#0x0,r3h
    1592:	00 02       	.word	H'0,H'2
    1594:	ed 0e       	and.b	#0xe,r5l
    1596:	01 50       	.word	H'1,H'50
    1598:	05 03       	xorc	#0x3,ccr
    159a:	00 00       	nop	
    159c:	0f 65       	mov.w	#0x6,r5
    159e:	00 0d       	.word	H'0,H'd
    15a0:	00 00       	nop	
    15a2:	0c 52       	mov.b	r5h,r2h
    15a4:	00 00       	nop	
    15a6:	06 0d       	andc	#0xd,ccr
    15a8:	00 00       	nop	
    15aa:	03 06       	ldc	r6h,ccr
    15ac:	0e 01       	addx	r0h,r1h
    15ae:	50 02       	mulxu.b	r0h,r2
    15b0:	74 00       	bor	#0x0,r0h
    15b2:	0e 01       	addx	r0h,r1h
    15b4:	51 01       	divxu.b	r0h,r1
    15b6:	38 00       	mov.b	r0l,@0x0:8
    15b8:	0d 00       	mov.w	r0,r0
    15ba:	00 0c       	.word	H'0,H'c
    15bc:	5c 00 00 05 	bsr	.+5 (0x15c5)
    15c0:	f3 00       	mov.b	#0x0,r3h
    15c2:	00 03       	.word	H'0,H'3
    15c4:	1d 0e       	cmp.w	r0,e6
    15c6:	01 50       	.word	H'1,H'50
    15c8:	05 03       	xorc	#0x3,ccr
    15ca:	00 00       	nop	
    15cc:	0f fb       	mov.l	#0x7,er3
    15ce:	00 0d       	.word	H'0,H'd
    15d0:	00 00       	nop	
    15d2:	0c 72       	mov.b	r7h,r2h
    15d4:	00 00       	nop	
    15d6:	05 f3       	xorc	#0xf3,ccr
    15d8:	00 00       	nop	
    15da:	03 34       	ldmac	er4,macl
    15dc:	0e 01       	addx	r0h,r1h
    15de:	50 05       	mulxu.b	r0h,r5
    15e0:	03 00       	ldc	r0h,ccr
    15e2:	00 0f       	.word	H'0,H'f
    15e4:	65 00       	xor.w	r0,r0
    15e6:	0f 00       	daa	r0h
    15e8:	00 0c       	.word	H'0,H'c
    15ea:	a6 00       	cmp.b	#0x0,r6h
    15ec:	00 05       	.word	H'0,H'5
    15ee:	f3 0e       	mov.b	#0xe,r3h
    15f0:	01 50       	.word	H'1,H'50
    15f2:	05 03       	xorc	#0x3,ccr
    15f4:	00 00       	nop	
    15f6:	10 04       	shll.b	r4h
    15f8:	00 00       	nop	
    15fa:	07 00       	ldc	#0x0,ccr
    15fc:	00 03       	.word	H'0,H'3
    15fe:	58 00       	.word	H'58,H'0
    1600:	00 03       	.word	H'0,H'3
    1602:	58 08       	.word	H'58,H'8
    1604:	00 00       	nop	
    1606:	00 63       	.word	H'0,H'63
    1608:	06 00       	andc	#0x0,ccr
    160a:	11 04       	shlr.b	r4h
    160c:	00 00       	nop	
    160e:	03 5e       	.word	H'3,H'5e
    1610:	14 00       	or.b	r0h,r0h
    1612:	00 00       	nop	
    1614:	53 00       	divxu.w	r0,er0
    1616:	00 03       	.word	H'0,H'3
    1618:	6d 15       	mov.w	@er1+,r5
    161a:	00 00       	nop	
    161c:	01 4e       	.word	H'1,H'4e
    161e:	00 16       	.word	H'0,H'16
    1620:	00 00       	nop	
    1622:	04 5f       	orc	#0x5f,ccr
    1624:	01 90       	.word	H'1,H'90
    1626:	00 00       	nop	
    1628:	00 53       	.word	H'0,H'53
    162a:	00 00       	nop	
    162c:	0a 12       	add.w	#0x1,r2
    162e:	00 00       	nop	
    1630:	00 0e       	.word	H'0,H'e
    1632:	01 9c       	.word	H'1,H'9c
    1634:	00 00       	nop	
    1636:	03 96       	.word	H'3,H'96
    1638:	17 00       	not.b	r0h
    163a:	00 03       	.word	H'0,H'3
    163c:	00 01       	.word	H'0,H'1
    163e:	90 00       	addx	#0x0,r0h
    1640:	00 01       	.word	H'0,H'1
    1642:	4e 00       	bgt	.0 (0x1644)
    1644:	00 0b       	.word	H'0,H'b
    1646:	c4 00       	or.b	#0x0,r4h
    1648:	16 00       	and.b	r0h,r0h
    164a:	00 04       	.word	H'0,H'4
    164c:	27 01       	mov.b	@0x1:8,r7h
    164e:	8f 00       	add.b	#0x0,r7l
    1650:	00 00       	nop	
    1652:	53 00       	divxu.w	r0,er0
    1654:	00 0a       	.word	H'0,H'a
    1656:	06 00       	andc	#0x0,ccr
    1658:	00 00       	nop	
    165a:	0c 01       	mov.b	r0h,r1h
    165c:	9c 00       	addx	#0x0,r4l
    165e:	00 03       	.word	H'0,H'3
    1660:	bd 18       	subx	#0x18,r5l
    1662:	00 00       	nop	
    1664:	03 00       	ldc	r0h,ccr
    1666:	01 8f       	.word	H'1,H'8f
    1668:	00 00       	nop	
    166a:	01 4e       	.word	H'1,H'4e
    166c:	01 50       	.word	H'1,H'50
    166e:	00 16       	.word	H'0,H'16
    1670:	00 00       	nop	
    1672:	04 16       	orc	#0x16,ccr
    1674:	01 8e       	.word	H'1,H'8e
    1676:	00 00       	nop	
    1678:	00 53       	.word	H'0,H'53
    167a:	00 00       	nop	
    167c:	09 f6       	add.w	e7,r6
    167e:	00 00       	nop	
    1680:	00 10       	.word	H'0,H'10
    1682:	01 9c       	.word	H'1,H'9c
    1684:	00 00       	nop	
    1686:	03 e6       	.word	H'3,H'e6
    1688:	17 00       	not.b	r0h
    168a:	00 03       	.word	H'0,H'3
    168c:	00 01       	.word	H'0,H'1
    168e:	8e 00       	add.b	#0x0,r6l
    1690:	00 01       	.word	H'0,H'1
    1692:	4e 00       	bgt	.0 (0x1694)
    1694:	00 0b       	.word	H'0,H'b
    1696:	e5 00       	and.b	#0x0,r5h
    1698:	16 00       	and.b	r0h,r0h
    169a:	00 04       	.word	H'0,H'4
    169c:	05 01       	xorc	#0x1,ccr
    169e:	8d 00       	add.b	#0x0,r5l
    16a0:	00 00       	nop	
    16a2:	53 00       	divxu.w	r0,er0
    16a4:	00 09       	.word	H'0,H'9
    16a6:	e8 00       	and.b	#0x0,r0l
    16a8:	00 00       	nop	
    16aa:	0e 01       	addx	r0h,r1h
    16ac:	9c 00       	addx	#0x0,r4l
    16ae:	00 04       	.word	H'0,H'4
    16b0:	0f 17       	mov.w	#0x1,r7
    16b2:	00 00       	nop	
    16b4:	03 00       	ldc	r0h,ccr
    16b6:	01 8d       	.word	H'1,H'8d
    16b8:	00 00       	nop	
    16ba:	01 4e       	.word	H'1,H'4e
    16bc:	00 00       	nop	
    16be:	0c 06       	mov.b	r0h,r6h
    16c0:	00 16       	.word	H'0,H'16
    16c2:	00 00       	nop	
    16c4:	03 f4       	.word	H'3,H'f4
    16c6:	01 8c       	.word	H'1,H'8c
    16c8:	00 00       	nop	
    16ca:	00 53       	.word	H'0,H'53
    16cc:	00 00       	nop	
    16ce:	09 d6       	add.w	e5,r6
    16d0:	00 00       	nop	
    16d2:	00 12       	.word	H'0,H'12
    16d4:	01 9c       	.word	H'1,H'9c
    16d6:	00 00       	nop	
    16d8:	04 38       	orc	#0x38,ccr
    16da:	17 00       	not.b	r0h
    16dc:	00 03       	.word	H'0,H'3
    16de:	00 01       	.word	H'0,H'1
    16e0:	8c 00       	add.b	#0x0,r4l
    16e2:	00 01       	.word	H'0,H'1
    16e4:	4e 00       	bgt	.0 (0x16e6)
    16e6:	00 0c       	.word	H'0,H'c
    16e8:	27 00       	mov.b	@0x0:8,r7h
    16ea:	16 00       	and.b	r0h,r0h
    16ec:	00 04       	.word	H'0,H'4
    16ee:	3e 01       	mov.b	r6l,@0x1:8
    16f0:	8b 00       	add.b	#0x0,r3l
    16f2:	00 00       	nop	
    16f4:	53 00       	divxu.w	r0,er0
    16f6:	00 09       	.word	H'0,H'9
    16f8:	c4 00       	or.b	#0x0,r4h
    16fa:	00 00       	nop	
    16fc:	12 01       	rotxl.b	r1h
    16fe:	9c 00       	addx	#0x0,r4l
    1700:	00 04       	.word	H'0,H'4
    1702:	61 17       	bnot	r1h,r7h
    1704:	00 00       	nop	
    1706:	03 00       	ldc	r0h,ccr
    1708:	01 8b       	.word	H'1,H'8b
    170a:	00 00       	nop	
    170c:	01 4e       	.word	H'1,H'4e
    170e:	00 00       	nop	
    1710:	0c 48       	mov.b	r4h,r0l
    1712:	00 0b       	.word	H'0,H'b
    1714:	00 00       	nop	
    1716:	00 c1       	.word	H'0,H'c1
    1718:	01 67       	.word	H'1,H'67
    171a:	00 00       	nop	
    171c:	01 47       	.word	H'1,H'47
    171e:	00 00       	nop	
    1720:	0a 7c       	add.w	#0x7,e4
    1722:	00 00       	nop	
    1724:	00 c0       	.word	H'0,H'c0
    1726:	01 9c       	.word	H'1,H'9c
    1728:	00 00       	nop	
    172a:	05 96       	xorc	#0x96,ccr
    172c:	0c 70       	mov.b	r7h,r0h
    172e:	00 01       	.word	H'0,H'1
    1730:	69 00       	mov.w	@er0,r0
    1732:	00 01       	.word	H'0,H'1
    1734:	4e 00       	bgt	.0 (0x1736)
    1736:	00 0c       	.word	H'0,H'c
    1738:	69 19       	mov.w	@er1,e1
    173a:	65 72       	xor.w	r7,r2
    173c:	72 00       	bclr	#0x0,r0h
    173e:	01 6a       	.word	H'1,H'6a
    1740:	00 00       	nop	
    1742:	01 47       	.word	H'1,H'47
    1744:	01 1a       	.word	H'1,H'1a
    1746:	76 61       	band	#0x6,r1h
    1748:	6c 00       	mov.b	@er0+,r0h
    174a:	01 6b       	.word	H'1,H'6b
    174c:	00 00       	nop	
    174e:	00 e6       	.word	H'0,H'e6
    1750:	02 91       	.word	H'2,H'91
    1752:	70 1b       	bset	#0x1,r3l
    1754:	65 72       	xor.w	r7,r2
    1756:	72 00       	bclr	#0x0,r0h
    1758:	01 84       	.word	H'1,H'84
    175a:	00 00       	nop	
    175c:	0b 0c       	adds	#1,er4
    175e:	0d 00       	mov.w	r0,r0
    1760:	00 0a       	.word	H'0,H'a
    1762:	92 00       	addx	#0x0,r2h
    1764:	00 05       	.word	H'0,H'5
    1766:	f3 00       	mov.b	#0x0,r3h
    1768:	00 04       	.word	H'0,H'4
    176a:	c3 0e       	or.b	#0xe,r3h
    176c:	01 50       	.word	H'1,H'50
    176e:	05 03       	xorc	#0x3,ccr
    1770:	00 00       	nop	
    1772:	10 45       	shll.b	#2,r5h
    1774:	00 0d       	.word	H'0,H'd
    1776:	00 00       	nop	
    1778:	0a a2       	add.l	er2,er2
    177a:	00 00       	nop	
    177c:	06 0d       	andc	#0xd,ccr
    177e:	00 00       	nop	
    1780:	04 dc       	orc	#0xdc,ccr
    1782:	0e 01       	addx	r0h,r1h
    1784:	50 02       	mulxu.b	r0h,r2
    1786:	74 00       	bor	#0x0,r0h
    1788:	0e 01       	addx	r0h,r1h
    178a:	51 01       	divxu.b	r0h,r1
    178c:	38 00       	mov.b	r0l,@0x0:8
    178e:	0d 00       	mov.w	r0,r0
    1790:	00 0a       	.word	H'0,H'a
    1792:	b4 00       	subx	#0x0,r4h
    1794:	00 05       	.word	H'0,H'5
    1796:	96 00       	addx	#0x0,r6h
    1798:	00 04       	.word	H'0,H'4
    179a:	f6 0e       	mov.b	#0xe,r6h
    179c:	01 50       	.word	H'1,H'50
    179e:	02 74       	stc	sbr,er4
    17a0:	00 0e       	.word	H'0,H'e
    17a2:	01 51       	.word	H'1,H'51
    17a4:	02 76       	stc	sbr,er6
    17a6:	78 00       	.word	H'78,H'0
    17a8:	0d 00       	mov.w	r0,r0
    17aa:	00 0a       	.word	H'0,H'a
    17ac:	cc 00       	or.b	#0x0,r4l
    17ae:	00 05       	.word	H'0,H'5
    17b0:	96 00       	addx	#0x0,r6h
    17b2:	00 05       	.word	H'0,H'5
    17b4:	10 0e       	shll.b	r6l
    17b6:	01 50       	.word	H'1,H'50
    17b8:	02 74       	stc	sbr,er4
    17ba:	00 0e       	.word	H'0,H'e
    17bc:	01 51       	.word	H'1,H'51
    17be:	02 76       	stc	sbr,er6
    17c0:	78 00       	.word	H'78,H'0
    17c2:	0d 00       	mov.w	r0,r0
    17c4:	00 0a       	.word	H'0,H'a
    17c6:	e6 00       	and.b	#0x0,r6h
    17c8:	00 05       	.word	H'0,H'5
    17ca:	96 00       	addx	#0x0,r6h
    17cc:	00 05       	.word	H'0,H'5
    17ce:	2a 0e       	mov.b	@0xe:8,r2l
    17d0:	01 50       	.word	H'1,H'50
    17d2:	02 74       	stc	sbr,er4
    17d4:	00 0e       	.word	H'0,H'e
    17d6:	01 51       	.word	H'1,H'51
    17d8:	02 76       	stc	sbr,er6
    17da:	78 00       	.word	H'78,H'0
    17dc:	0d 00       	mov.w	r0,r0
    17de:	00 0a       	.word	H'0,H'a
    17e0:	f4 00       	mov.b	#0x0,r4h
    17e2:	00 05       	.word	H'0,H'5
    17e4:	f3 00       	mov.b	#0x0,r3h
    17e6:	00 05       	.word	H'0,H'5
    17e8:	41 0e       	brn	.+14 (0x17f8)
    17ea:	01 50       	.word	H'1,H'50
    17ec:	05 03       	xorc	#0x3,ccr
    17ee:	00 00       	nop	
    17f0:	0f fb       	mov.l	#0x7,er3
    17f2:	00 0d       	.word	H'0,H'd
    17f4:	00 00       	nop	
    17f6:	0b 08       	adds	#1,er0
    17f8:	00 00       	nop	
    17fa:	05 f3       	xorc	#0xf3,ccr
    17fc:	00 00       	nop	
    17fe:	05 58       	xorc	#0x58,ccr
    1800:	0e 01       	addx	r0h,r1h
    1802:	50 05       	mulxu.b	r0h,r5
    1804:	03 00       	ldc	r0h,ccr
    1806:	00 10       	.word	H'0,H'10
    1808:	04 00       	orc	#0x0,ccr
    180a:	0d 00       	mov.w	r0,r0
    180c:	00 0b       	.word	H'0,H'b
    180e:	16 00       	and.b	r0h,r0h
    1810:	00 05       	.word	H'0,H'5
    1812:	f3 00       	mov.b	#0x0,r3h
    1814:	00 05       	.word	H'0,H'5
    1816:	6f 0e 01 50 	mov.w	@(0x150:16,er0),e6
    181a:	05 03       	xorc	#0x3,ccr
    181c:	00 00       	nop	
    181e:	10 14       	shll.w	r4
    1820:	00 0d       	.word	H'0,H'd
    1822:	00 00       	nop	
    1824:	0b 22       	.word	H'b,H'22
    1826:	00 00       	nop	
    1828:	06 0d       	andc	#0xd,ccr
    182a:	00 00       	nop	
    182c:	05 82       	xorc	#0x82,ccr
    182e:	0e 01       	addx	r0h,r1h
    1830:	51 01       	divxu.b	r0h,r1
    1832:	38 00       	mov.b	r0l,@0x0:8
    1834:	0f 00       	daa	r0h
    1836:	00 0b       	.word	H'0,H'b
    1838:	2c 00       	mov.b	@0x0:8,r4l
    183a:	00 05       	.word	H'0,H'5
    183c:	f3 0e       	mov.b	#0xe,r3h
    183e:	01 50       	.word	H'1,H'50
    1840:	05 03       	xorc	#0x3,ccr
    1842:	00 00       	nop	
    1844:	0f 65       	mov.w	#0x6,r5
    1846:	00 00       	nop	
    1848:	16 00       	and.b	r0h,r0h
    184a:	00 04       	.word	H'0,H'4
    184c:	4f 01       	.word	H'4f,H'1
    184e:	4c 00       	bge	.0 (0x1850)
    1850:	00 01       	.word	H'0,H'1
    1852:	47 00       	beq	.0 (0x1854)
    1854:	00 09       	.word	H'0,H'9
    1856:	16 00       	and.b	r0h,r0h
    1858:	00 00       	nop	
    185a:	ae 01       	cmp.b	#0x1,r6l
    185c:	9c 00       	addx	#0x0,r4l
    185e:	00 05       	.word	H'0,H'5
    1860:	d8 1c       	xor.b	#0x1c,r0l
    1862:	70 00       	bset	#0x0,r0h
    1864:	01 4c       	.word	H'1,H'4c
    1866:	00 00       	nop	
    1868:	05 d8       	xorc	#0xd8,ccr
    186a:	00 00       	nop	
    186c:	0c 8a       	mov.b	r0l,r2l
    186e:	18 00       	sub.b	r0h,r0h
    1870:	00 04       	.word	H'0,H'4
    1872:	70 01       	bset	#0x0,r1h
    1874:	4c 00       	bge	.0 (0x1876)
    1876:	00 05       	.word	H'0,H'5
    1878:	d8 01       	xor.b	#0x1,r0l
    187a:	51 12       	divxu.b	r1h,r2
    187c:	00 00       	nop	
    187e:	04 75       	orc	#0x75,ccr
    1880:	01 4e       	.word	H'1,H'4e
    1882:	00 00       	nop	
    1884:	00 f1       	.word	H'0,H'f1
    1886:	02 91       	.word	H'2,H'91
    1888:	74 00       	bor	#0x0,r0h
    188a:	11 04       	shlr.b	r4h
    188c:	00 00       	nop	
    188e:	00 f1       	.word	H'0,H'f1
    1890:	1d 00       	cmp.w	r0,r0
    1892:	00 01       	.word	H'0,H'1
    1894:	45 01       	.word	H'45,H'1
    1896:	1c 00       	cmp.b	r0h,r0h
    1898:	00 01       	.word	H'0,H'1
    189a:	47 00       	beq	.0 (0x189c)
    189c:	00 0a       	.word	H'0,H'a
    189e:	20 00       	mov.b	@0x0:8,r0h
    18a0:	00 00       	nop	
    18a2:	5c 01       	.word	H'5c,H'1
    18a4:	9c 1e       	addx	#0x1e,r4l
    18a6:	00 00       	nop	
    18a8:	00 7c       	.word	H'0,H'7c
    18aa:	00 00       	nop	
    18ac:	00 7c       	.word	H'0,H'7c
    18ae:	03 0e       	ldc	r6l,ccr
    18b0:	1f 00       	das	r0h
    18b2:	00 04       	.word	H'0,H'4
    18b4:	84 00       	add.b	#0x0,r4h
    18b6:	00 04       	.word	H'0,H'4
    18b8:	7a 04 00 00 	mov.l	#0x4,er4
    18bc:	00 04 
    18be:	84 1e       	add.b	#0x1e,r4h
    18c0:	00 00       	nop	
    18c2:	01 03       	.word	H'1,H'3
    18c4:	00 00       	nop	
    18c6:	01 03       	.word	H'1,H'3
    18c8:	03 10       	ldc	r0h,exr
	...

Disassembly of section .debug_abbrev:

00000000 <.Ldebug_abbrev0>:
.Ldebug_abbrev0():
   0:	01 11       	.word	H'1,H'11
   2:	01 25       	.word	H'1,H'25
   4:	0e 13       	addx	r1h,r3h
   6:	0b 03       	adds	#1,er3
   8:	0e 1b       	addx	r1h,r3l
   a:	0e 10       	addx	r1h,r0h
   c:	17 00       	not.b	r0h
   e:	00 02       	.word	H'0,H'2
  10:	24 00       	mov.b	@0x0:8,r4h
  12:	0b 0b       	adds	#1,er3
  14:	3e 0b       	mov.b	r6l,@0xb:8
  16:	03 0e       	ldc	r6l,ccr
  18:	00 00       	nop	
  1a:	03 01       	ldc	r1h,ccr
  1c:	01 49       	.word	H'1,H'49
  1e:	13 01       	rotxr.b	r1h
  20:	13 00       	rotxr.b	r0h
  22:	00 04       	.word	H'0,H'4
  24:	21 00       	mov.b	@0x0:8,r1h
  26:	49 13       	.word	H'49,H'13
  28:	2f 0b       	mov.b	@0xb:8,r7l
  2a:	00 00       	nop	
  2c:	05 0f       	xorc	#0xf,ccr
  2e:	00 0b       	.word	H'0,H'b
  30:	0b 49       	.word	H'b,H'49
  32:	13 00       	rotxr.b	r0h
  34:	00 06       	.word	H'0,H'6
  36:	15 00       	xor.b	r0h,r0h
  38:	27 19       	mov.b	@0x19:8,r7h
  3a:	00 00       	nop	
  3c:	07 34       	ldc	#0x34,ccr
  3e:	00 03       	.word	H'0,H'3
  40:	0e 3a       	addx	r3h,r2l
  42:	0b 3b       	.word	H'b,H'3b
  44:	0b 49       	.word	H'b,H'49
  46:	13 3f       	.word	H'13,H'3f
  48:	19 02       	sub.w	r0,r2
  4a:	18 00       	sub.b	r0h,r0h
	...

0000004e <.Ldebug_abbrev0>:
  4e:	01 11       	.word	H'1,H'11
  50:	01 25       	.word	H'1,H'25
  52:	0e 13       	addx	r1h,r3h
  54:	0b 03       	adds	#1,er3
  56:	0e 1b       	addx	r1h,r3l
  58:	0e 55       	addx	r5h,r5h
  5a:	17 11       	not.w	r1
  5c:	01 10       	.word	H'1,H'10
  5e:	17 00       	not.b	r0h
  60:	00 02       	.word	H'0,H'2
  62:	24 00       	mov.b	@0x0:8,r4h
  64:	0b 0b       	adds	#1,er3
  66:	3e 0b       	mov.b	r6l,@0xb:8
  68:	03 0e       	ldc	r6l,ccr
  6a:	00 00       	nop	
  6c:	03 34       	ldmac	er4,macl
  6e:	00 03       	.word	H'0,H'3
  70:	0e 3a       	addx	r3h,r2l
  72:	0b 3b       	.word	H'b,H'3b
  74:	0b 49       	.word	H'b,H'49
  76:	13 3f       	.word	H'13,H'3f
  78:	19 3c       	sub.w	r3,e4
  7a:	19 00       	sub.w	r0,r0
  7c:	00 04       	.word	H'0,H'4
  7e:	2e 01       	mov.b	@0x1:8,r6l
  80:	3f 19       	mov.b	r7l,@0x19:8
  82:	03 0e       	ldc	r6l,ccr
  84:	3a 0b       	mov.b	r2l,@0xb:8
  86:	3b 0b       	mov.b	r3l,@0xb:8
  88:	27 19       	mov.b	@0x19:8,r7h
  8a:	49 13       	.word	H'49,H'13
  8c:	11 01       	shlr.b	r1h
  8e:	12 06       	rotxl.b	r6h
  90:	40 18       	bra	.+24 (0xaa)
  92:	97 42       	addx	#0x42,r7h
  94:	19 01       	sub.w	r0,r1
  96:	13 00       	rotxr.b	r0h
  98:	00 05       	.word	H'0,H'5
  9a:	34 00       	mov.b	r4h,@0x0:8
  9c:	03 08       	ldc	r0l,ccr
  9e:	3a 0b       	mov.b	r2l,@0xb:8
  a0:	3b 0b       	mov.b	r3l,@0xb:8
  a2:	49 13       	.word	H'49,H'13
  a4:	02 18       	stc	exr,r0l
  a6:	00 00       	nop	
  a8:	06 34       	andc	#0x34,ccr
  aa:	00 03       	.word	H'0,H'3
  ac:	0e 3a       	addx	r3h,r2l
  ae:	0b 3b       	.word	H'b,H'3b
  b0:	0b 49       	.word	H'b,H'49
  b2:	13 02       	rotxr.b	r2h
  b4:	18 00       	sub.b	r0h,r0h
  b6:	00 07       	.word	H'0,H'7
  b8:	34 00       	mov.b	r4h,@0x0:8
  ba:	03 0e       	ldc	r6l,ccr
  bc:	3a 0b       	mov.b	r2l,@0xb:8
  be:	3b 0b       	mov.b	r3l,@0xb:8
  c0:	49 13       	.word	H'49,H'13
  c2:	02 17       	stc	exr,r7h
  c4:	00 00       	nop	
  c6:	08 34       	add.b	r3h,r4h
  c8:	00 03       	.word	H'0,H'3
  ca:	08 3a       	add.b	r3h,r2l
  cc:	0b 3b       	.word	H'b,H'3b
  ce:	0b 49       	.word	H'b,H'49
  d0:	13 02       	rotxr.b	r2h
  d2:	17 00       	not.b	r0h
  d4:	00 09       	.word	H'0,H'9
  d6:	1d 01       	cmp.w	r0,r1
  d8:	31 13       	mov.b	r1h,@0x13:8
  da:	11 01       	shlr.b	r1h
  dc:	12 06       	rotxl.b	r6h
  de:	58 0b       	.word	H'58,H'b
  e0:	59 0b       	.word	H'59,H'b
  e2:	01 13       	.word	H'1,H'13
  e4:	00 00       	nop	
  e6:	0a 0b       	inc	r3l
  e8:	01 11       	.word	H'1,H'11
  ea:	01 12       	.word	H'1,H'12
  ec:	06 00       	andc	#0x0,ccr
  ee:	00 0b       	.word	H'0,H'b
  f0:	34 00       	mov.b	r4h,@0x0:8
  f2:	31 13       	mov.b	r1h,@0x13:8
  f4:	3c 19       	mov.b	r4l,@0x19:8
  f6:	00 00       	nop	
  f8:	0c 89       	mov.b	r0l,r1l
  fa:	82 01       	add.b	#0x1,r2h
  fc:	00 11       	.word	H'0,H'11
  fe:	01 31       	.word	H'1,H'31
 100:	13 00       	rotxr.b	r0h
 102:	00 0d       	.word	H'0,H'd
 104:	89 82       	add.b	#0x82,r1l
 106:	01 01       	.word	H'1,H'1
 108:	11 01       	shlr.b	r1h
 10a:	31 13       	mov.b	r1h,@0x13:8
 10c:	01 13       	.word	H'1,H'13
 10e:	00 00       	nop	
 110:	0e 8a       	addx	r0l,r2l
 112:	82 01       	add.b	#0x1,r2h
 114:	00 02       	.word	H'0,H'2
 116:	18 91       	sub.b	r1l,r1h
 118:	42 18       	bhi	.+24 (0x132)
 11a:	00 00       	nop	
 11c:	0f 34       	mov.w	#0x3,r4
 11e:	00 31       	.word	H'0,H'31
 120:	13 02       	rotxr.b	r2h
 122:	18 00       	sub.b	r0h,r0h
 124:	00 10       	.word	H'0,H'10
 126:	05 00       	xorc	#0x0,ccr
 128:	31 13       	mov.b	r1h,@0x13:8
 12a:	02 17       	stc	exr,r7h
 12c:	00 00       	nop	
 12e:	11 34       	shlr.l	er4
 130:	00 31       	.word	H'0,H'31
 132:	13 02       	rotxr.b	r2h
 134:	17 00       	not.b	r0h
 136:	00 12       	.word	H'0,H'12
 138:	89 82       	add.b	#0x82,r1l
 13a:	01 00       	.word	H'1,H'0
 13c:	11 01       	shlr.b	r1h
 13e:	93 42       	addx	#0x42,r3h
 140:	18 00       	sub.b	r0h,r0h
 142:	00 13       	.word	H'0,H'13
 144:	24 00       	mov.b	@0x0:8,r4h
 146:	0b 0b       	adds	#1,er3
 148:	3e 0b       	mov.b	r6l,@0xb:8
 14a:	03 08       	ldc	r0l,ccr
 14c:	00 00       	nop	
 14e:	14 01       	or.b	r0h,r1h
 150:	01 49       	.word	H'1,H'49
 152:	13 01       	rotxr.b	r1h
 154:	13 00       	rotxr.b	r0h
 156:	00 15       	.word	H'0,H'15
 158:	21 00       	mov.b	@0x0:8,r1h
 15a:	49 13       	.word	H'49,H'13
 15c:	2f 0b       	mov.b	@0xb:8,r7l
 15e:	00 00       	nop	
 160:	16 35       	and.b	r3h,r5h
 162:	00 49       	.word	H'0,H'49
 164:	13 00       	rotxr.b	r0h
 166:	00 17       	.word	H'0,H'17
 168:	0f 00       	daa	r0h
 16a:	0b 0b       	adds	#1,er3
 16c:	49 13       	.word	H'49,H'13
 16e:	00 00       	nop	
 170:	18 15       	sub.b	r1h,r5h
 172:	00 27       	.word	H'0,H'27
 174:	19 00       	sub.w	r0,r0
 176:	00 19       	.word	H'0,H'19
 178:	2e 01       	mov.b	@0x1:8,r6l
 17a:	03 0e       	ldc	r6l,ccr
 17c:	3a 0b       	mov.b	r2l,@0xb:8
 17e:	3b 0b       	mov.b	r3l,@0xb:8
 180:	20 0b       	mov.b	@0xb:8,r0h
 182:	01 13       	.word	H'1,H'13
 184:	00 00       	nop	
 186:	1a 34       	sub.w	#0x3,r4
 188:	00 03       	.word	H'0,H'3
 18a:	08 3a       	add.b	r3h,r2l
 18c:	0b 3b       	.word	H'b,H'3b
 18e:	0b 49       	.word	H'b,H'49
 190:	13 00       	rotxr.b	r0h
 192:	00 1b       	.word	H'0,H'1b
 194:	2e 01       	mov.b	@0x1:8,r6l
 196:	03 0e       	ldc	r6l,ccr
 198:	3a 0b       	mov.b	r2l,@0xb:8
 19a:	3b 0b       	mov.b	r3l,@0xb:8
 19c:	27 19       	mov.b	@0x19:8,r7h
 19e:	49 13       	.word	H'49,H'13
 1a0:	20 0b       	mov.b	@0xb:8,r0h
 1a2:	01 13       	.word	H'1,H'13
 1a4:	00 00       	nop	
 1a6:	1c 05       	cmp.b	r0h,r5h
 1a8:	00 03       	.word	H'0,H'3
 1aa:	08 3a       	add.b	r3h,r2l
 1ac:	0b 3b       	.word	H'b,H'3b
 1ae:	0b 49       	.word	H'b,H'49
 1b0:	13 00       	rotxr.b	r0h
 1b2:	00 1d       	.word	H'0,H'1d
 1b4:	05 00       	xorc	#0x0,ccr
 1b6:	03 0e       	ldc	r6l,ccr
 1b8:	3a 0b       	mov.b	r2l,@0xb:8
 1ba:	3b 0b       	mov.b	r3l,@0xb:8
 1bc:	49 13       	.word	H'49,H'13
 1be:	00 00       	nop	
 1c0:	1e 2e       	subx	r2h,r6l
 1c2:	00 3f       	.word	H'0,H'3f
 1c4:	19 3c       	sub.w	r3,e4
 1c6:	19 6e       	sub.w	r6,e6
 1c8:	0e 03       	addx	r0h,r3h
 1ca:	0e 3a       	addx	r3h,r2l
 1cc:	0b 3b       	.word	H'b,H'3b
 1ce:	0b 00       	adds	#1,er0
	...

000001d2 <.Ldebug_abbrev0>:
 1d2:	01 11       	.word	H'1,H'11
 1d4:	01 25       	.word	H'1,H'25
 1d6:	0e 13       	addx	r1h,r3h
 1d8:	0b 03       	adds	#1,er3
 1da:	0e 1b       	addx	r1h,r3l
 1dc:	0e 11       	addx	r1h,r1h
 1de:	01 12       	.word	H'1,H'12
 1e0:	06 10       	andc	#0x10,ccr
 1e2:	17 00       	not.b	r0h
 1e4:	00 02       	.word	H'0,H'2
 1e6:	24 00       	mov.b	@0x0:8,r4h
 1e8:	0b 0b       	adds	#1,er3
 1ea:	3e 0b       	mov.b	r6l,@0xb:8
 1ec:	03 0e       	ldc	r6l,ccr
 1ee:	00 00       	nop	
 1f0:	03 34       	ldmac	er4,macl
 1f2:	00 03       	.word	H'0,H'3
 1f4:	0e 3a       	addx	r3h,r2l
 1f6:	0b 3b       	.word	H'b,H'3b
 1f8:	0b 49       	.word	H'b,H'49
 1fa:	13 3f       	.word	H'13,H'3f
 1fc:	19 3c       	sub.w	r3,e4
 1fe:	19 00       	sub.w	r0,r0
 200:	00 04       	.word	H'0,H'4
 202:	16 00       	and.b	r0h,r0h
 204:	03 0e       	ldc	r6l,ccr
 206:	3a 0b       	mov.b	r2l,@0xb:8
 208:	3b 0b       	mov.b	r3l,@0xb:8
 20a:	49 13       	.word	H'49,H'13
 20c:	00 00       	nop	
 20e:	05 0f       	xorc	#0xf,ccr
 210:	00 0b       	.word	H'0,H'b
 212:	0b 49       	.word	H'b,H'49
 214:	13 00       	rotxr.b	r0h
 216:	00 06       	.word	H'0,H'6
 218:	15 01       	xor.b	r0h,r1h
 21a:	27 19       	mov.b	@0x19:8,r7h
 21c:	01 13       	.word	H'1,H'13
 21e:	00 00       	nop	
 220:	07 05       	ldc	#0x5,ccr
 222:	00 49       	.word	H'0,H'49
 224:	13 00       	rotxr.b	r0h
 226:	00 08       	.word	H'0,H'8
 228:	2e 01       	mov.b	@0x1:8,r6l
 22a:	3f 19       	mov.b	r7l,@0x19:8
 22c:	03 0e       	ldc	r6l,ccr
 22e:	3a 0b       	mov.b	r2l,@0xb:8
 230:	3b 0b       	mov.b	r3l,@0xb:8
 232:	27 19       	mov.b	@0x19:8,r7h
 234:	11 01       	shlr.b	r1h
 236:	12 06       	rotxl.b	r6h
 238:	40 18       	bra	.+24 (0x252)
 23a:	97 42       	addx	#0x42,r7h
 23c:	19 01       	sub.w	r0,r1
 23e:	13 00       	rotxr.b	r0h
 240:	00 09       	.word	H'0,H'9
 242:	05 00       	xorc	#0x0,ccr
 244:	03 0e       	ldc	r6l,ccr
 246:	3a 0b       	mov.b	r2l,@0xb:8
 248:	3b 0b       	mov.b	r3l,@0xb:8
 24a:	49 13       	.word	H'49,H'13
 24c:	02 17       	stc	exr,r7h
 24e:	00 00       	nop	
 250:	0a 05       	inc	r5h
 252:	00 03       	.word	H'0,H'3
 254:	08 3a       	add.b	r3h,r2l
 256:	0b 3b       	.word	H'b,H'3b
 258:	0b 49       	.word	H'b,H'49
 25a:	13 02       	rotxr.b	r2h
 25c:	17 00       	not.b	r0h
 25e:	00 0b       	.word	H'0,H'b
 260:	34 00       	mov.b	r4h,@0x0:8
 262:	03 0e       	ldc	r6l,ccr
 264:	3a 0b       	mov.b	r2l,@0xb:8
 266:	3b 0b       	mov.b	r3l,@0xb:8
 268:	49 13       	.word	H'49,H'13
 26a:	02 17       	stc	exr,r7h
 26c:	00 00       	nop	
 26e:	0c 89       	mov.b	r0l,r1l
 270:	82 01       	add.b	#0x1,r2h
 272:	01 11       	.word	H'1,H'11
 274:	01 00       	.word	H'1,H'0
 276:	00 0d       	.word	H'0,H'd
 278:	8a 82       	add.b	#0x82,r2l
 27a:	01 00       	.word	H'1,H'0
 27c:	02 18       	stc	exr,r0l
 27e:	91 42       	addx	#0x42,r1h
 280:	18 00       	sub.b	r0h,r0h
 282:	00 0e       	.word	H'0,H'e
 284:	2e 01       	mov.b	@0x1:8,r6l
 286:	3f 19       	mov.b	r7l,@0x19:8
 288:	03 0e       	ldc	r6l,ccr
 28a:	3a 0b       	mov.b	r2l,@0xb:8
 28c:	3b 0b       	mov.b	r3l,@0xb:8
 28e:	27 19       	mov.b	@0x19:8,r7h
 290:	49 13       	.word	H'49,H'13
 292:	20 0b       	mov.b	@0xb:8,r0h
 294:	01 13       	.word	H'1,H'13
 296:	00 00       	nop	
 298:	0f 05       	daa	r5h
 29a:	00 03       	.word	H'0,H'3
 29c:	0e 3a       	addx	r3h,r2l
 29e:	0b 3b       	.word	H'b,H'3b
 2a0:	0b 49       	.word	H'b,H'49
 2a2:	13 00       	rotxr.b	r0h
 2a4:	00 10       	.word	H'0,H'10
 2a6:	24 00       	mov.b	@0x0:8,r4h
 2a8:	0b 0b       	adds	#1,er3
 2aa:	3e 0b       	mov.b	r6l,@0xb:8
 2ac:	03 08       	ldc	r0l,ccr
 2ae:	00 00       	nop	
softvec_init():
/home/interrupt.c:7
{
 2b0:	11 2e       	shlr.w	#4,e6
 2b2:	01 3f       	.word	H'1,H'3f
 2b4:	19 03       	sub.w	r0,r3
softvec_setintr():
/home/interrupt.c:17
  SOFTVECS[type] = handler;
 2b6:	0e 3a       	addx	r3h,r2l
 2b8:	0b 3b       	.word	H'b,H'3b
 2ba:	0b 27       	.word	H'b,H'27
 2bc:	19 49       	sub.w	r4,e1
 2be:	13 11       	rotxr.w	r1
 2c0:	01 12       	.word	H'1,H'12
 2c2:	06 40       	andc	#0x40,ccr
 2c4:	18 97       	sub.b	r1l,r7h
 2c6:	42 19       	.word	H'42,H'19
 2c8:	01 13       	.word	H'1,H'13
 2ca:	00 00       	nop	
 2cc:	12 1d       	rotxl.w	e5
 2ce:	01 31       	.word	H'1,H'31
 2d0:	13 11       	rotxr.w	r1
 2d2:	01 12       	.word	H'1,H'12
 2d4:	06 58       	andc	#0x58,ccr
 2d6:	0b 59       	inc.w	#1,e1
 2d8:	0b 00       	adds	#1,er0
 2da:	00 13       	.word	H'0,H'13
 2dc:	05 00       	xorc	#0x0,ccr
 2de:	31 13       	mov.b	r1h,@0x13:8
 2e0:	02 17       	stc	exr,r7h
 2e2:	00 00       	nop	
 2e4:	14 2e       	or.b	r2h,r6l
 2e6:	01 31       	.word	H'1,H'31
 2e8:	13 11       	rotxr.w	r1
 2ea:	01 12       	.word	H'1,H'12
 2ec:	06 40       	andc	#0x40,ccr
 2ee:	18 97       	sub.b	r1l,r7h
 2f0:	42 19       	.word	H'42,H'19
 2f2:	00 00       	nop	
 2f4:	15 05       	xor.b	r0h,r5h
 2f6:	00 31       	.word	H'0,H'31
 2f8:	13 02       	rotxr.b	r2h
 2fa:	18 00       	sub.b	r0h,r0h
	...

000002fe <.Ldebug_abbrev0>:
.Ldebug_abbrev0():
 2fe:	01 11       	.word	H'1,H'11
softvec_setintr():
/home/interrupt.c:17
 300:	01 25       	.word	H'1,H'25
 302:	0e 13       	addx	r1h,r3h
 304:	0b 03       	adds	#1,er3
 306:	0e 1b       	addx	r1h,r3l
 308:	0e 11       	addx	r1h,r1h
 30a:	01 12       	.word	H'1,H'12
 30c:	06 10       	andc	#0x10,ccr
 30e:	17 00       	not.b	r0h
 310:	00 02       	.word	H'0,H'2
 312:	24 00       	mov.b	@0x0:8,r4h
 314:	0b 0b       	adds	#1,er3
 316:	3e 0b       	mov.b	r6l,@0xb:8
 318:	03 0e       	ldc	r6l,ccr
 31a:	00 00       	nop	
 31c:	03 2e       	ldmac	er6,mach
 31e:	01 3f       	.word	H'1,H'3f
 320:	19 03       	sub.w	r0,r3
 322:	0e 3a       	addx	r3h,r2l
 324:	0b 3b       	.word	H'b,H'3b
 326:	0b 27       	.word	H'b,H'27
 328:	19 49       	sub.w	r4,e1
 32a:	13 11       	rotxr.w	r1
 32c:	01 12       	.word	H'1,H'12
 32e:	06 40       	andc	#0x40,ccr
softvec_init():
/home/interrupt.c:12
}
 330:	18 97       	sub.b	r1l,r7h
 332:	42 19       	.word	H'42,H'19
 334:	01 13       	.word	H'1,H'13
 336:	00 00       	nop	
softvec_setintr():
/home/interrupt.c:16
{
 338:	04 05       	orc	#0x5,ccr
 33a:	00 03       	.word	H'0,H'3
 33c:	0e 3a       	addx	r3h,r2l
/home/interrupt.c:17
  SOFTVECS[type] = handler;
 33e:	0b 3b       	.word	H'b,H'3b
 340:	0b 49       	.word	H'b,H'49
 342:	13 02       	rotxr.b	r2h
 344:	17 00       	not.b	r0h
 346:	00 05       	.word	H'0,H'5
 348:	34 00       	mov.b	r4h,@0x0:8
 34a:	03 08       	ldc	r0l,ccr
 34c:	3a 0b       	mov.b	r2l,@0xb:8
/home/interrupt.c:19
}
 34e:	3b 0b       	mov.b	r3l,@0xb:8
 350:	49 13       	.word	H'49,H'13
 352:	02 18       	stc	exr,r0l
 354:	00 00       	nop	
interrupt():
/home/interrupt.c:26
{
 356:	06 34       	andc	#0x34,ccr
 358:	00 03       	.word	H'0,H'3
 35a:	08 3a       	add.b	r3h,r2l
/home/interrupt.c:27
  softvec_handler_t handler = SOFTVECS[type];
 35c:	0b 3b       	.word	H'b,H'3b
 35e:	0b 49       	.word	H'b,H'49
 360:	13 02       	rotxr.b	r2h
 362:	17 00       	not.b	r0h
 364:	00 07       	.word	H'0,H'7
 366:	89 82       	add.b	#0x82,r1l
 368:	01 00       	.word	H'1,H'0
 36a:	11 01       	shlr.b	r1h
 36c:	31 13       	mov.b	r1h,@0x13:8
/home/interrupt.c:28
  if (handler)
 36e:	00 00       	nop	
/home/interrupt.c:29
    handler(type, sp);
 370:	08 24       	add.b	r2h,r4h
/home/interrupt.c:30
}
 372:	00 0b       	.word	H'0,H'b
 374:	0b 3e       	.word	H'b,H'3e
 376:	0b 03       	adds	#1,er3
memset():
/home/lib.c:6
{
 378:	08 00       	add.b	r0h,r0h
 37a:	00 09       	.word	H'0,H'9
 37c:	01 01       	.word	H'1,H'1
 37e:	49 13       	.word	H'49,H'13
 380:	01 13       	.word	H'1,H'13
/home/lib.c:8
  for (p = b; len > 0; len--)
 382:	00 00       	nop	
 384:	0a 21       	add.w	#0x2,r1
 386:	00 49       	.word	H'0,H'49
/home/lib.c:9 (discriminator 3)
    *(p++) = c;
 388:	13 2f       	.word	H'13,H'2f
 38a:	0b 00       	adds	#1,er0
 38c:	00 0b       	.word	H'0,H'b
 38e:	26 00       	mov.b	@0x0:8,r6h
/home/lib.c:8 (discriminator 1)
  for (p = b; len > 0; len--)
 390:	49 13       	.word	H'49,H'13
 392:	00 00       	nop	
/home/lib.c:11
}
 394:	0c 0f       	mov.b	r0h,r7l
 396:	00 0b       	.word	H'0,H'b
 398:	0b 49       	.word	H'b,H'49
 39a:	13 00       	rotxr.b	r0h
 39c:	00 0d       	.word	H'0,H'd
memcpy():
/home/lib.c:14
{
 39e:	05 00       	xorc	#0x0,ccr
 3a0:	03 08       	ldc	r0l,ccr
 3a2:	3a 0b       	mov.b	r2l,@0xb:8
 3a4:	3b 0b       	mov.b	r3l,@0xb:8
 3a6:	49 13       	.word	H'49,H'13
 3a8:	02 17       	stc	exr,r7h
 3aa:	00 00       	nop	
/home/lib.c:17
  for (; len > 0; len--)
 3ac:	0e 89       	addx	r0l,r1l
 3ae:	82 01       	add.b	#0x1,r2h
/home/lib.c:18 (discriminator 2)
    *(d++) = *(s++);
 3b0:	01 11       	.word	H'1,H'11
 3b2:	01 31       	.word	H'1,H'31
 3b4:	13 01       	rotxr.b	r1h
 3b6:	13 00       	rotxr.b	r0h
 3b8:	00 0f       	.word	H'0,H'f
 3ba:	8a 82       	add.b	#0x82,r2l
 3bc:	01 00       	.word	H'1,H'0
 3be:	02 18       	stc	exr,r0l
 3c0:	91 42       	addx	#0x42,r1h
/home/lib.c:17 (discriminator 1)
  for (; len > 0; len--)
 3c2:	18 00       	sub.b	r0h,r0h
 3c4:	00 10       	.word	H'0,H'10
/home/lib.c:20
}
 3c6:	89 82       	add.b	#0x82,r1l
 3c8:	01 01       	.word	H'1,H'1
 3ca:	11 01       	shlr.b	r1h
 3cc:	31 13       	mov.b	r1h,@0x13:8
 3ce:	00 00       	nop	
 3d0:	11 26       	shlr.w	#4,r6
 3d2:	00 00       	nop	
memcmp():
/home/lib.c:23
{
 3d4:	00 12       	.word	H'0,H'12
 3d6:	05 00       	xorc	#0x0,ccr
 3d8:	03 08       	ldc	r0l,ccr
 3da:	3a 0b       	mov.b	r2l,@0xb:8
 3dc:	3b 0b       	mov.b	r3l,@0xb:8
 3de:	49 13       	.word	H'49,H'13
/home/lib.c:25
  for (; len > 0; len--) {
 3e0:	02 18       	stc	exr,r0l
/home/lib.c:26
    if (*p1 != *p2)
 3e2:	00 00       	nop	
 3e4:	13 0f       	rotxr.b	r7l
 3e6:	00 0b       	.word	H'0,H'b
 3e8:	0b 00       	adds	#1,er0
/home/lib.c:27
      return (*p1 > *p2) ? 1 : -1;
 3ea:	00 14       	.word	H'0,H'14
 3ec:	2e 00       	mov.b	@0x0:8,r6l
 3ee:	3f 19       	mov.b	r7l,@0x19:8
 3f0:	3c 19       	mov.b	r4l,@0x19:8
/home/lib.c:28
    p1++;
 3f2:	6e 0e 03 0e 	mov.b	@(0x30e:16,er0),r6l
/home/lib.c:29
    p2++;
 3f6:	3a 0b       	mov.b	r2l,@0xb:8
 3f8:	3b 0b       	mov.b	r3l,@0xb:8
/home/lib.c:25 (discriminator 1)
  for (; len > 0; len--) {
 3fa:	00 00       	nop	
	...

000003fd <.Ldebug_abbrev0>:
.Ldebug_abbrev0():
 3fd:	01 11       	.word	H'1,H'11
memcmp():
/home/lib.c:31
  return 0;
 3ff:	01 25       	.word	H'1,H'25
 401:	0e 13       	addx	r1h,r3h
/home/lib.c:27
      return (*p1 > *p2) ? 1 : -1;
 403:	0b 03       	adds	#1,er3
 405:	0e 1b       	addx	r1h,r3l
/home/lib.c:32
}
 407:	0e 11       	addx	r1h,r1h
 409:	01 12       	.word	H'1,H'12
 40b:	06 10       	andc	#0x10,ccr
 40d:	17 00       	not.b	r0h
 40f:	00 02       	.word	H'0,H'2
strlen():
/home/lib.c:35
{
 411:	16 00       	and.b	r0h,r0h
 413:	03 0e       	ldc	r6l,ccr
 415:	3a 0b       	mov.b	r2l,@0xb:8
/home/lib.c:37
  for (len = 0; *s; s++, len++)
 417:	3b 0b       	mov.b	r3l,@0xb:8
 419:	49 13       	.word	H'49,H'13
/home/lib.c:37 (discriminator 3)
 41b:	00 00       	nop	
 41d:	03 35       	ldmac	er5,macl
/home/lib.c:37 (discriminator 1)
 41f:	00 49       	.word	H'0,H'49
 421:	13 00       	rotxr.b	r0h
/home/lib.c:40
}
 423:	00 04       	.word	H'0,H'4
 425:	24 00       	mov.b	@0x0:8,r4h
 427:	0b 0b       	adds	#1,er3
 429:	3e 0b       	mov.b	r6l,@0xb:8
strcpy():
/home/lib.c:43
{
 42b:	03 0e       	ldc	r6l,ccr
 42d:	00 00       	nop	
 42f:	05 13       	xorc	#0x13,ccr
 431:	01 03       	.word	H'1,H'3
/home/lib.c:46
    *dst = *src;
 433:	0e 0b       	addx	r0h,r3l
 435:	0b 3a       	.word	H'b,H'3a
/home/lib.c:47
    if (!*src) break;
 437:	0b 3b       	.word	H'b,H'3b
 439:	0b 01       	adds	#1,er1
/home/lib.c:45
  for (;; dst++, src++) {
 43b:	13 00       	rotxr.b	r0h
 43d:	00 06       	.word	H'0,H'6
/home/lib.c:46
    *dst = *src;
 43f:	0d 00       	mov.w	r0,r0
/home/lib.c:50
}
 441:	03 08       	ldc	r0l,ccr
 443:	3a 0b       	mov.b	r2l,@0xb:8
 445:	3b 0b       	mov.b	r3l,@0xb:8
strcmp():
/home/lib.c:53
{
 447:	49 13       	.word	H'49,H'13
 449:	38 0b       	mov.b	r0l,@0xb:8
 44b:	00 00       	nop	
/home/lib.c:54
  while (*s1 || *s2) {
 44d:	07 0d       	ldc	#0xd,ccr
/home/lib.c:55
    if (*s1 != *s2)
 44f:	00 03       	.word	H'0,H'3
 451:	0e 3a       	addx	r3h,r2l
/home/lib.c:56
      return (*s1 > *s2) ? 1 : -1;
 453:	0b 3b       	.word	H'b,H'3b
 455:	0b 49       	.word	H'b,H'49
 457:	13 38       	.word	H'13,H'38
 459:	0b 00       	adds	#1,er0
/home/lib.c:57
    s1++;
 45b:	00 08       	.word	H'0,H'8
/home/lib.c:58
    s2++;
 45d:	13 01       	rotxr.b	r1h
/home/lib.c:54
  while (*s1 || *s2) {
 45f:	0b 0b       	adds	#1,er3
 461:	3a 0b       	mov.b	r2l,@0xb:8
 463:	3b 0b       	mov.b	r3l,@0xb:8
 465:	01 13       	.word	H'1,H'13
/home/lib.c:54 (discriminator 1)
 467:	00 00       	nop	
 469:	09 0f       	add.w	r0,e7
 46b:	00 0b       	.word	H'0,H'b
 46d:	0b 49       	.word	H'b,H'49
 46f:	13 00       	rotxr.b	r0h
 471:	00 0a       	.word	H'0,H'a
 473:	01 01       	.word	H'1,H'1
/home/lib.c:56
      return (*s1 > *s2) ? 1 : -1;
 475:	49 13       	.word	H'49,H'13
 477:	01 13       	.word	H'1,H'13
/home/lib.c:61
}
 479:	00 00       	nop	
 47b:	0b 21       	.word	H'b,H'21
 47d:	00 49       	.word	H'0,H'49
strncmp():
/home/lib.c:64
{
 47f:	13 2f       	.word	H'13,H'2f
 481:	0b 00       	adds	#1,er0
 483:	00 0c       	.word	H'0,H'c
 485:	34 00       	mov.b	r4h,@0x0:8
 487:	03 0e       	ldc	r6l,ccr
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 489:	3a 0b       	mov.b	r2l,@0xb:8
/home/lib.c:66
    if (*s1 != *s2)
 48b:	3b 0b       	mov.b	r3l,@0xb:8
 48d:	49 13       	.word	H'49,H'13
 48f:	02 18       	stc	exr,r0l
/home/lib.c:67
      return (*s1 > *s2) ? 1 : -1;
 491:	00 00       	nop	
 493:	0d 2e       	mov.w	r2,e6
 495:	01 3f       	.word	H'1,H'3f
 497:	19 03       	sub.w	r0,r3
/home/lib.c:68
    s1++;
 499:	0e 3a       	addx	r3h,r2l
/home/lib.c:69
    s2++;
 49b:	0b 3b       	.word	H'b,H'3b
/home/lib.c:70
    len--;
 49d:	0b 27       	.word	H'b,H'27
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 49f:	19 49       	sub.w	r4,e1
 4a1:	13 11       	rotxr.w	r1
/home/lib.c:65 (discriminator 2)
 4a3:	01 12       	.word	H'1,H'12
 4a5:	06 40       	andc	#0x40,ccr
 4a7:	18 97       	sub.b	r1l,r7h
/home/lib.c:65 (discriminator 3)
 4a9:	42 19       	.word	H'42,H'19
 4ab:	01 13       	.word	H'1,H'13
/home/lib.c:72
  return 0;
 4ad:	00 00       	nop	
 4af:	0e 05       	addx	r0h,r5h
/home/lib.c:67
      return (*s1 > *s2) ? 1 : -1;
 4b1:	00 03       	.word	H'0,H'3
 4b3:	0e 3a       	addx	r3h,r2l
 4b5:	0b 3b       	.word	H'b,H'3b
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 4b7:	0b 49       	.word	H'b,H'49
 4b9:	13 02       	rotxr.b	r2h
 4bb:	17 00       	not.b	r0h
 4bd:	00 0f       	.word	H'0,H'f
 4bf:	34 00       	mov.b	r4h,@0x0:8
 4c1:	03 08       	ldc	r0l,ccr
/home/lib.c:73
}
 4c3:	3a 0b       	mov.b	r2l,@0xb:8
 4c5:	3b 0b       	mov.b	r3l,@0xb:8
 4c7:	49 13       	.word	H'49,H'13
 4c9:	02 18       	stc	exr,r0l
 4cb:	00 00       	nop	
putc():
/home/lib.c:77
{
 4cd:	10 1d       	shll.w	e5
 4cf:	01 31       	.word	H'1,H'31
 4d1:	13 11       	rotxr.w	r1
 4d3:	01 12       	.word	H'1,H'12
 4d5:	06 58       	andc	#0x58,ccr
 4d7:	0b 59       	inc.w	#1,e1
/home/lib.c:78
  if (c == '\n')
 4d9:	0b 00       	adds	#1,er0
 4db:	00 11       	.word	H'0,H'11
/home/lib.c:79
    serial_send_byte(SERIAL_DEFAULT_DEVICE, '\r');
 4dd:	05 00       	xorc	#0x0,ccr
 4df:	31 13       	mov.b	r1h,@0x13:8
 4e1:	02 17       	stc	exr,r7h
 4e3:	00 00       	nop	
 4e5:	12 0b       	rotxl.b	r3l
/home/lib.c:80
  return serial_send_byte(SERIAL_DEFAULT_DEVICE, c);
 4e7:	01 11       	.word	H'1,H'11
 4e9:	01 12       	.word	H'1,H'12
 4eb:	06 00       	andc	#0x0,ccr
 4ed:	00 13       	.word	H'0,H'13
 4ef:	34 00       	mov.b	r4h,@0x0:8
/home/lib.c:81
}
 4f1:	31 13       	mov.b	r1h,@0x13:8
 4f3:	00 00       	nop	
 4f5:	14 24       	or.b	r2h,r4h
 4f7:	00 0b       	.word	H'0,H'b
 4f9:	0b 3e       	.word	H'b,H'3e
getc():
/home/lib.c:85
{
 4fb:	0b 03       	adds	#1,er3
 4fd:	08 00       	add.b	r0h,r0h
 4ff:	00 15       	.word	H'0,H'15
 501:	2e 01       	mov.b	@0x1:8,r6l
 503:	3f 19       	mov.b	r7l,@0x19:8
/home/lib.c:86
  unsigned char c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 505:	03 0e       	ldc	r6l,ccr
 507:	3a 0b       	mov.b	r2l,@0xb:8
 509:	3b 0b       	mov.b	r3l,@0xb:8
 50b:	27 19       	mov.b	@0x19:8,r7h
 50d:	49 13       	.word	H'49,H'13
/home/lib.c:87
  c = (c == '\r') ? '\n' : c;
 50f:	20 0b       	mov.b	@0xb:8,r0h
 511:	01 13       	.word	H'1,H'13
 513:	00 00       	nop	
/home/lib.c:88 (discriminator 4)
  putc(c); /* エコー・バック */
 515:	16 05       	and.b	r0h,r5h
 517:	00 03       	.word	H'0,H'3
 519:	0e 3a       	addx	r3h,r2l
/home/lib.c:90
}
 51b:	0b 3b       	.word	H'b,H'3b
 51d:	0b 49       	.word	H'b,H'49
 51f:	13 00       	rotxr.b	r0h
 521:	00 17       	.word	H'0,H'17
 523:	34 00       	mov.b	r4h,@0x0:8
 525:	03 08       	ldc	r0l,ccr
puts():
/home/lib.c:94
{
 527:	3a 0b       	mov.b	r2l,@0xb:8
 529:	3b 0b       	mov.b	r3l,@0xb:8
 52b:	49 13       	.word	H'49,H'13
 52d:	00 00       	nop	
 52f:	18 05       	sub.b	r0h,r5h
 531:	00 03       	.word	H'0,H'3
/home/lib.c:95
  while (*str)
 533:	08 3a       	add.b	r3h,r2l
/home/lib.c:96
    putc(*(str++));
 535:	0b 3b       	.word	H'b,H'3b
 537:	0b 49       	.word	H'b,H'49
 539:	13 02       	rotxr.b	r2h
/home/lib.c:95
  while (*str)
 53b:	18 00       	sub.b	r0h,r0h
 53d:	00 19       	.word	H'0,H'19
/home/lib.c:98
}
 53f:	2e 01       	mov.b	@0x1:8,r6l
 541:	31 13       	mov.b	r1h,@0x13:8
 543:	11 01       	shlr.b	r1h
 545:	12 06       	rotxl.b	r6h
 547:	40 18       	bra	.+24 (0x561)
 549:	97 42       	addx	#0x42,r7h
gets():
/home/lib.c:102
{
 54b:	19 01       	sub.w	r0,r1
 54d:	13 00       	rotxr.b	r0h
 54f:	00 1a       	.word	H'0,H'1a
 551:	34 00       	mov.b	r4h,@0x0:8
 553:	31 13       	mov.b	r1h,@0x13:8
 555:	02 18       	stc	exr,r0l
 557:	00 00       	nop	
 559:	1b 2e       	.word	H'1b,H'2e
 55b:	01 31       	.word	H'1,H'31
 55d:	13 11       	rotxr.w	r1
 55f:	01 12       	.word	H'1,H'12
 561:	06 40       	andc	#0x40,ccr
/home/lib.c:106
    c = getc();
 563:	18 97       	sub.b	r1l,r7h
 565:	42 19       	.word	H'42,H'19
 567:	00 00       	nop	
	...

0000056a <.Ldebug_abbrev0>:
.Ldebug_abbrev0():
 56a:	01 11       	.word	H'1,H'11
gets():
/home/lib.c:107
    if (c == '\n')
 56c:	01 25       	.word	H'1,H'25
 56e:	0e 13       	addx	r1h,r3h
 570:	0b 03       	adds	#1,er3
 572:	0e 1b       	addx	r1h,r3l
 574:	0e 11       	addx	r1h,r1h
/home/lib.c:108
      c = '\0';
 576:	01 12       	.word	H'1,H'12
/home/lib.c:109
    buf[i++] = c;
 578:	06 10       	andc	#0x10,ccr
 57a:	17 00       	not.b	r0h
/home/lib.c:110
  } while (c);
 57c:	00 02       	.word	H'0,H'2
/home/lib.c:112
}
 57e:	24 00       	mov.b	@0x0:8,r4h
 580:	0b 0b       	adds	#1,er3
 582:	3e 0b       	mov.b	r6l,@0xb:8
 584:	03 0e       	ldc	r6l,ccr
 586:	00 00       	nop	
 588:	03 2e       	ldmac	er6,mach
 58a:	01 3f       	.word	H'1,H'3f
 58c:	19 03       	sub.w	r0,r3
 58e:	0e 3a       	addx	r3h,r2l
putxval():
/home/lib.c:116
{
 590:	0b 3b       	.word	H'b,H'3b
 592:	0b 27       	.word	H'b,H'27
 594:	19 49       	sub.w	r4,e1
 596:	13 11       	rotxr.w	r1
 598:	01 12       	.word	H'1,H'12
 59a:	06 40       	andc	#0x40,ccr
 59c:	18 97       	sub.b	r1l,r7h
 59e:	42 19       	.word	H'42,H'19
/home/lib.c:121
  *(p--) = '\0';
 5a0:	01 13       	.word	H'1,H'13
 5a2:	00 00       	nop	
 5a4:	04 05       	orc	#0x5,ccr
/home/lib.c:123
  if (!value && !column)
 5a6:	00 03       	.word	H'0,H'3
 5a8:	08 3a       	add.b	r3h,r2l
/home/lib.c:123 (discriminator 1)
 5aa:	0b 3b       	.word	H'b,H'3b
 5ac:	0b 49       	.word	H'b,H'49
/home/lib.c:124
    column++;
 5ae:	13 02       	rotxr.b	r2h
 5b0:	17 00       	not.b	r0h
 5b2:	00 05       	.word	H'0,H'5
 5b4:	34 00       	mov.b	r4h,@0x0:8
 5b6:	03 08       	ldc	r0l,ccr
/home/lib.c:127
    *(p--) = "0123456789abcdef"[value & 0xf];
 5b8:	3a 0b       	mov.b	r2l,@0xb:8
 5ba:	3b 0b       	mov.b	r3l,@0xb:8
 5bc:	49 13       	.word	H'49,H'13
 5be:	00 00       	nop	
 5c0:	06 34       	andc	#0x34,ccr
 5c2:	00 03       	.word	H'0,H'3
 5c4:	0e 3a       	addx	r3h,r2l
 5c6:	0b 3b       	.word	H'b,H'3b
 5c8:	0b 49       	.word	H'b,H'49
 5ca:	13 02       	rotxr.b	r2h
/home/lib.c:128
    value >>= 4;
 5cc:	17 00       	not.b	r0h
 5ce:	00 07       	.word	H'0,H'7
 5d0:	34 00       	mov.b	r4h,@0x0:8
 5d2:	03 08       	ldc	r0l,ccr
/home/lib.c:129
    if (column) column--;
 5d4:	3a 0b       	mov.b	r2l,@0xb:8
 5d6:	3b 0b       	mov.b	r3l,@0xb:8
/home/lib.c:129 (discriminator 1)
 5d8:	49 13       	.word	H'49,H'13
 5da:	02 17       	stc	exr,r7h
/home/lib.c:126
  while (value || column) {
 5dc:	00 00       	nop	
 5de:	08 1d       	add.b	r1h,r5l
/home/lib.c:126 (discriminator 1)
 5e0:	01 31       	.word	H'1,H'31
 5e2:	13 52       	rotxr.w	#2,r2
/home/lib.c:132
  puts(p + 1);
 5e4:	01 55       	.word	H'1,H'55
 5e6:	17 58       	extu.w	e0
 5e8:	0b 59       	inc.w	#1,e1
 5ea:	0b 01       	adds	#1,er1
/home/lib.c:135
}
 5ec:	13 00       	rotxr.b	r0h
 5ee:	00 09       	.word	H'0,H'9
 5f0:	0b 01       	adds	#1,er1
 5f2:	55 17       	bsr	.+23 (0x60b)
 5f4:	00 00       	nop	
 5f6:	0a 34       	add.w	#0x3,r4
 5f8:	00 31       	.word	H'0,H'31
 5fa:	13 02       	rotxr.b	r2h
 5fc:	17 00       	not.b	r0h
serial_init():
/home/serial.c:59
{
 5fe:	00 0b       	.word	H'0,H'b
 600:	89 82       	add.b	#0x82,r1l
 602:	01 01       	.word	H'1,H'1
/home/serial.c:60
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 604:	11 01       	shlr.b	r1h
 606:	31 13       	mov.b	r1h,@0x13:8
 608:	01 13       	.word	H'1,H'13
 60a:	00 00       	nop	
 60c:	0c 8a       	mov.b	r0l,r2l
 60e:	82 01       	add.b	#0x1,r2h
 610:	00 02       	.word	H'0,H'2
 612:	18 91       	sub.b	r1l,r1h
/home/serial.c:62
  sci->scr = 0;
 614:	42 18       	bhi	.+24 (0x62e)
 616:	00 00       	nop	
 618:	0d 89       	mov.w	e0,e1
/home/serial.c:63
  sci->smr = 0;
 61a:	82 01       	add.b	#0x1,r2h
/home/serial.c:64
  sci->brr = 64; /* 20MHzのクロックから9600bpsを生成(25MHzの場合は80にする) */
 61c:	01 11       	.word	H'1,H'11
 61e:	01 31       	.word	H'1,H'31
 620:	13 00       	rotxr.b	r0h
/home/serial.c:65
  sci->scr = H8_3069F_SCI_SCR_RE | H8_3069F_SCI_SCR_TE; /* 送受信可能 */
 622:	00 0e       	.word	H'0,H'e
 624:	1d 01       	cmp.w	r0,r1
 626:	31 13       	mov.b	r1h,@0x13:8
/home/serial.c:66
  sci->ssr = 0;
 628:	11 01       	shlr.b	r1h
 62a:	12 06       	rotxl.b	r6h
/home/serial.c:69
}
 62c:	58 0b       	.word	H'58,H'b
 62e:	59 0b       	.word	H'59,H'b
 630:	01 13       	.word	H'1,H'13
 632:	00 00       	nop	
serial_is_send_enable():
/home/serial.c:73
{
 634:	0f 05       	daa	r5h
 636:	00 31       	.word	H'0,H'31
 638:	13 02       	rotxr.b	r2h
/home/serial.c:74
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 63a:	17 00       	not.b	r0h
 63c:	00 10       	.word	H'0,H'10
 63e:	0b 01       	adds	#1,er1
 640:	11 01       	shlr.b	r1h
 642:	12 06       	rotxl.b	r6h
 644:	00 00       	nop	
 646:	11 0f       	shlr.b	r7l
 648:	00 0b       	.word	H'0,H'b
/home/serial.c:75
  return (sci->ssr & H8_3069F_SCI_SSR_TDRE);
 64a:	0b 49       	.word	H'b,H'49
 64c:	13 00       	rotxr.b	r0h
 64e:	00 12       	.word	H'0,H'12
/home/serial.c:76
}
 650:	24 00       	mov.b	@0x0:8,r4h
 652:	0b 0b       	adds	#1,er3
 654:	3e 0b       	mov.b	r6l,@0xb:8
 656:	03 08       	ldc	r0l,ccr
serial_send_byte():
/home/serial.c:80
{
 658:	00 00       	nop	
 65a:	13 2e       	.word	H'13,H'2e
 65c:	01 03       	.word	H'1,H'3
/home/serial.c:81
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 65e:	0e 3a       	addx	r3h,r2l
 660:	0b 3b       	.word	H'b,H'3b
 662:	0b 27       	.word	H'b,H'27
 664:	19 49       	sub.w	r4,e1
 666:	13 20       	.word	H'13,H'20
 668:	0b 01       	adds	#1,er1
 66a:	13 00       	rotxr.b	r0h
 66c:	00 14       	.word	H'0,H'14
serial_is_send_enable():
/home/serial.c:75 (discriminator 1)
  return (sci->ssr & H8_3069F_SCI_SSR_TDRE);
 66e:	05 00       	xorc	#0x0,ccr
 670:	03 0e       	ldc	r6l,ccr
serial_send_byte():
/home/serial.c:84
  while (!serial_is_send_enable(index))
 672:	3a 0b       	mov.b	r2l,@0xb:8
/home/serial.c:86
  sci->tdr = c;
 674:	3b 0b       	mov.b	r3l,@0xb:8
 676:	49 13       	.word	H'49,H'13
/home/serial.c:87
  sci->ssr &= ~H8_3069F_SCI_SSR_TDRE; /* 送信開始 */
 678:	00 00       	nop	
 67a:	15 05       	xor.b	r0h,r5h
 67c:	00 03       	.word	H'0,H'3
 67e:	08 3a       	add.b	r3h,r2l
 680:	0b 3b       	.word	H'b,H'3b
/home/serial.c:90
}
 682:	0b 49       	.word	H'b,H'49
 684:	13 00       	rotxr.b	r0h
 686:	00 16       	.word	H'0,H'16
 688:	34 00       	mov.b	r4h,@0x0:8
serial_is_recv_enable():
/home/serial.c:94
{
 68a:	03 0e       	ldc	r6l,ccr
 68c:	3a 0b       	mov.b	r2l,@0xb:8
 68e:	3b 0b       	mov.b	r3l,@0xb:8
/home/serial.c:95
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 690:	49 13       	.word	H'49,H'13
 692:	00 00       	nop	
 694:	17 2e       	.word	H'17,H'2e
 696:	00 3f       	.word	H'0,H'3f
 698:	19 3c       	sub.w	r3,e4
 69a:	19 6e       	sub.w	r6,e6
 69c:	0e 03       	addx	r0h,r3h
 69e:	0e 3a       	addx	r3h,r2l
/home/serial.c:96
  return (sci->ssr & H8_3069F_SCI_SSR_RDRF);
 6a0:	0b 3b       	.word	H'b,H'3b
 6a2:	0b 00       	adds	#1,er0
	...

000006a6 <.Ldebug_abbrev0>:
.Ldebug_abbrev0():
 6a6:	01 11       	.word	H'1,H'11
serial_is_recv_enable():
/home/serial.c:97
}
 6a8:	01 25       	.word	H'1,H'25
 6aa:	0e 13       	addx	r1h,r3h
 6ac:	0b 03       	adds	#1,er3
serial_recv_byte():
/home/serial.c:101
{
 6ae:	0e 1b       	addx	r1h,r3l
 6b0:	0e 11       	addx	r1h,r1h
 6b2:	01 12       	.word	H'1,H'12
/home/serial.c:102
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 6b4:	06 10       	andc	#0x10,ccr
 6b6:	17 00       	not.b	r0h
 6b8:	00 02       	.word	H'0,H'2
 6ba:	24 00       	mov.b	@0x0:8,r4h
 6bc:	0b 0b       	adds	#1,er3
 6be:	3e 0b       	mov.b	r6l,@0xb:8
 6c0:	03 0e       	ldc	r6l,ccr
 6c2:	00 00       	nop	
serial_is_recv_enable():
/home/serial.c:96 (discriminator 1)
  return (sci->ssr & H8_3069F_SCI_SSR_RDRF);
 6c4:	03 13       	ldc	r3h,exr
 6c6:	01 0b       	.word	H'1,H'b
serial_recv_byte():
/home/serial.c:106
  while (!serial_is_recv_enable(index))
 6c8:	0b 3a       	.word	H'b,H'3a
 6ca:	0b 3b       	.word	H'b,H'3b
/home/serial.c:108
  c = sci->rdr;
 6cc:	0b 01       	adds	#1,er1
 6ce:	13 00       	rotxr.b	r0h
/home/serial.c:109
  sci->ssr &= ~H8_3069F_SCI_SSR_RDRF; /* 受信完了 */
 6d0:	00 04       	.word	H'0,H'4
 6d2:	0d 00       	mov.w	r0,r0
 6d4:	03 0e       	ldc	r6l,ccr
 6d6:	3a 0b       	mov.b	r2l,@0xb:8
 6d8:	3b 0b       	mov.b	r3l,@0xb:8
/home/serial.c:112
}
 6da:	49 13       	.word	H'49,H'13
 6dc:	38 0b       	mov.b	r0l,@0xb:8
 6de:	00 00       	nop	
xmodem_recv():
/home/xmodem.c:60
{
 6e0:	05 0d       	xorc	#0xd,ccr
 6e2:	00 03       	.word	H'0,H'3
 6e4:	08 3a       	add.b	r3h,r2l
 6e6:	0b 3b       	.word	H'b,H'3b
 6e8:	0b 49       	.word	H'b,H'49
 6ea:	13 38       	.word	H'13,H'38
 6ec:	0b 00       	adds	#1,er0
 6ee:	00 06       	.word	H'0,H'6
 6f0:	01 01       	.word	H'1,H'1
 6f2:	49 13       	.word	H'49,H'13
 6f4:	01 13       	.word	H'1,H'13
/home/xmodem.c:63
  unsigned char c, block_number = 1;
 6f6:	00 00       	nop	
 6f8:	07 21       	ldc	#0x21,ccr
 6fa:	00 49       	.word	H'0,H'49
/home/xmodem.c:62
  long size = 0;
 6fc:	13 2f       	.word	H'13,H'2f
/home/xmodem.c:61
  int r, receiving = 0;
 6fe:	0b 00       	adds	#1,er0
 700:	00 08       	.word	H'0,H'8
 702:	13 01       	rotxr.b	r1h
/home/xmodem.c:66
    if (!receiving)
 704:	03 0e       	ldc	r6l,ccr
 706:	0b 0b       	adds	#1,er3
 708:	3a 0b       	mov.b	r2l,@0xb:8
/home/xmodem.c:69
    c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 70a:	3b 0b       	mov.b	r3l,@0xb:8
 70c:	01 13       	.word	H'1,H'13
 70e:	00 00       	nop	
 710:	09 2e       	add.w	r2,e6
/home/xmodem.c:71
    if (c == XMODEM_EOT) { /* 受信終了 */
 712:	01 3f       	.word	H'1,H'3f
 714:	19 03       	sub.w	r0,r3
 716:	0e 3a       	addx	r3h,r2l
xmodem_wait():
/home/xmodem.c:22
    if (++cnt >= 50000) {
 718:	0b 3b       	.word	H'b,H'3b
 71a:	0b 27       	.word	H'b,H'27
/home/xmodem.c:24
      serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_NAK);
 71c:	19 49       	sub.w	r4,e1
 71e:	13 11       	rotxr.w	r1
 720:	01 12       	.word	H'1,H'12
 722:	06 40       	andc	#0x40,ccr
 724:	18 97       	sub.b	r1l,r7h
xmodem_recv():
/home/xmodem.c:61
  int r, receiving = 0;
 726:	42 19       	.word	H'42,H'19
 728:	01 13       	.word	H'1,H'13
 72a:	00 00       	nop	
xmodem_wait():
/home/xmodem.c:21
  while (!serial_is_recv_enable(SERIAL_DEFAULT_DEVICE)) {
 72c:	0a 05       	inc	r5h
 72e:	00 03       	.word	H'0,H'3
 730:	08 3a       	add.b	r3h,r2l
 732:	0b 3b       	.word	H'b,H'3b
 734:	0b 49       	.word	H'b,H'49
 736:	13 02       	rotxr.b	r2h
 738:	17 00       	not.b	r0h
 73a:	00 0b       	.word	H'0,H'b
 73c:	34 00       	mov.b	r4h,@0x0:8
 73e:	03 0e       	ldc	r6l,ccr
 740:	3a 0b       	mov.b	r2l,@0xb:8
 742:	3b 0b       	mov.b	r3l,@0xb:8
 744:	49 13       	.word	H'49,H'13
xmodem_recv():
/home/xmodem.c:72
      serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_ACK);
 746:	02 17       	stc	exr,r7h
 748:	00 00       	nop	
 74a:	0c 1d       	mov.b	r1h,r5l
 74c:	01 31       	.word	H'1,H'31
 74e:	13 11       	rotxr.w	r1
/home/xmodem.c:93
  return size;
 750:	01 12       	.word	H'1,H'12
 752:	06 58       	andc	#0x58,ccr
/home/xmodem.c:74
    } else if (c == XMODEM_CAN) { /* 受信中断 */
 754:	0b 59       	inc.w	#1,e1
 756:	0b 01       	adds	#1,er1
 758:	13 00       	rotxr.b	r0h
/home/xmodem.c:77
      receiving++;
 75a:	00 0d       	.word	H'0,H'd
 75c:	05 00       	xorc	#0x0,ccr
/home/xmodem.c:76
    } else if (c == XMODEM_SOH) { /* 受信開始 */
 75e:	31 13       	mov.b	r1h,@0x13:8
 760:	02 17       	stc	exr,r7h
 762:	00 00       	nop	
/home/xmodem.c:77
      receiving++;
 764:	0e 89       	addx	r0l,r1l
 766:	82 01       	add.b	#0x1,r2h
 768:	01 11       	.word	H'1,H'11
xmodem_read_block():
/home/xmodem.c:37
  block_num = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 76a:	01 31       	.word	H'1,H'31
 76c:	13 00       	rotxr.b	r0h
 76e:	00 0f       	.word	H'0,H'f
 770:	8a 82       	add.b	#0x82,r2l
/home/xmodem.c:38
  if (block_num != block_number)
 772:	01 00       	.word	H'1,H'0
 774:	02 18       	stc	exr,r0l
 776:	91 42       	addx	#0x42,r1h
 778:	18 00       	sub.b	r0h,r0h
 77a:	00 10       	.word	H'0,H'10
/home/xmodem.c:41
  block_num ^= serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 77c:	1d 01       	cmp.w	r0,r1
 77e:	31 13       	mov.b	r1h,@0x13:8
 780:	11 01       	shlr.b	r1h
 782:	12 06       	rotxl.b	r6h
 784:	58 0b       	.word	H'58,H'b
 786:	59 0b       	.word	H'59,H'b
 788:	00 00       	nop	
/home/xmodem.c:42
  if (block_num != 0xff)
 78a:	11 05       	shlr.b	r5h
 78c:	00 31       	.word	H'0,H'31
 78e:	13 00       	rotxr.b	r0h
 790:	00 12       	.word	H'0,H'12
 792:	0b 01       	adds	#1,er1
 794:	11 01       	shlr.b	r1h
/home/xmodem.c:45
  check_sum = 0;
 796:	12 06       	rotxl.b	r6h
/home/xmodem.c:47
    c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 798:	00 00       	nop	
 79a:	13 34       	rotxr.l	er4
 79c:	00 31       	.word	H'0,H'31
 79e:	13 02       	rotxr.b	r2h
 7a0:	17 00       	not.b	r0h
 7a2:	00 14       	.word	H'0,H'14
 7a4:	89 82       	add.b	#0x82,r1l
 7a6:	01 00       	.word	H'1,H'0
 7a8:	11 01       	shlr.b	r1h
 7aa:	31 13       	mov.b	r1h,@0x13:8
 7ac:	00 00       	nop	
 7ae:	15 0f       	xor.b	r0h,r7l
 7b0:	00 0b       	.word	H'0,H'b
/home/xmodem.c:48
    *(buf++) = c;
 7b2:	0b 49       	.word	H'b,H'49
 7b4:	13 00       	rotxr.b	r0h
 7b6:	00 16       	.word	H'0,H'16
 7b8:	2e 01       	mov.b	@0x1:8,r6l
/home/xmodem.c:49
    check_sum += c;
 7ba:	03 0e       	ldc	r6l,ccr
 7bc:	3a 0b       	mov.b	r2l,@0xb:8
 7be:	3b 0b       	mov.b	r3l,@0xb:8
 7c0:	27 19       	mov.b	@0x19:8,r7h
 7c2:	49 13       	.word	H'49,H'13
/home/xmodem.c:46
  for (i = 0; i < XMODEM_BLOCK_SIZE; i++) {
 7c4:	20 0b       	mov.b	@0xb:8,r0h
 7c6:	01 13       	.word	H'1,H'13
 7c8:	00 00       	nop	
 7ca:	17 05       	not.b	r5h
 7cc:	00 03       	.word	H'0,H'3
/home/xmodem.c:52
  check_sum ^= serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 7ce:	0e 3a       	addx	r3h,r2l
 7d0:	0b 3b       	.word	H'b,H'3b
 7d2:	0b 49       	.word	H'b,H'49
 7d4:	13 00       	rotxr.b	r0h
 7d6:	00 18       	.word	H'0,H'18
 7d8:	34 00       	mov.b	r4h,@0x0:8
 7da:	03 08       	ldc	r0l,ccr
/home/xmodem.c:53
  if (check_sum)
 7dc:	3a 0b       	mov.b	r2l,@0xb:8
 7de:	3b 0b       	mov.b	r3l,@0xb:8
 7e0:	49 13       	.word	H'49,H'13
 7e2:	00 00       	nop	
 7e4:	19 34       	sub.w	r3,r4
xmodem_recv():
/home/xmodem.c:82
	block_number++;
 7e6:	00 03       	.word	H'0,H'3
 7e8:	0e 3a       	addx	r3h,r2l
 7ea:	0b 3b       	.word	H'b,H'3b
 7ec:	0b 49       	.word	H'b,H'49
 7ee:	13 00       	rotxr.b	r0h
/home/xmodem.c:83
	size += r;
 7f0:	00 1a       	.word	H'0,H'1a
 7f2:	24 00       	mov.b	@0x0:8,r4h
 7f4:	0b 0b       	adds	#1,er3
/home/xmodem.c:84
	buf  += r;
 7f6:	3e 0b       	mov.b	r6l,@0xb:8
 7f8:	03 08       	ldc	r0l,ccr
 7fa:	00 00       	nop	
/home/xmodem.c:85
	serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_ACK);
 7fc:	1b 2e       	.word	H'1b,H'2e
 7fe:	00 3f       	.word	H'0,H'3f
/home/xmodem.c:80
	serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_NAK);
 800:	19 3c       	sub.w	r3,e4
 802:	19 6e       	sub.w	r6,e6
 804:	0e 03       	addx	r0h,r3h
 806:	0e 3a       	addx	r3h,r2l
 808:	0b 3b       	.word	H'b,H'3b
 80a:	0b 00       	adds	#1,er0
	...

0000080e <.Ldebug_abbrev0>:
.Ldebug_abbrev0():
 80e:	01 11       	.word	H'1,H'11
xmodem_recv():
/home/xmodem.c:88
      if (receiving)
 810:	01 25       	.word	H'1,H'25
 812:	0e 13       	addx	r1h,r3h
/home/xmodem.c:75
      return -1;
 814:	0b 03       	adds	#1,er3
 816:	0e 1b       	addx	r1h,r3l
/home/xmodem.c:94
}
 818:	0e 11       	addx	r1h,r1h
 81a:	01 12       	.word	H'1,H'12
 81c:	06 10       	andc	#0x10,ccr
 81e:	17 00       	not.b	r0h
 820:	00 02       	.word	H'0,H'2
 822:	16 00       	and.b	r0h,r0h
 824:	03 0e       	ldc	r6l,ccr
 826:	3a 0b       	mov.b	r2l,@0xb:8
 828:	3b 0b       	mov.b	r3l,@0xb:8
 82a:	49 13       	.word	H'49,H'13
 82c:	00 00       	nop	
elf_load():
/home/elf.c:84
{
 82e:	03 35       	ldmac	er5,macl
 830:	00 49       	.word	H'0,H'49
 832:	13 00       	rotxr.b	r0h
 834:	00 04       	.word	H'0,H'4
 836:	24 00       	mov.b	@0x0:8,r4h
 838:	0b 0b       	adds	#1,er3
 83a:	3e 0b       	mov.b	r6l,@0xb:8
 83c:	03 0e       	ldc	r6l,ccr
 83e:	00 00       	nop	
elf_check():
/home/elf.c:44
  if (memcmp(header->id.magic, "\x7f" "ELF", 4))
 840:	05 17       	xorc	#0x17,ccr
 842:	01 0b       	.word	H'1,H'b
 844:	0b 3a       	.word	H'b,H'3a
 846:	0b 3b       	.word	H'b,H'3b
 848:	0b 01       	adds	#1,er1
 84a:	13 00       	rotxr.b	r0h
 84c:	00 06       	.word	H'0,H'6
 84e:	0d 00       	mov.w	r0,r0
 850:	03 0e       	ldc	r6l,ccr
 852:	3a 0b       	mov.b	r2l,@0xb:8
/home/elf.c:47
  if (header->id.class   != 1) return -1; /* ELF32 */
 854:	3b 0b       	mov.b	r3l,@0xb:8
 856:	49 13       	.word	H'49,H'13
 858:	00 00       	nop	
 85a:	07 01       	ldc	#0x1,ccr
 85c:	01 49       	.word	H'1,H'49
/home/elf.c:48
  if (header->id.format  != 2) return -1; /* Big endian */
 85e:	13 01       	rotxr.b	r1h
 860:	13 00       	rotxr.b	r0h
 862:	00 08       	.word	H'0,H'8
 864:	21 00       	mov.b	@0x0:8,r1h
 866:	49 13       	.word	H'49,H'13
/home/elf.c:49
  if (header->id.version != 1) return -1; /* version 1 */
 868:	2f 0b       	mov.b	@0xb:8,r7l
 86a:	00 00       	nop	
 86c:	09 13       	add.w	r1,r3
 86e:	01 0b       	.word	H'1,H'b
 870:	0b 3a       	.word	H'b,H'3a
/home/elf.c:50
  if (header->type       != 2) return -1; /* Executable file */
 872:	0b 3b       	.word	H'b,H'3b
 874:	0b 01       	adds	#1,er1
 876:	13 00       	rotxr.b	r0h
 878:	00 0a       	.word	H'0,H'a
 87a:	0d 00       	mov.w	r0,r0
/home/elf.c:51
  if (header->version    != 1) return -1; /* version 1 */
 87c:	03 08       	ldc	r0l,ccr
 87e:	3a 0b       	mov.b	r2l,@0xb:8
 880:	3b 0b       	mov.b	r3l,@0xb:8
 882:	49 13       	.word	H'49,H'13
 884:	38 0b       	mov.b	r0l,@0xb:8
 886:	00 00       	nop	
/home/elf.c:54
  if ((header->arch != 46) && (header->arch != 47)) return -1;
 888:	0b 2e       	.word	H'b,H'2e
 88a:	01 3f       	.word	H'1,H'3f
 88c:	19 03       	sub.w	r0,r3
 88e:	0e 3a       	addx	r3h,r2l
 890:	0b 3b       	.word	H'b,H'3b
 892:	0b 49       	.word	H'b,H'49
 894:	13 11       	rotxr.w	r1
elf_load_program():
/home/elf.c:69
       header->program_header_size * i);
 896:	01 12       	.word	H'1,H'12
 898:	06 40       	andc	#0x40,ccr
 89a:	18 97       	sub.b	r1l,r7h
 89c:	42 19       	.word	H'42,H'19
 89e:	01 13       	.word	H'1,H'13
/home/elf.c:68
      ((char *)header + header->program_header_offset +
 8a0:	00 00       	nop	
 8a2:	0c 34       	mov.b	r3h,r4h
 8a4:	00 03       	.word	H'0,H'3
 8a6:	08 3a       	add.b	r3h,r2l
/home/elf.c:67
    phdr = (struct elf_program_header *)
 8a8:	0b 3b       	.word	H'b,H'3b
/home/elf.c:71
    if (phdr->type != 1) /* ロード可能なセグメントか？ */
 8aa:	0b 49       	.word	H'b,H'49
 8ac:	13 02       	rotxr.b	r2h
 8ae:	17 00       	not.b	r0h
 8b0:	00 0d       	.word	H'0,H'd
/home/elf.c:74
    memcpy((char *)phdr->physical_addr, (char *)header + phdr->offset,
 8b2:	89 82       	add.b	#0x82,r1l
 8b4:	01 01       	.word	H'1,H'1
 8b6:	11 01       	shlr.b	r1h
 8b8:	31 13       	mov.b	r1h,@0x13:8
 8ba:	01 13       	.word	H'1,H'13
 8bc:	00 00       	nop	
 8be:	0e 8a       	addx	r0l,r2l
 8c0:	82 01       	add.b	#0x1,r2h
 8c2:	00 02       	.word	H'0,H'2
 8c4:	18 91       	sub.b	r1l,r1h
 8c6:	42 18       	bhi	.+24 (0x8e0)
 8c8:	00 00       	nop	
 8ca:	0f 89       	.word	H'f,H'89
 8cc:	82 01       	add.b	#0x1,r2h
 8ce:	01 11       	.word	H'1,H'11
/home/elf.c:77
	   phdr->memory_size - phdr->file_size);
 8d0:	01 31       	.word	H'1,H'31
 8d2:	13 00       	rotxr.b	r0h
 8d4:	00 10       	.word	H'0,H'10
/home/elf.c:76
    memset((char *)phdr->physical_addr + phdr->file_size, 0,
 8d6:	24 00       	mov.b	@0x0:8,r4h
 8d8:	0b 0b       	adds	#1,er3
 8da:	3e 0b       	mov.b	r6l,@0xb:8
 8dc:	03 08       	ldc	r0l,ccr
 8de:	00 00       	nop	
 8e0:	11 0f       	shlr.b	r7l
 8e2:	00 0b       	.word	H'0,H'b
 8e4:	0b 49       	.word	H'b,H'49
 8e6:	13 00       	rotxr.b	r0h
 8e8:	00 12       	.word	H'0,H'12
 8ea:	34 00       	mov.b	r4h,@0x0:8
 8ec:	03 0e       	ldc	r6l,ccr
 8ee:	3a 0b       	mov.b	r2l,@0xb:8
 8f0:	3b 0b       	mov.b	r3l,@0xb:8
/home/elf.c:65
  for (i = 0; i < header->program_header_num; i++) {
 8f2:	49 13       	.word	H'49,H'13
 8f4:	02 18       	stc	exr,r0l
 8f6:	00 00       	nop	
 8f8:	13 89       	rotr.b	r1l
 8fa:	82 01       	add.b	#0x1,r2h
elf_load():
/home/elf.c:93
  return (char *)header->entry_point;
 8fc:	01 11       	.word	H'1,H'11
 8fe:	01 93       	.word	H'1,H'93
 900:	42 18       	bhi	.+24 (0x91a)
 902:	01 13       	.word	H'1,H'13
/home/elf.c:88
    return NULL;
 904:	00 00       	nop	
/home/elf.c:94
}
 906:	14 15       	or.b	r1h,r5h
 908:	01 27       	.word	H'1,H'27
 90a:	19 49       	sub.w	r4,e1
 90c:	13 01       	rotxr.b	r1h
 90e:	13 00       	rotxr.b	r0h
 910:	00 15       	.word	H'0,H'15
 912:	05 00       	xorc	#0x0,ccr
 914:	49 13       	.word	H'49,H'13
check_val():
/home/dram.c:77
{
 916:	00 00       	nop	
 918:	16 2e       	and.b	r2h,r6l
 91a:	01 03       	.word	H'1,H'3
 91c:	0e 3a       	addx	r3h,r2l
/home/dram.c:80
  p->u.val8[0] = wval->u.val8[0]; p->u.val8[1] = wval->u.val8[1];
 91e:	0b 3b       	.word	H'b,H'3b
 920:	0b 27       	.word	H'b,H'27
 922:	19 49       	sub.w	r4,e1
 924:	13 11       	rotxr.w	r1
 926:	01 12       	.word	H'1,H'12
 928:	06 40       	andc	#0x40,ccr
/home/dram.c:81
  p->u.val8[2] = wval->u.val8[2]; p->u.val8[3] = wval->u.val8[3];
 92a:	18 97       	sub.b	r1l,r7h
 92c:	42 19       	.word	H'42,H'19
 92e:	01 13       	.word	H'1,H'13
 930:	00 00       	nop	
 932:	17 05       	not.b	r5h
 934:	00 03       	.word	H'0,H'3
 936:	0e 3a       	addx	r3h,r2l
 938:	0b 3b       	.word	H'b,H'3b
/home/dram.c:82
  rval.u.val8[0] = p->u.val8[0]; rval.u.val8[1] = p->u.val8[1];
 93a:	0b 49       	.word	H'b,H'49
 93c:	13 02       	rotxr.b	r2h
 93e:	17 00       	not.b	r0h
 940:	00 18       	.word	H'0,H'18
 942:	05 00       	xorc	#0x0,ccr
 944:	03 0e       	ldc	r6l,ccr
 946:	3a 0b       	mov.b	r2l,@0xb:8
/home/dram.c:83
  rval.u.val8[2] = p->u.val8[2]; rval.u.val8[3] = p->u.val8[3];
 948:	3b 0b       	mov.b	r3l,@0xb:8
 94a:	49 13       	.word	H'49,H'13
 94c:	02 18       	stc	exr,r0l
 94e:	00 00       	nop	
 950:	19 34       	sub.w	r3,r4
 952:	00 03       	.word	H'0,H'3
 954:	08 3a       	add.b	r3h,r2l
 956:	0b 3b       	.word	H'b,H'3b
/home/dram.c:85
  if (rval.u.val32[0] != wval->u.val32[0])
 958:	0b 49       	.word	H'b,H'49
 95a:	13 1c       	rotxr.w	e4
 95c:	0b 00       	adds	#1,er0
 95e:	00 1a       	.word	H'0,H'1a
 960:	34 00       	mov.b	r4h,@0x0:8
 962:	03 08       	ldc	r0l,ccr
 964:	3a 0b       	mov.b	r2l,@0xb:8
/home/dram.c:86
    return -1;
 966:	3b 0b       	mov.b	r3l,@0xb:8
 968:	49 13       	.word	H'49,H'13
 96a:	02 18       	stc	exr,r0l
/home/dram.c:88
  p->u.val16[0] = wval->u.val16[0]; p->u.val16[1] = wval->u.val16[1];
 96c:	00 00       	nop	
 96e:	1b 0a       	subs	#1,er2
 970:	00 03       	.word	H'0,H'3
 972:	08 3a       	add.b	r3h,r2l
 974:	0b 3b       	.word	H'b,H'3b
 976:	0b 11       	.word	H'b,H'11
/home/dram.c:89
  rval.u.val16[0] = p->u.val16[0]; rval.u.val16[1] = p->u.val16[1];
 978:	01 00       	.word	H'1,H'0
 97a:	00 1c       	.word	H'0,H'1c
 97c:	05 00       	xorc	#0x0,ccr
 97e:	03 08       	ldc	r0l,ccr
 980:	3a 0b       	mov.b	r2l,@0xb:8
 982:	3b 0b       	mov.b	r3l,@0xb:8
 984:	49 13       	.word	H'49,H'13
/home/dram.c:91
  if (rval.u.val32[0] != wval->u.val32[0])
 986:	02 17       	stc	exr,r7h
 988:	00 00       	nop	
 98a:	1d 2e       	cmp.w	r2,e6
 98c:	00 3f       	.word	H'0,H'3f
 98e:	19 03       	sub.w	r0,r3
 990:	0e 3a       	addx	r3h,r2l
 992:	0b 3b       	.word	H'b,H'3b
/home/dram.c:94
  p->u.val32[0] = wval->u.val32[0];
 994:	0b 49       	.word	H'b,H'49
 996:	13 11       	rotxr.w	r1
 998:	01 12       	.word	H'1,H'12
 99a:	06 40       	andc	#0x40,ccr
/home/dram.c:95
  rval.u.val32[0] = p->u.val32[0];
 99c:	18 97       	sub.b	r1l,r7h
 99e:	42 19       	.word	H'42,H'19
 9a0:	00 00       	nop	
 9a2:	1e 2e       	subx	r2h,r6l
 9a4:	00 3f       	.word	H'0,H'3f
/home/dram.c:97
  if (rval.u.val32[0] != wval->u.val32[0])
 9a6:	19 3c       	sub.w	r3,e4
 9a8:	19 6e       	sub.w	r6,e6
 9aa:	0e 03       	addx	r0h,r3h
 9ac:	0e 3a       	addx	r3h,r2l
 9ae:	0b 3b       	.word	H'b,H'3b
 9b0:	0b 00       	adds	#1,er0
 9b2:	00 1f       	.word	H'0,H'1f
 9b4:	2e 00       	mov.b	@0x0:8,r6l
 9b6:	3f 19       	mov.b	r7l,@0x19:8
 9b8:	3c 19       	mov.b	r4l,@0x19:8
 9ba:	6e 0e 03 0e 	mov.b	@(0x30e:16,er0),r6l
/home/dram.c:101
}
 9be:	3a 0b       	mov.b	r2l,@0xb:8
 9c0:	3b 0b       	mov.b	r3l,@0xb:8
 9c2:	6e 0e 00 00 	mov.b	@(0x0:16,er0),r6l
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00 00       	nop	
   2:	00 14       	.word	H'0,H'14
   4:	00 02       	.word	H'0,H'2
   6:	00 00       	nop	
   8:	00 00       	nop	
   a:	04 00       	orc	#0x0,ccr
	...
  18:	00 00       	nop	
  1a:	00 1c       	.word	H'0,H'1c
  1c:	00 02       	.word	H'0,H'2
  1e:	00 00       	nop	
  20:	00 5b       	.word	H'0,H'5b
  22:	04 00       	orc	#0x0,ccr
  24:	00 00       	nop	
  26:	00 00       	nop	
  28:	00 00       	nop	
  2a:	0c f6       	mov.b	r7l,r6h
  2c:	00 00       	nop	
  2e:	01 fc       	.word	H'1,H'fc
	...
  38:	00 00       	nop	
  3a:	00 1c       	.word	H'0,H'1c
  3c:	00 02       	.word	H'0,H'2
  3e:	00 00       	nop	
  40:	05 0d       	xorc	#0xd,ccr
  42:	04 00       	orc	#0x0,ccr
  44:	00 00       	nop	
  46:	00 00       	nop	
  48:	00 00       	nop	
  4a:	02 b0       	stmac	macl,er0
  4c:	00 00       	nop	
  4e:	00 c8       	.word	H'0,H'c8
	...
  58:	00 00       	nop	
  5a:	00 1c       	.word	H'0,H'1c
  5c:	00 02       	.word	H'0,H'2
  5e:	00 00       	nop	
  60:	06 7c       	andc	#0x7c,ccr
  62:	04 00       	orc	#0x0,ccr
  64:	00 00       	nop	
  66:	00 00       	nop	
  68:	00 00       	nop	
  6a:	03 78       	ldc	er0,sbr
  6c:	00 00       	nop	
  6e:	02 86       	.word	H'2,H'86
	...
  78:	00 00       	nop	
  7a:	00 1c       	.word	H'0,H'1c
  7c:	00 02       	.word	H'0,H'2
  7e:	00 00       	nop	
  80:	0a 86       	add.l	er0,er6
  82:	04 00       	orc	#0x0,ccr
  84:	00 00       	nop	
  86:	00 00       	nop	
  88:	00 00       	nop	
  8a:	05 fe       	xorc	#0xfe,ccr
  8c:	00 00       	nop	
  8e:	00 e2       	.word	H'0,H'e2
	...
  98:	00 00       	nop	
  9a:	00 1c       	.word	H'0,H'1c
  9c:	00 02       	.word	H'0,H'2
  9e:	00 00       	nop	
  a0:	0d 14       	mov.w	r1,r4
  a2:	04 00       	orc	#0x0,ccr
  a4:	00 00       	nop	
  a6:	00 00       	nop	
  a8:	00 00       	nop	
  aa:	06 e0       	andc	#0xe0,ccr
  ac:	00 00       	nop	
  ae:	01 4e       	.word	H'1,H'4e
	...
  b8:	00 00       	nop	
  ba:	00 1c       	.word	H'0,H'1c
  bc:	00 02       	.word	H'0,H'2
  be:	00 00       	nop	
  c0:	0f 82       	mov.l	er0,er2
  c2:	04 00       	orc	#0x0,ccr
  c4:	00 00       	nop	
  c6:	00 00       	nop	
  c8:	00 00       	nop	
  ca:	08 2e       	add.b	r2h,r6l
  cc:	00 00       	nop	
  ce:	00 e8       	.word	H'0,H'e8
	...
  d8:	00 00       	nop	
  da:	00 1c       	.word	H'0,H'1c
  dc:	00 02       	.word	H'0,H'2
  de:	00 00       	nop	
  e0:	12 b2       	rotl.l	er2
  e2:	04 00       	orc	#0x0,ccr
  e4:	00 00       	nop	
  e6:	00 00       	nop	
  e8:	00 00       	nop	
  ea:	09 16       	add.w	r1,r6
  ec:	00 00       	nop	
  ee:	03 e0       	.word	H'3,H'e0
	...

Disassembly of section .debug_line:

00000000 <.Ldebug_line0>:
.Ldebug_line0():
   0:	00 00       	nop	
   2:	00 30       	.word	H'0,H'30
   4:	00 04       	.word	H'0,H'4
   6:	00 00       	nop	
   8:	00 20       	.word	H'0,H'20
   a:	01 01       	.word	H'1,H'1
   c:	01 f6       	.word	H'1,H'f6
   e:	f2 0d       	mov.b	#0xd,r2h
  10:	00 01       	.word	H'0,H'1
  12:	01 01       	.word	H'1,H'1
  14:	01 00       	.word	H'1,H'0
  16:	00 00       	nop	
  18:	01 00       	.word	H'1,H'0
  1a:	00 01       	.word	H'0,H'1
  1c:	00 76       	.word	H'0,H'76
  1e:	65 63       	xor.w	r6,r3
  20:	74 6f       	bor	#0x6,r7l
  22:	72 2e       	bclr	#0x2,r6l
  24:	63 00       	btst	r0h,r0h
  26:	00 00       	nop	
  28:	00 00       	nop	
  2a:	00 05       	.word	H'0,H'5
  2c:	02 00       	stc	ccr,r0h
  2e:	00 01       	.word	H'0,H'1
  30:	00 00       	nop	
  32:	01 01       	.word	H'1,H'1

00000034 <.Ldebug_line0>:
  34:	00 00       	nop	
  36:	01 d7       	.word	H'1,H'd7
  38:	00 04       	.word	H'0,H'4
  3a:	00 00       	nop	
  3c:	00 61       	.word	H'0,H'61
  3e:	01 01       	.word	H'1,H'1
  40:	01 f6       	.word	H'1,H'f6
  42:	f2 0d       	mov.b	#0xd,r2h
  44:	00 01       	.word	H'0,H'1
  46:	01 01       	.word	H'1,H'1
  48:	01 00       	.word	H'1,H'0
  4a:	00 00       	nop	
  4c:	01 00       	.word	H'1,H'0
  4e:	00 01       	.word	H'0,H'1
  50:	00 6d       	.word	H'0,H'6d
  52:	61 69       	bnot	r6h,r1l
  54:	6e 2e 63 00 	mov.b	@(0x6300:16,er2),r6l
  58:	00 00       	nop	
  5a:	00 69       	.word	H'0,H'69
  5c:	6e 74 65 72 	mov.b	@(0x6572:16,er7),r4h
  60:	72 75       	bclr	#0x7,r5h
  62:	70 74       	bset	#0x7,r4h
  64:	2e 68       	mov.b	@0x68:8,r6l
  66:	00 00       	nop	
  68:	00 00       	nop	
  6a:	73 65       	btst	#0x6,r5h
  6c:	72 69       	bclr	#0x6,r1l
  6e:	61 6c       	bnot	r6h,r4l
  70:	2e 68       	mov.b	@0x68:8,r6l
  72:	00 00       	nop	
  74:	00 00       	nop	
  76:	64 72       	or.w	r7,r2
  78:	61 6d       	bnot	r6h,r5l
  7a:	2e 68       	mov.b	@0x68:8,r6l
  7c:	00 00       	nop	
  7e:	00 00       	nop	
  80:	6c 69       	mov.b	@er6+,r1l
  82:	62 2e       	bclr	r2h,r6l
  84:	68 00       	mov.b	@er0,r0h
  86:	00 00       	nop	
  88:	00 78       	.word	H'0,H'78
  8a:	6d 6f       	mov.w	@er6+,e7
  8c:	64 65       	or.w	r6,r5
  8e:	6d 2e       	mov.w	@er2+,e6
  90:	68 00       	mov.b	@er0,r0h
  92:	00 00       	nop	
  94:	00 65       	.word	H'0,H'65
  96:	6c 66       	mov.b	@er6+,r6h
  98:	2e 68       	mov.b	@0x68:8,r6l
  9a:	00 00       	nop	
  9c:	00 00       	nop	
  9e:	00 00       	nop	
  a0:	05 02       	xorc	#0x2,ccr
  a2:	00 00       	nop	
  a4:	0c f6       	mov.b	r7l,r6h
  a6:	58 00 05 02 	bra	.+1282 (0x5ac)
  aa:	00 00       	nop	
  ac:	0d 02       	mov.w	r0,r2
  ae:	1f 00       	das	r0h
  b0:	05 02       	xorc	#0x2,ccr
  b2:	00 00       	nop	
  b4:	0d 04       	mov.w	r0,r4
  b6:	03 4e       	.word	H'3,H'4e
  b8:	01 00       	.word	H'1,H'0
  ba:	05 02       	xorc	#0x2,ccr
  bc:	00 00       	nop	
  be:	0d 08       	mov.w	r0,e0
  c0:	1a 00       	dec.b	r0h
  c2:	05 02       	xorc	#0x2,ccr
  c4:	00 00       	nop	
  c6:	0d 10       	mov.w	r1,r0
  c8:	1a 00       	dec.b	r0h
  ca:	05 02       	xorc	#0x2,ccr
  cc:	00 00       	nop	
  ce:	0d 14       	mov.w	r1,r4
  d0:	47 00       	beq	.0 (0xd2)
  d2:	05 02       	xorc	#0x2,ccr
  d4:	00 00       	nop	
  d6:	0d 1e       	mov.w	r1,e6
  d8:	1a 00       	dec.b	r0h
  da:	05 02       	xorc	#0x2,ccr
  dc:	00 00       	nop	
  de:	0d 28       	mov.w	r2,e0
  e0:	18 00       	sub.b	r0h,r0h
  e2:	05 02       	xorc	#0x2,ccr
  e4:	00 00       	nop	
  e6:	0d 32       	mov.w	r3,r2
  e8:	19 00       	sub.w	r0,r0
  ea:	05 02       	xorc	#0x2,ccr
  ec:	00 00       	nop	
  ee:	0d 46       	mov.w	r4,r6
  f0:	18 00       	sub.b	r0h,r0h
  f2:	05 02       	xorc	#0x2,ccr
  f4:	00 00       	nop	
  f6:	0d 54       	mov.w	r5,r4
  f8:	18 00       	sub.b	r0h,r0h
  fa:	05 02       	xorc	#0x2,ccr
  fc:	00 00       	nop	
  fe:	0d 62       	mov.w	r6,r2
 100:	03 67       	ldc	er7,vbr
 102:	01 00       	.word	H'1,H'0
 104:	05 02       	xorc	#0x2,ccr
 106:	00 00       	nop	
 108:	0d 7c       	mov.w	r7,e4
 10a:	32 00       	mov.b	r2h,@0x0:8
 10c:	05 02       	xorc	#0x2,ccr
 10e:	00 00       	nop	
 110:	0d 80       	mov.w	e0,r0
 112:	18 00       	sub.b	r0h,r0h
 114:	05 02       	xorc	#0x2,ccr
 116:	00 00       	nop	
 118:	0d 88       	mov.w	e0,e0
 11a:	19 00       	sub.w	r0,r0
 11c:	05 02       	xorc	#0x2,ccr
 11e:	00 00       	nop	
 120:	0d 90       	mov.w	e1,r0
 122:	19 00       	sub.w	r0,r0
 124:	05 02       	xorc	#0x2,ccr
 126:	00 00       	nop	
 128:	0d a6       	mov.w	e2,r6
 12a:	18 00       	sub.b	r0h,r0h
 12c:	05 02       	xorc	#0x2,ccr
 12e:	00 00       	nop	
 130:	0d b0       	mov.w	e3,r0
 132:	18 00       	sub.b	r0h,r0h
 134:	05 02       	xorc	#0x2,ccr
 136:	00 00       	nop	
 138:	0d be       	mov.w	e3,e6
 13a:	18 00       	sub.b	r0h,r0h
 13c:	05 02       	xorc	#0x2,ccr
 13e:	00 00       	nop	
 140:	0d c8       	mov.w	e4,e0
 142:	18 00       	sub.b	r0h,r0h
 144:	05 02       	xorc	#0x2,ccr
 146:	00 00       	nop	
 148:	0d de       	mov.w	e5,e6
 14a:	03 47       	.word	H'3,H'47
 14c:	01 00       	.word	H'1,H'0
 14e:	05 02       	xorc	#0x2,ccr
 150:	00 00       	nop	
 152:	0d e2       	mov.w	e6,r2
 154:	18 00       	sub.b	r0h,r0h
 156:	05 02       	xorc	#0x2,ccr
 158:	00 00       	nop	
 15a:	0d ec       	mov.w	e6,e4
 15c:	1b 00       	subs	#1,er0
 15e:	05 02       	xorc	#0x2,ccr
 160:	00 00       	nop	
 162:	0e 00       	addx	r0h,r0h
 164:	18 00       	sub.b	r0h,r0h
 166:	05 02       	xorc	#0x2,ccr
 168:	00 00       	nop	
 16a:	0e 0e       	addx	r0h,r6l
 16c:	18 00       	sub.b	r0h,r0h
 16e:	05 02       	xorc	#0x2,ccr
 170:	00 00       	nop	
 172:	0e 16       	addx	r1h,r6h
 174:	19 00       	sub.w	r0,r0
 176:	05 02       	xorc	#0x2,ccr
 178:	00 00       	nop	
 17a:	0e 26       	addx	r2h,r6h
 17c:	18 00       	sub.b	r0h,r0h
 17e:	05 02       	xorc	#0x2,ccr
 180:	00 00       	nop	
 182:	0e 30       	addx	r3h,r0h
 184:	11 00       	shlr.b	r0h
 186:	05 02       	xorc	#0x2,ccr
 188:	00 00       	nop	
 18a:	0e 3a       	addx	r3h,r2l
 18c:	20 00       	mov.b	@0x0:8,r0h
 18e:	05 02       	xorc	#0x2,ccr
 190:	00 00       	nop	
 192:	0e 44       	addx	r4h,r4h
 194:	44 00       	bcc	.0 (0x196)
 196:	05 02       	xorc	#0x2,ccr
 198:	00 00       	nop	
 19a:	0e 58       	addx	r5h,r0l
 19c:	18 00       	sub.b	r0h,r0h
 19e:	05 02       	xorc	#0x2,ccr
 1a0:	00 00       	nop	
 1a2:	0e 66       	addx	r6h,r6h
 1a4:	18 00       	sub.b	r0h,r0h
 1a6:	05 02       	xorc	#0x2,ccr
 1a8:	00 00       	nop	
 1aa:	0e 68       	addx	r6h,r0l
 1ac:	18 00       	sub.b	r0h,r0h
 1ae:	05 02       	xorc	#0x2,ccr
 1b0:	00 00       	nop	
 1b2:	0e 72       	addx	r7h,r2h
 1b4:	19 00       	sub.w	r0,r0
 1b6:	05 02       	xorc	#0x2,ccr
 1b8:	00 00       	nop	
 1ba:	0e 7c       	addx	r7h,r4l
 1bc:	18 00       	sub.b	r0h,r0h
 1be:	05 02       	xorc	#0x2,ccr
 1c0:	00 00       	nop	
 1c2:	0e 84       	addx	r0l,r4h
 1c4:	18 00       	sub.b	r0h,r0h
 1c6:	05 02       	xorc	#0x2,ccr
 1c8:	00 00       	nop	
 1ca:	0e 8e       	addx	r0l,r6l
 1cc:	19 00       	sub.w	r0,r0
 1ce:	05 02       	xorc	#0x2,ccr
 1d0:	00 00       	nop	
 1d2:	0e 94       	addx	r1l,r4h
 1d4:	1a 00       	dec.b	r0h
 1d6:	05 02       	xorc	#0x2,ccr
 1d8:	00 00       	nop	
 1da:	0e a8       	addx	r2l,r0l
 1dc:	18 00       	sub.b	r0h,r0h
 1de:	05 02       	xorc	#0x2,ccr
 1e0:	00 00       	nop	
 1e2:	0e b0       	addx	r3l,r0h
 1e4:	18 00       	sub.b	r0h,r0h
 1e6:	05 02       	xorc	#0x2,ccr
 1e8:	00 00       	nop	
 1ea:	0e c4       	addx	r4l,r4h
 1ec:	18 00       	sub.b	r0h,r0h
 1ee:	05 02       	xorc	#0x2,ccr
 1f0:	00 00       	nop	
 1f2:	0e cc       	addx	r4l,r4l
 1f4:	18 00       	sub.b	r0h,r0h
 1f6:	05 02       	xorc	#0x2,ccr
 1f8:	00 00       	nop	
 1fa:	0e e0       	addx	r6l,r0h
 1fc:	18 00       	sub.b	r0h,r0h
 1fe:	05 02       	xorc	#0x2,ccr
 200:	00 00       	nop	
 202:	0e e8       	addx	r6l,r0l
 204:	19 00       	sub.w	r0,r0
 206:	05 02       	xorc	#0x2,ccr
 208:	00 00       	nop	
 20a:	0e f2       	addx	r7l,r2h
 20c:	00 01       	.word	H'0,H'1
 20e:	01        	.word	H'1,H'0

0000020f <.Ldebug_line0>:
 20f:	00 00       	nop	
 211:	00 9a       	.word	H'0,H'9a
 213:	00 04       	.word	H'0,H'4
 215:	00 00       	nop	
 217:	00 32       	.word	H'0,H'32
 219:	01 01       	.word	H'1,H'1
 21b:	01 f6       	.word	H'1,H'f6
 21d:	f2 0d       	mov.b	#0xd,r2h
 21f:	00 01       	.word	H'0,H'1
 221:	01 01       	.word	H'1,H'1
 223:	01 00       	.word	H'1,H'0
 225:	00 00       	nop	
 227:	01 00       	.word	H'1,H'0
 229:	00 01       	.word	H'0,H'1
 22b:	00 69       	.word	H'0,H'69
 22d:	6e 74 65 72 	mov.b	@(0x6572:16,er7),r4h
 231:	72 75       	bclr	#0x7,r5h
 233:	70 74       	bset	#0x7,r4h
 235:	2e 63       	mov.b	@0x63:8,r6l
 237:	00 00       	nop	
 239:	00 00       	nop	
 23b:	69 6e       	mov.w	@er6,e6
 23d:	74 65       	bor	#0x6,r5h
 23f:	72 72       	bclr	#0x7,r2h
 241:	75 70       	bxor	#0x7,r0h
 243:	74 2e       	bor	#0x2,r6l
 245:	68 00       	mov.b	@er0,r0h
 247:	00 00       	nop	
 249:	00 00       	nop	
 24b:	00 05       	.word	H'0,H'5
 24d:	02 00       	stc	ccr,r0h
 24f:	00 02       	.word	H'0,H'2
 251:	b0 1d       	subx	#0x1d,r0h
 253:	00 05       	.word	H'0,H'5
 255:	02 00       	stc	ccr,r0h
 257:	00 02       	.word	H'0,H'2
 259:	b6 21       	subx	#0x21,r6h
 25b:	00 05       	.word	H'0,H'5
 25d:	02 00       	stc	ccr,r0h
 25f:	00 03       	.word	H'0,H'3
 261:	30 12       	mov.b	r0h,@0x12:8
 263:	00 05       	.word	H'0,H'5
 265:	02 00       	stc	ccr,r0h
 267:	00 03       	.word	H'0,H'3
 269:	38 1b       	mov.b	r0l,@0x1b:8
 26b:	00 05       	.word	H'0,H'5
 26d:	02 00       	stc	ccr,r0h
 26f:	00 03       	.word	H'0,H'3
 271:	3e 18       	mov.b	r6l,@0x18:8
 273:	00 05       	.word	H'0,H'5
 275:	02 00       	stc	ccr,r0h
 277:	00 03       	.word	H'0,H'3
 279:	4e 19       	.word	H'4e,H'19
 27b:	00 05       	.word	H'0,H'5
 27d:	02 00       	stc	ccr,r0h
 27f:	00 03       	.word	H'0,H'3
 281:	56 1e       	.word	H'56,H'1e
 283:	00 05       	.word	H'0,H'5
 285:	02 00       	stc	ccr,r0h
 287:	00 03       	.word	H'0,H'3
 289:	5c 18       	.word	H'5c,H'18
 28b:	00 05       	.word	H'0,H'5
 28d:	02 00       	stc	ccr,r0h
 28f:	00 03       	.word	H'0,H'3
 291:	6e 18 00 05 	mov.b	@(0x5:16,er1),r0l
 295:	02 00       	stc	ccr,r0h
 297:	00 03       	.word	H'0,H'3
 299:	70 18       	bset	#0x1,r0l
 29b:	00 05       	.word	H'0,H'5
 29d:	02 00       	stc	ccr,r0h
 29f:	00 03       	.word	H'0,H'3
 2a1:	72 18       	bclr	#0x1,r0l
 2a3:	00 05       	.word	H'0,H'5
 2a5:	02 00       	stc	ccr,r0h
 2a7:	00 03       	.word	H'0,H'3
 2a9:	78 00       	.word	H'78,H'0
 2ab:	01 01       	.word	H'1,H'1

000002ad <.Ldebug_line0>:
 2ad:	00 00       	nop	
 2af:	03 85       	.word	H'3,H'85
softvec_init():
/home/interrupt.c:7
{
 2b1:	00 04       	.word	H'0,H'4
 2b3:	00 00       	nop	
 2b5:	00 29       	.word	H'0,H'29
softvec_setintr():
/home/interrupt.c:17
  SOFTVECS[type] = handler;
 2b7:	01 01       	.word	H'1,H'1
 2b9:	01 f6       	.word	H'1,H'f6
 2bb:	f2 0d       	mov.b	#0xd,r2h
 2bd:	00 01       	.word	H'0,H'1
 2bf:	01 01       	.word	H'1,H'1
 2c1:	01 00       	.word	H'1,H'0
 2c3:	00 00       	nop	
 2c5:	01 00       	.word	H'1,H'0
 2c7:	00 01       	.word	H'0,H'1
 2c9:	00 6c       	.word	H'0,H'6c
 2cb:	69 62       	mov.w	@er6,r2
 2cd:	2e 63       	mov.b	@0x63:8,r6l
 2cf:	00 00       	nop	
 2d1:	00 00       	nop	
 2d3:	73 65       	btst	#0x6,r5h
 2d5:	72 69       	bclr	#0x6,r1l
 2d7:	61 6c       	bnot	r6h,r4l
 2d9:	2e 68       	mov.b	@0x68:8,r6l
 2db:	00 00       	nop	
 2dd:	00 00       	nop	
 2df:	00 00       	nop	
 2e1:	05 02       	xorc	#0x2,ccr
 2e3:	00 00       	nop	
 2e5:	03 78       	ldc	er0,sbr
 2e7:	1c 00       	cmp.b	r0h,r0h
 2e9:	05 02       	xorc	#0x2,ccr
 2eb:	00 00       	nop	
 2ed:	03 82       	.word	H'3,H'82
 2ef:	19 00       	sub.w	r0,r0
 2f1:	05 02       	xorc	#0x2,ccr
 2f3:	00 00       	nop	
 2f5:	03 88       	.word	H'3,H'88
 2f7:	00 02       	.word	H'0,H'2
 2f9:	04 03       	orc	#0x3,ccr
 2fb:	18 00       	sub.b	r0h,r0h
 2fd:	05 02       	xorc	#0x2,ccr
 2ff:	00 00       	nop	
 301:	03 90       	.word	H'3,H'90
 303:	00 02       	.word	H'0,H'2
 305:	04 01       	orc	#0x1,ccr
 307:	16 00       	and.b	r0h,r0h
 309:	05 02       	xorc	#0x2,ccr
 30b:	00 00       	nop	
 30d:	03 94       	.word	H'3,H'94
 30f:	00 02       	.word	H'0,H'2
 311:	04 00       	orc	#0x0,ccr
 313:	1a 00       	dec.b	r0h
 315:	05 02       	xorc	#0x2,ccr
 317:	00 00       	nop	
 319:	03 9e       	.word	H'3,H'9e
 31b:	1a 00       	dec.b	r0h
 31d:	05 02       	xorc	#0x2,ccr
 31f:	00 00       	nop	
 321:	03 ac       	ldmac	er4,mach
 323:	1a 00       	dec.b	r0h
 325:	05 02       	xorc	#0x2,ccr
 327:	00 00       	nop	
 329:	03 b0       	ldmac	er0,macl
 32b:	00 02       	.word	H'0,H'2
 32d:	04 02       	orc	#0x2,ccr
 32f:	18 00       	sub.b	r0h,r0h
softvec_init():
/home/interrupt.c:12
}
 331:	05 02       	xorc	#0x2,ccr
 333:	00 00       	nop	
 335:	03 c2       	.word	H'3,H'c2
 337:	00 02       	.word	H'0,H'2
softvec_setintr():
/home/interrupt.c:16
{
 339:	04 01       	orc	#0x1,ccr
 33b:	16 00       	and.b	r0h,r0h
 33d:	05 02       	xorc	#0x2,ccr
/home/interrupt.c:17
  SOFTVECS[type] = handler;
 33f:	00 00       	nop	
 341:	03 c6       	.word	H'3,H'c6
 343:	00 02       	.word	H'0,H'2
 345:	04 00       	orc	#0x0,ccr
 347:	1a 00       	dec.b	r0h
 349:	05 02       	xorc	#0x2,ccr
 34b:	00 00       	nop	
 34d:	03 d4       	.word	H'3,H'd4
/home/interrupt.c:19
}
 34f:	1a 00       	dec.b	r0h
 351:	05 02       	xorc	#0x2,ccr
 353:	00 00       	nop	
 355:	03 e0       	.word	H'3,H'e0
interrupt():
/home/interrupt.c:26
{
 357:	19 00       	sub.w	r0,r0
 359:	05 02       	xorc	#0x2,ccr
 35b:	00 00       	nop	
/home/interrupt.c:27
  softvec_handler_t handler = SOFTVECS[type];
 35d:	03 e2       	.word	H'3,H'e2
 35f:	18 00       	sub.b	r0h,r0h
 361:	05 02       	xorc	#0x2,ccr
 363:	00 00       	nop	
 365:	03 ea       	.word	H'3,H'ea
 367:	18 00       	sub.b	r0h,r0h
 369:	05 02       	xorc	#0x2,ccr
 36b:	00 00       	nop	
 36d:	03 f2       	.word	H'3,H'f2
/home/interrupt.c:28
  if (handler)
 36f:	18 00       	sub.b	r0h,r0h
/home/interrupt.c:29
    handler(type, sp);
 371:	05 02       	xorc	#0x2,ccr
/home/interrupt.c:30
}
 373:	00 00       	nop	
 375:	03 f4       	.word	H'3,H'f4
 377:	18 00       	sub.b	r0h,r0h
memset():
/home/lib.c:6
{
 379:	05 02       	xorc	#0x2,ccr
 37b:	00 00       	nop	
 37d:	03 fa       	.word	H'3,H'fa
 37f:	00 02       	.word	H'0,H'2
 381:	04 01       	orc	#0x1,ccr
/home/lib.c:8
  for (p = b; len > 0; len--)
 383:	13 00       	rotxr.b	r0h
 385:	05 02       	xorc	#0x2,ccr
 387:	00 00       	nop	
/home/lib.c:9 (discriminator 3)
    *(p++) = c;
 389:	03 fe       	.word	H'3,H'fe
 38b:	00 02       	.word	H'0,H'2
 38d:	04 00       	orc	#0x0,ccr
 38f:	1d 00       	cmp.w	r0,r0
/home/lib.c:8 (discriminator 1)
  for (p = b; len > 0; len--)
 391:	05 02       	xorc	#0x2,ccr
 393:	00 00       	nop	
/home/lib.c:11
}
 395:	04 02       	orc	#0x2,ccr
 397:	13 00       	rotxr.b	r0h
 399:	05 02       	xorc	#0x2,ccr
 39b:	00 00       	nop	
 39d:	04 06       	orc	#0x6,ccr
memcpy():
/home/lib.c:14
{
 39f:	1c 00       	cmp.b	r0h,r0h
 3a1:	05 02       	xorc	#0x2,ccr
 3a3:	00 00       	nop	
 3a5:	04 10       	orc	#0x10,ccr
 3a7:	1a 00       	dec.b	r0h
 3a9:	05 02       	xorc	#0x2,ccr
 3ab:	00 00       	nop	
/home/lib.c:17
  for (; len > 0; len--)
 3ad:	04 16       	orc	#0x16,ccr
 3af:	19 00       	sub.w	r0,r0
/home/lib.c:18 (discriminator 2)
    *(d++) = *(s++);
 3b1:	05 02       	xorc	#0x2,ccr
 3b3:	00 00       	nop	
 3b5:	04 1a       	orc	#0x1a,ccr
 3b7:	00 02       	.word	H'0,H'2
 3b9:	04 03       	orc	#0x3,ccr
 3bb:	06 01       	andc	#0x1,ccr
 3bd:	00 05       	.word	H'0,H'5
 3bf:	02 00       	stc	ccr,r0h
 3c1:	00 04       	.word	H'0,H'4
/home/lib.c:17 (discriminator 1)
  for (; len > 0; len--)
 3c3:	1e 00       	subx	r0h,r0h
 3c5:	02 04       	stc	ccr,r4h
/home/lib.c:20
}
 3c7:	01 01       	.word	H'1,H'1
 3c9:	00 05       	.word	H'0,H'5
 3cb:	02 00       	stc	ccr,r0h
 3cd:	00 04       	.word	H'0,H'4
 3cf:	22 00       	mov.b	@0x0:8,r2h
 3d1:	02 04       	stc	ccr,r4h
 3d3:	00 06       	.word	H'0,H'6
memcmp():
/home/lib.c:23
{
 3d5:	1a 00       	dec.b	r0h
 3d7:	05 02       	xorc	#0x2,ccr
 3d9:	00 00       	nop	
 3db:	04 2a       	orc	#0x2a,ccr
 3dd:	1a 00       	dec.b	r0h
 3df:	05 02       	xorc	#0x2,ccr
/home/lib.c:25
  for (; len > 0; len--) {
 3e1:	00 00       	nop	
/home/lib.c:26
    if (*p1 != *p2)
 3e3:	04 30       	orc	#0x30,ccr
 3e5:	01 00       	.word	H'1,H'0
 3e7:	05 02       	xorc	#0x2,ccr
 3e9:	00 00       	nop	
/home/lib.c:27
      return (*p1 > *p2) ? 1 : -1;
 3eb:	04 32       	orc	#0x32,ccr
 3ed:	1a 00       	dec.b	r0h
 3ef:	05 02       	xorc	#0x2,ccr
 3f1:	00 00       	nop	
/home/lib.c:28
    p1++;
 3f3:	04 36       	orc	#0x36,ccr
/home/lib.c:29
    p2++;
 3f5:	18 00       	sub.b	r0h,r0h
 3f7:	05 02       	xorc	#0x2,ccr
 3f9:	00 00       	nop	
/home/lib.c:25 (discriminator 1)
  for (; len > 0; len--) {
 3fb:	04 3a       	orc	#0x3a,ccr
 3fd:	15 00       	xor.b	r0h,r0h
/home/lib.c:31
  return 0;
 3ff:	05 02       	xorc	#0x2,ccr
 401:	00 00       	nop	
/home/lib.c:27
      return (*p1 > *p2) ? 1 : -1;
 403:	04 3e       	orc	#0x3e,ccr
 405:	18 00       	sub.b	r0h,r0h
/home/lib.c:32
}
 407:	05 02       	xorc	#0x2,ccr
 409:	00 00       	nop	
 40b:	04 40       	orc	#0x40,ccr
 40d:	1b 00       	subs	#1,er0
 40f:	05 02       	xorc	#0x2,ccr
strlen():
/home/lib.c:35
{
 411:	00 00       	nop	
 413:	04 46       	orc	#0x46,ccr
 415:	1a 00       	dec.b	r0h
/home/lib.c:37
  for (len = 0; *s; s++, len++)
 417:	05 02       	xorc	#0x2,ccr
 419:	00 00       	nop	
/home/lib.c:37 (discriminator 3)
 41b:	04 4c       	orc	#0x4c,ccr
 41d:	18 00       	sub.b	r0h,r0h
/home/lib.c:37 (discriminator 1)
 41f:	05 02       	xorc	#0x2,ccr
 421:	00 00       	nop	
/home/lib.c:40
}
 423:	04 4e       	orc	#0x4e,ccr
 425:	18 00       	sub.b	r0h,r0h
 427:	05 02       	xorc	#0x2,ccr
 429:	00 00       	nop	
strcpy():
/home/lib.c:43
{
 42b:	04 52       	orc	#0x52,ccr
 42d:	18 00       	sub.b	r0h,r0h
 42f:	05 02       	xorc	#0x2,ccr
 431:	00 00       	nop	
/home/lib.c:46
    *dst = *src;
 433:	04 5a       	orc	#0x5a,ccr
 435:	18 00       	sub.b	r0h,r0h
/home/lib.c:47
    if (!*src) break;
 437:	05 02       	xorc	#0x2,ccr
 439:	00 00       	nop	
/home/lib.c:45
  for (;; dst++, src++) {
 43b:	04 5c       	orc	#0x5c,ccr
 43d:	18 00       	sub.b	r0h,r0h
/home/lib.c:46
    *dst = *src;
 43f:	05 02       	xorc	#0x2,ccr
/home/lib.c:50
}
 441:	00 00       	nop	
 443:	04 5e       	orc	#0x5e,ccr
 445:	13 00       	rotxr.b	r0h
strcmp():
/home/lib.c:53
{
 447:	05 02       	xorc	#0x2,ccr
 449:	00 00       	nop	
 44b:	04 66       	orc	#0x66,ccr
/home/lib.c:54
  while (*s1 || *s2) {
 44d:	00 02       	.word	H'0,H'2
/home/lib.c:55
    if (*s1 != *s2)
 44f:	04 01       	orc	#0x1,ccr
 451:	06 01       	andc	#0x1,ccr
/home/lib.c:56
      return (*s1 > *s2) ? 1 : -1;
 453:	00 05       	.word	H'0,H'5
 455:	02 00       	stc	ccr,r0h
 457:	00 04       	.word	H'0,H'4
 459:	74 00       	bor	#0x0,r0h
/home/lib.c:57
    s1++;
 45b:	02 04       	stc	ccr,r4h
/home/lib.c:58
    s2++;
 45d:	00 06       	.word	H'0,H'6
/home/lib.c:54
  while (*s1 || *s2) {
 45f:	19 00       	sub.w	r0,r0
 461:	05 02       	xorc	#0x2,ccr
 463:	00 00       	nop	
 465:	04 78       	orc	#0x78,ccr
/home/lib.c:54 (discriminator 1)
 467:	1c 00       	cmp.b	r0h,r0h
 469:	05 02       	xorc	#0x2,ccr
 46b:	00 00       	nop	
 46d:	04 7e       	orc	#0x7e,ccr
 46f:	1a 00       	dec.b	r0h
 471:	05 02       	xorc	#0x2,ccr
 473:	00 00       	nop	
/home/lib.c:56
      return (*s1 > *s2) ? 1 : -1;
 475:	04 88       	orc	#0x88,ccr
 477:	18 00       	sub.b	r0h,r0h
/home/lib.c:61
}
 479:	05 02       	xorc	#0x2,ccr
 47b:	00 00       	nop	
 47d:	04 8a       	orc	#0x8a,ccr
strncmp():
/home/lib.c:64
{
 47f:	18 00       	sub.b	r0h,r0h
 481:	05 02       	xorc	#0x2,ccr
 483:	00 00       	nop	
 485:	04 90       	orc	#0x90,ccr
 487:	18 00       	sub.b	r0h,r0h
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 489:	05 02       	xorc	#0x2,ccr
/home/lib.c:66
    if (*s1 != *s2)
 48b:	00 00       	nop	
 48d:	04 98       	orc	#0x98,ccr
 48f:	18 00       	sub.b	r0h,r0h
/home/lib.c:67
      return (*s1 > *s2) ? 1 : -1;
 491:	05 02       	xorc	#0x2,ccr
 493:	00 00       	nop	
 495:	04 9a       	orc	#0x9a,ccr
 497:	18 00       	sub.b	r0h,r0h
/home/lib.c:68
    s1++;
 499:	05 02       	xorc	#0x2,ccr
/home/lib.c:69
    s2++;
 49b:	00 00       	nop	
/home/lib.c:70
    len--;
 49d:	04 9c       	orc	#0x9c,ccr
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 49f:	18 00       	sub.b	r0h,r0h
 4a1:	05 02       	xorc	#0x2,ccr
/home/lib.c:65 (discriminator 2)
 4a3:	00 00       	nop	
 4a5:	04 9e       	orc	#0x9e,ccr
 4a7:	12 00       	rotxl.b	r0h
/home/lib.c:65 (discriminator 3)
 4a9:	05 02       	xorc	#0x2,ccr
 4ab:	00 00       	nop	
/home/lib.c:72
  return 0;
 4ad:	04 a2       	orc	#0xa2,ccr
 4af:	00 02       	.word	H'0,H'2
/home/lib.c:67
      return (*s1 > *s2) ? 1 : -1;
 4b1:	04 02       	orc	#0x2,ccr
 4b3:	06 01       	andc	#0x1,ccr
 4b5:	00 05       	.word	H'0,H'5
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 4b7:	02 00       	stc	ccr,r0h
 4b9:	00 04       	.word	H'0,H'4
 4bb:	a8 00       	cmp.b	#0x0,r0l
 4bd:	02 04       	stc	ccr,r4h
 4bf:	03 01       	ldc	r1h,ccr
 4c1:	00 05       	.word	H'0,H'5
/home/lib.c:73
}
 4c3:	02 00       	stc	ccr,r0h
 4c5:	00 04       	.word	H'0,H'4
 4c7:	ac 00       	cmp.b	#0x0,r4l
 4c9:	02 04       	stc	ccr,r4h
 4cb:	00 06       	.word	H'0,H'6
putc():
/home/lib.c:77
{
 4cd:	1e 00       	subx	r0h,r0h
 4cf:	05 02       	xorc	#0x2,ccr
 4d1:	00 00       	nop	
 4d3:	04 b0       	orc	#0xb0,ccr
 4d5:	12 00       	rotxl.b	r0h
 4d7:	05 02       	xorc	#0x2,ccr
/home/lib.c:78
  if (c == '\n')
 4d9:	00 00       	nop	
 4db:	04 b6       	orc	#0xb6,ccr
/home/lib.c:79
    serial_send_byte(SERIAL_DEFAULT_DEVICE, '\r');
 4dd:	15 00       	xor.b	r0h,r0h
 4df:	05 02       	xorc	#0x2,ccr
 4e1:	00 00       	nop	
 4e3:	04 c2       	orc	#0xc2,ccr
 4e5:	1f 00       	das	r0h
/home/lib.c:80
  return serial_send_byte(SERIAL_DEFAULT_DEVICE, c);
 4e7:	05 02       	xorc	#0x2,ccr
 4e9:	00 00       	nop	
 4eb:	04 cc       	orc	#0xcc,ccr
 4ed:	1b 00       	subs	#1,er0
 4ef:	05 02       	xorc	#0x2,ccr
/home/lib.c:81
}
 4f1:	00 00       	nop	
 4f3:	04 d8       	orc	#0xd8,ccr
 4f5:	18 00       	sub.b	r0h,r0h
 4f7:	05 02       	xorc	#0x2,ccr
 4f9:	00 00       	nop	
getc():
/home/lib.c:85
{
 4fb:	04 dc       	orc	#0xdc,ccr
 4fd:	18 00       	sub.b	r0h,r0h
 4ff:	05 02       	xorc	#0x2,ccr
 501:	00 00       	nop	
 503:	04 e6       	orc	#0xe6,ccr
/home/lib.c:86
  unsigned char c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 505:	18 00       	sub.b	r0h,r0h
 507:	05 02       	xorc	#0x2,ccr
 509:	00 00       	nop	
 50b:	04 f0       	orc	#0xf0,ccr
 50d:	18 00       	sub.b	r0h,r0h
/home/lib.c:87
  c = (c == '\r') ? '\n' : c;
 50f:	05 02       	xorc	#0x2,ccr
 511:	00 00       	nop	
 513:	04 fa       	orc	#0xfa,ccr
/home/lib.c:88 (discriminator 4)
  putc(c); /* エコー・バック */
 515:	1b 00       	subs	#1,er0
 517:	05 02       	xorc	#0x2,ccr
 519:	00 00       	nop	
/home/lib.c:90
}
 51b:	05 04       	xorc	#0x4,ccr
 51d:	18 00       	sub.b	r0h,r0h
 51f:	05 02       	xorc	#0x2,ccr
 521:	00 00       	nop	
 523:	05 0e       	xorc	#0xe,ccr
 525:	18 00       	sub.b	r0h,r0h
puts():
/home/lib.c:94
{
 527:	05 02       	xorc	#0x2,ccr
 529:	00 00       	nop	
 52b:	05 14       	xorc	#0x14,ccr
 52d:	00 02       	.word	H'0,H'2
 52f:	04 04       	orc	#0x4,ccr
 531:	18 00       	sub.b	r0h,r0h
/home/lib.c:95
  while (*str)
 533:	05 02       	xorc	#0x2,ccr
/home/lib.c:96
    putc(*(str++));
 535:	00 00       	nop	
 537:	05 1a       	xorc	#0x1a,ccr
 539:	19 00       	sub.w	r0,r0
/home/lib.c:95
  while (*str)
 53b:	05 02       	xorc	#0x2,ccr
 53d:	00 00       	nop	
/home/lib.c:98
}
 53f:	05 26       	xorc	#0x26,ccr
 541:	00 02       	.word	H'0,H'2
 543:	04 00       	orc	#0x0,ccr
 545:	1b 00       	subs	#1,er0
 547:	05 02       	xorc	#0x2,ccr
 549:	00 00       	nop	
gets():
/home/lib.c:102
{
 54b:	05 32       	xorc	#0x32,ccr
 54d:	18 00       	sub.b	r0h,r0h
 54f:	05 02       	xorc	#0x2,ccr
 551:	00 00       	nop	
 553:	05 34       	xorc	#0x34,ccr
 555:	18 00       	sub.b	r0h,r0h
 557:	05 02       	xorc	#0x2,ccr
 559:	00 00       	nop	
 55b:	05 3a       	xorc	#0x3a,ccr
 55d:	16 00       	and.b	r0h,r0h
 55f:	05 02       	xorc	#0x2,ccr
 561:	00 00       	nop	
/home/lib.c:106
    c = getc();
 563:	05 3e       	xorc	#0x3e,ccr
 565:	1a 00       	dec.b	r0h
 567:	05 02       	xorc	#0x2,ccr
 569:	00 00       	nop	
 56b:	05 4a       	xorc	#0x4a,ccr
/home/lib.c:107
    if (c == '\n')
 56d:	1b 00       	subs	#1,er0
 56f:	05 02       	xorc	#0x2,ccr
 571:	00 00       	nop	
 573:	05 5c       	xorc	#0x5c,ccr
 575:	01 00       	.word	H'1,H'0
/home/lib.c:108
      c = '\0';
 577:	05 02       	xorc	#0x2,ccr
/home/lib.c:109
    buf[i++] = c;
 579:	00 00       	nop	
 57b:	05 62       	xorc	#0x62,ccr
/home/lib.c:110
  } while (c);
 57d:	1b 00       	subs	#1,er0
/home/lib.c:112
}
 57f:	05 02       	xorc	#0x2,ccr
 581:	00 00       	nop	
 583:	05 6c       	xorc	#0x6c,ccr
 585:	18 00       	sub.b	r0h,r0h
 587:	05 02       	xorc	#0x2,ccr
 589:	00 00       	nop	
 58b:	05 76       	xorc	#0x76,ccr
 58d:	18 00       	sub.b	r0h,r0h
 58f:	05 02       	xorc	#0x2,ccr
putxval():
/home/lib.c:116
{
 591:	00 00       	nop	
 593:	05 78       	xorc	#0x78,ccr
 595:	18 00       	sub.b	r0h,r0h
 597:	05 02       	xorc	#0x2,ccr
 599:	00 00       	nop	
 59b:	05 7c       	xorc	#0x7c,ccr
 59d:	18 00       	sub.b	r0h,r0h
 59f:	05 02       	xorc	#0x2,ccr
/home/lib.c:121
  *(p--) = '\0';
 5a1:	00 00       	nop	
 5a3:	05 7e       	xorc	#0x7e,ccr
 5a5:	19 00       	sub.w	r0,r0
/home/lib.c:123
  if (!value && !column)
 5a7:	05 02       	xorc	#0x2,ccr
 5a9:	00 00       	nop	
/home/lib.c:123 (discriminator 1)
 5ab:	05 90       	xorc	#0x90,ccr
 5ad:	1b 00       	subs	#1,er0
/home/lib.c:124
    column++;
 5af:	05 02       	xorc	#0x2,ccr
 5b1:	00 00       	nop	
 5b3:	05 a0       	xorc	#0xa0,ccr
 5b5:	1c 00       	cmp.b	r0h,r0h
 5b7:	05 02       	xorc	#0x2,ccr
/home/lib.c:127
    *(p--) = "0123456789abcdef"[value & 0xf];
 5b9:	00 00       	nop	
 5bb:	05 a6       	xorc	#0xa6,ccr
 5bd:	19 00       	sub.w	r0,r0
 5bf:	05 02       	xorc	#0x2,ccr
 5c1:	00 00       	nop	
 5c3:	05 aa       	xorc	#0xaa,ccr
 5c5:	00 02       	.word	H'0,H'2
 5c7:	04 01       	orc	#0x1,ccr
 5c9:	06 01       	andc	#0x1,ccr
 5cb:	00 05       	.word	H'0,H'5
/home/lib.c:128
    value >>= 4;
 5cd:	02 00       	stc	ccr,r0h
 5cf:	00 05       	.word	H'0,H'5
 5d1:	ae 00       	cmp.b	#0x0,r6l
 5d3:	02 04       	stc	ccr,r4h
/home/lib.c:129
    if (column) column--;
 5d5:	00 06       	.word	H'0,H'6
 5d7:	18 00       	sub.b	r0h,r0h
/home/lib.c:129 (discriminator 1)
 5d9:	05 02       	xorc	#0x2,ccr
 5db:	00 00       	nop	
/home/lib.c:126
  while (value || column) {
 5dd:	05 b8       	xorc	#0xb8,ccr
 5df:	1a 00       	dec.b	r0h
/home/lib.c:126 (discriminator 1)
 5e1:	05 02       	xorc	#0x2,ccr
 5e3:	00 00       	nop	
/home/lib.c:132
  puts(p + 1);
 5e5:	05 cc       	xorc	#0xcc,ccr
 5e7:	18 00       	sub.b	r0h,r0h
 5e9:	05 02       	xorc	#0x2,ccr
 5eb:	00 00       	nop	
/home/lib.c:135
}
 5ed:	05 d4       	xorc	#0xd4,ccr
 5ef:	18 00       	sub.b	r0h,r0h
 5f1:	05 02       	xorc	#0x2,ccr
 5f3:	00 00       	nop	
 5f5:	05 d8       	xorc	#0xd8,ccr
 5f7:	00 02       	.word	H'0,H'2
 5f9:	04 01       	orc	#0x1,ccr
 5fb:	06 01       	andc	#0x1,ccr
 5fd:	00 05       	.word	H'0,H'5
serial_init():
/home/serial.c:59
{
 5ff:	02 00       	stc	ccr,r0h
 601:	00 05       	.word	H'0,H'5
 603:	dc 00       	xor.b	#0x0,r4l
/home/serial.c:60
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 605:	02 04       	stc	ccr,r4h
 607:	00 06       	.word	H'0,H'6
 609:	14 00       	or.b	r0h,r0h
 60b:	05 02       	xorc	#0x2,ccr
 60d:	00 00       	nop	
 60f:	05 e0       	xorc	#0xe0,ccr
 611:	00 02       	.word	H'0,H'2
 613:	04 01       	orc	#0x1,ccr
/home/serial.c:62
  sci->scr = 0;
 615:	06 01       	andc	#0x1,ccr
 617:	00 05       	.word	H'0,H'5
 619:	02 00       	stc	ccr,r0h
/home/serial.c:63
  sci->smr = 0;
 61b:	00 05       	.word	H'0,H'5
/home/serial.c:64
  sci->brr = 64; /* 20MHzのクロックから9600bpsを生成(25MHzの場合は80にする) */
 61d:	e4 00       	and.b	#0x0,r4h
 61f:	02 04       	stc	ccr,r4h
 621:	00 06       	.word	H'0,H'6
/home/serial.c:65
  sci->scr = H8_3069F_SCI_SCR_RE | H8_3069F_SCI_SCR_TE; /* 送受信可能 */
 623:	1d 00       	cmp.w	r0,r0
 625:	05 02       	xorc	#0x2,ccr
 627:	00 00       	nop	
/home/serial.c:66
  sci->ssr = 0;
 629:	05 ec       	xorc	#0xec,ccr
 62b:	1a 00       	dec.b	r0h
/home/serial.c:69
}
 62d:	05 02       	xorc	#0x2,ccr
 62f:	00 00       	nop	
 631:	05 fe       	xorc	#0xfe,ccr
 633:	00 01       	.word	H'0,H'1
serial_is_send_enable():
/home/serial.c:73
{
 635:	01        	.word	H'1,H'0

00000636 <.Ldebug_line0>:
.Ldebug_line0():
 636:	00 00       	nop	
serial_is_send_enable():
/home/serial.c:73
 638:	01 3d       	.word	H'1,H'3d
/home/serial.c:74
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 63a:	00 04       	.word	H'0,H'4
 63c:	00 00       	nop	
 63e:	00 2d       	.word	H'0,H'2d
 640:	01 01       	.word	H'1,H'1
 642:	01 f6       	.word	H'1,H'f6
 644:	f2 0d       	mov.b	#0xd,r2h
 646:	00 01       	.word	H'0,H'1
 648:	01 01       	.word	H'1,H'1
/home/serial.c:75
  return (sci->ssr & H8_3069F_SCI_SSR_TDRE);
 64a:	01 00       	.word	H'1,H'0
 64c:	00 00       	nop	
 64e:	01 00       	.word	H'1,H'0
/home/serial.c:76
}
 650:	00 01       	.word	H'0,H'1
 652:	00 73       	.word	H'0,H'73
 654:	65 72       	xor.w	r7,r2
 656:	69 61       	mov.w	@er6,r1
serial_send_byte():
/home/serial.c:80
{
 658:	6c 2e       	mov.b	@er2+,r6l
 65a:	63 00       	btst	r0h,r0h
 65c:	00 00       	nop	
/home/serial.c:81
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 65e:	00 64       	.word	H'0,H'64
 660:	65 66       	xor.w	r6,r6
 662:	69 6e       	mov.w	@er6,e6
 664:	65 73       	xor.w	r7,r3
 666:	2e 68       	mov.b	@0x68:8,r6l
 668:	00 00       	nop	
 66a:	00 00       	nop	
 66c:	00 00       	nop	
serial_is_send_enable():
/home/serial.c:75 (discriminator 1)
  return (sci->ssr & H8_3069F_SCI_SSR_TDRE);
 66e:	05 02       	xorc	#0x2,ccr
 670:	00 00       	nop	
serial_send_byte():
/home/serial.c:84
  while (!serial_is_send_enable(index))
 672:	05 fe       	xorc	#0xfe,ccr
/home/serial.c:86
  sci->tdr = c;
 674:	51 00       	divxu.b	r0h,r0
 676:	05 02       	xorc	#0x2,ccr
/home/serial.c:87
  sci->ssr &= ~H8_3069F_SCI_SSR_TDRE; /* 送信開始 */
 678:	00 00       	nop	
 67a:	06 04       	andc	#0x4,ccr
 67c:	18 00       	sub.b	r0h,r0h
 67e:	05 02       	xorc	#0x2,ccr
 680:	00 00       	nop	
/home/serial.c:90
}
 682:	06 14       	andc	#0x14,ccr
 684:	19 00       	sub.w	r0,r0
 686:	05 02       	xorc	#0x2,ccr
 688:	00 00       	nop	
serial_is_recv_enable():
/home/serial.c:94
{
 68a:	06 1a       	andc	#0x1a,ccr
 68c:	18 00       	sub.b	r0h,r0h
 68e:	05 02       	xorc	#0x2,ccr
/home/serial.c:95
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 690:	00 00       	nop	
 692:	06 1c       	andc	#0x1c,ccr
 694:	18 00       	sub.b	r0h,r0h
 696:	05 02       	xorc	#0x2,ccr
 698:	00 00       	nop	
 69a:	06 22       	andc	#0x22,ccr
 69c:	18 00       	sub.b	r0h,r0h
 69e:	05 02       	xorc	#0x2,ccr
/home/serial.c:96
  return (sci->ssr & H8_3069F_SCI_SSR_RDRF);
 6a0:	00 00       	nop	
 6a2:	06 28       	andc	#0x28,ccr
 6a4:	18 00       	sub.b	r0h,r0h
/home/serial.c:97
}
 6a6:	05 02       	xorc	#0x2,ccr
 6a8:	00 00       	nop	
 6aa:	06 2c       	andc	#0x2c,ccr
 6ac:	1a 00       	dec.b	r0h
serial_recv_byte():
/home/serial.c:101
{
 6ae:	05 02       	xorc	#0x2,ccr
 6b0:	00 00       	nop	
 6b2:	06 34       	andc	#0x34,ccr
/home/serial.c:102
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 6b4:	1b 00       	subs	#1,er0
 6b6:	05 02       	xorc	#0x2,ccr
 6b8:	00 00       	nop	
 6ba:	06 3a       	andc	#0x3a,ccr
 6bc:	18 00       	sub.b	r0h,r0h
 6be:	05 02       	xorc	#0x2,ccr
 6c0:	00 00       	nop	
 6c2:	06 4a       	andc	#0x4a,ccr
serial_is_recv_enable():
/home/serial.c:96 (discriminator 1)
  return (sci->ssr & H8_3069F_SCI_SSR_RDRF);
 6c4:	18 00       	sub.b	r0h,r0h
 6c6:	05 02       	xorc	#0x2,ccr
serial_recv_byte():
/home/serial.c:106
  while (!serial_is_recv_enable(index))
 6c8:	00 00       	nop	
 6ca:	06 50       	andc	#0x50,ccr
/home/serial.c:108
  c = sci->rdr;
 6cc:	18 00       	sub.b	r0h,r0h
 6ce:	05 02       	xorc	#0x2,ccr
/home/serial.c:109
  sci->ssr &= ~H8_3069F_SCI_SSR_RDRF; /* 受信完了 */
 6d0:	00 00       	nop	
 6d2:	06 58       	andc	#0x58,ccr
 6d4:	1b 00       	subs	#1,er0
 6d6:	05 02       	xorc	#0x2,ccr
 6d8:	00 00       	nop	
/home/serial.c:112
}
 6da:	06 5e       	andc	#0x5e,ccr
 6dc:	18 00       	sub.b	r0h,r0h
 6de:	05 02       	xorc	#0x2,ccr
xmodem_recv():
/home/xmodem.c:60
{
 6e0:	00 00       	nop	
 6e2:	06 6e       	andc	#0x6e,ccr
 6e4:	00 02       	.word	H'0,H'2
 6e6:	04 01       	orc	#0x1,ccr
 6e8:	11 00       	shlr.b	r0h
 6ea:	05 02       	xorc	#0x2,ccr
 6ec:	00 00       	nop	
 6ee:	06 72       	andc	#0x72,ccr
 6f0:	20 00       	mov.b	@0x0:8,r0h
 6f2:	05 02       	xorc	#0x2,ccr
 6f4:	00 00       	nop	
/home/xmodem.c:63
  unsigned char c, block_number = 1;
 6f6:	06 74       	andc	#0x74,ccr
 6f8:	00 02       	.word	H'0,H'2
 6fa:	04 00       	orc	#0x0,ccr
/home/xmodem.c:62
  long size = 0;
 6fc:	19 00       	sub.w	r0,r0
/home/xmodem.c:61
  int r, receiving = 0;
 6fe:	05 02       	xorc	#0x2,ccr
 700:	00 00       	nop	
 702:	06 78       	andc	#0x78,ccr
/home/xmodem.c:66
    if (!receiving)
 704:	18 00       	sub.b	r0h,r0h
 706:	05 02       	xorc	#0x2,ccr
 708:	00 00       	nop	
/home/xmodem.c:69
    c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 70a:	06 82       	andc	#0x82,ccr
 70c:	1a 00       	dec.b	r0h
 70e:	05 02       	xorc	#0x2,ccr
 710:	00 00       	nop	
/home/xmodem.c:71
    if (c == XMODEM_EOT) { /* 受信終了 */
 712:	06 8a       	andc	#0x8a,ccr
 714:	1b 00       	subs	#1,er0
 716:	05 02       	xorc	#0x2,ccr
xmodem_wait():
/home/xmodem.c:22
    if (++cnt >= 50000) {
 718:	00 00       	nop	
 71a:	06 90       	andc	#0x90,ccr
/home/xmodem.c:24
      serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_NAK);
 71c:	18 00       	sub.b	r0h,r0h
 71e:	05 02       	xorc	#0x2,ccr
 720:	00 00       	nop	
 722:	06 a0       	andc	#0xa0,ccr
 724:	18 00       	sub.b	r0h,r0h
xmodem_recv():
/home/xmodem.c:61
  int r, receiving = 0;
 726:	05 02       	xorc	#0x2,ccr
 728:	00 00       	nop	
 72a:	06 a6       	andc	#0xa6,ccr
xmodem_wait():
/home/xmodem.c:21
  while (!serial_is_recv_enable(SERIAL_DEFAULT_DEVICE)) {
 72c:	18 00       	sub.b	r0h,r0h
 72e:	05 02       	xorc	#0x2,ccr
 730:	00 00       	nop	
 732:	06 ae       	andc	#0xae,ccr
 734:	1b 00       	subs	#1,er0
 736:	05 02       	xorc	#0x2,ccr
 738:	00 00       	nop	
 73a:	06 b4       	andc	#0xb4,ccr
 73c:	18 00       	sub.b	r0h,r0h
 73e:	05 02       	xorc	#0x2,ccr
 740:	00 00       	nop	
 742:	06 c4       	andc	#0xc4,ccr
 744:	00 02       	.word	H'0,H'2
xmodem_recv():
/home/xmodem.c:72
      serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_ACK);
 746:	04 01       	orc	#0x1,ccr
 748:	11 00       	shlr.b	r0h
 74a:	05 02       	xorc	#0x2,ccr
 74c:	00 00       	nop	
 74e:	06 c8       	andc	#0xc8,ccr
/home/xmodem.c:93
  return size;
 750:	21 00       	mov.b	@0x0:8,r1h
 752:	05 02       	xorc	#0x2,ccr
/home/xmodem.c:74
    } else if (c == XMODEM_CAN) { /* 受信中断 */
 754:	00 00       	nop	
 756:	06 cc       	andc	#0xcc,ccr
 758:	00 02       	.word	H'0,H'2
/home/xmodem.c:77
      receiving++;
 75a:	04 00       	orc	#0x0,ccr
 75c:	19 00       	sub.w	r0,r0
/home/xmodem.c:76
    } else if (c == XMODEM_SOH) { /* 受信開始 */
 75e:	05 02       	xorc	#0x2,ccr
 760:	00 00       	nop	
 762:	06 d0       	andc	#0xd0,ccr
/home/xmodem.c:77
      receiving++;
 764:	18 00       	sub.b	r0h,r0h
 766:	05 02       	xorc	#0x2,ccr
 768:	00 00       	nop	
xmodem_read_block():
/home/xmodem.c:37
  block_num = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 76a:	06 da       	andc	#0xda,ccr
 76c:	1a 00       	dec.b	r0h
 76e:	05 02       	xorc	#0x2,ccr
 770:	00 00       	nop	
/home/xmodem.c:38
  if (block_num != block_number)
 772:	06 e0       	andc	#0xe0,ccr
 774:	00 01       	.word	H'0,H'1
 776:	01        	.word	H'1,H'0

00000777 <.Ldebug_line0>:
.Ldebug_line0():
 777:	00 00       	nop	
xmodem_read_block():
/home/xmodem.c:38
 779:	01 66       	.word	H'1,H'66
 77b:	00 04       	.word	H'0,H'4
/home/xmodem.c:41
  block_num ^= serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 77d:	00 00       	nop	
 77f:	00 2c       	.word	H'0,H'2c
 781:	01 01       	.word	H'1,H'1
 783:	01 f6       	.word	H'1,H'f6
 785:	f2 0d       	mov.b	#0xd,r2h
 787:	00 01       	.word	H'0,H'1
 789:	01 01       	.word	H'1,H'1
/home/xmodem.c:42
  if (block_num != 0xff)
 78b:	01 00       	.word	H'1,H'0
 78d:	00 00       	nop	
 78f:	01 00       	.word	H'1,H'0
 791:	00 01       	.word	H'0,H'1
 793:	00 78       	.word	H'0,H'78
 795:	6d 6f       	mov.w	@er6+,e7
/home/xmodem.c:45
  check_sum = 0;
 797:	64 65       	or.w	r6,r5
/home/xmodem.c:47
    c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 799:	6d 2e       	mov.w	@er2+,e6
 79b:	63 00       	btst	r0h,r0h
 79d:	00 00       	nop	
 79f:	00 73       	.word	H'0,H'73
 7a1:	65 72       	xor.w	r7,r2
 7a3:	69 61       	mov.w	@er6,r1
 7a5:	6c 2e       	mov.b	@er2+,r6l
 7a7:	68 00       	mov.b	@er0,r0h
 7a9:	00 00       	nop	
 7ab:	00 00       	nop	
 7ad:	00 05       	.word	H'0,H'5
 7af:	02 00       	stc	ccr,r0h
 7b1:	00 06       	.word	H'0,H'6
/home/xmodem.c:48
    *(buf++) = c;
 7b3:	e0 52       	and.b	#0x52,r0h
 7b5:	00 05       	.word	H'0,H'5
 7b7:	02 00       	stc	ccr,r0h
 7b9:	00 06       	.word	H'0,H'6
/home/xmodem.c:49
    check_sum += c;
 7bb:	f6 1a       	mov.b	#0x1a,r6h
 7bd:	00 05       	.word	H'0,H'5
 7bf:	02 00       	stc	ccr,r0h
 7c1:	00 06       	.word	H'0,H'6
 7c3:	fc 16       	mov.b	#0x16,r4l
/home/xmodem.c:46
  for (i = 0; i < XMODEM_BLOCK_SIZE; i++) {
 7c5:	00 05       	.word	H'0,H'5
 7c7:	02 00       	stc	ccr,r0h
 7c9:	00 06       	.word	H'0,H'6
 7cb:	fe 16       	mov.b	#0x16,r6l
 7cd:	00 05       	.word	H'0,H'5
/home/xmodem.c:52
  check_sum ^= serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 7cf:	02 00       	stc	ccr,r0h
 7d1:	00 07       	.word	H'0,H'7
 7d3:	04 1c       	orc	#0x1c,ccr
 7d5:	00 05       	.word	H'0,H'5
 7d7:	02 00       	stc	ccr,r0h
 7d9:	00 07       	.word	H'0,H'7
 7db:	0a 1a       	add.w	#0x1,e2
/home/xmodem.c:53
  if (check_sum)
 7dd:	00 05       	.word	H'0,H'5
 7df:	02 00       	stc	ccr,r0h
 7e1:	00 07       	.word	H'0,H'7
 7e3:	12 19       	rotxl.w	e1
 7e5:	00 05       	.word	H'0,H'5
xmodem_recv():
/home/xmodem.c:82
	block_number++;
 7e7:	02 00       	stc	ccr,r0h
 7e9:	00 07       	.word	H'0,H'7
 7eb:	18 03       	sub.b	r0h,r3h
 7ed:	4f 01       	.word	H'4f,H'1
 7ef:	00 05       	.word	H'0,H'5
/home/xmodem.c:83
	size += r;
 7f1:	02 00       	stc	ccr,r0h
 7f3:	00 07       	.word	H'0,H'7
 7f5:	1c 19       	cmp.b	r1h,r1l
/home/xmodem.c:84
	buf  += r;
 7f7:	00 05       	.word	H'0,H'5
 7f9:	02 00       	stc	ccr,r0h
 7fb:	00 07       	.word	H'0,H'7
/home/xmodem.c:85
	serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_ACK);
 7fd:	26 3c       	mov.b	@0x3c:8,r6h
 7ff:	00 05       	.word	H'0,H'5
/home/xmodem.c:80
	serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_NAK);
 801:	02 00       	stc	ccr,r0h
 803:	00 07       	.word	H'0,H'7
 805:	2c 03       	mov.b	@0x3:8,r4l
 807:	58 01       	.word	H'58,H'1
 809:	00 05       	.word	H'0,H'5
 80b:	02 00       	stc	ccr,r0h
 80d:	00 07       	.word	H'0,H'7
/home/xmodem.c:88
      if (receiving)
 80f:	46 4a       	bne	.+74 (0x85b)
 811:	00 05       	.word	H'0,H'5
 813:	02 00       	stc	ccr,r0h
/home/xmodem.c:75
      return -1;
 815:	00 07       	.word	H'0,H'7
 817:	50 2c       	mulxu.b	r2h,e4
/home/xmodem.c:94
}
 819:	00 05       	.word	H'0,H'5
 81b:	02 00       	stc	ccr,r0h
 81d:	00 07       	.word	H'0,H'7
 81f:	54 03       	rts/l	er3
 821:	6d 01       	mov.w	@er0+,r1
 823:	00 05       	.word	H'0,H'5
 825:	02 00       	stc	ccr,r0h
 827:	00 07       	.word	H'0,H'7
 829:	5a 1a 00 05 	jmp	@0x1a0005:24
 82d:	02 00       	stc	ccr,r0h
elf_load():
/home/elf.c:84
{
 82f:	00 07       	.word	H'0,H'7
 831:	5e 16 00 05 	jsr	@0x160005:24
 835:	02 00       	stc	ccr,r0h
 837:	00 07       	.word	H'0,H'7
 839:	64 18       	or.w	r1,e0
 83b:	00 05       	.word	H'0,H'5
 83d:	02 00       	stc	ccr,r0h
 83f:	00 07       	.word	H'0,H'7
elf_check():
/home/elf.c:44
  if (memcmp(header->id.magic, "\x7f" "ELF", 4))
 841:	6a 03 58 01 	mov.b	@0x5801:16,r3h
 845:	00 05       	.word	H'0,H'5
 847:	02 00       	stc	ccr,r0h
 849:	00 07       	.word	H'0,H'7
 84b:	72 18       	bclr	#0x1,r0l
 84d:	00 05       	.word	H'0,H'5
 84f:	02 00       	stc	ccr,r0h
 851:	00 07       	.word	H'0,H'7
 853:	7c 1a       	.word	H'7c,H'1a
/home/elf.c:47
  if (header->id.class   != 1) return -1; /* ELF32 */
 855:	00 05       	.word	H'0,H'5
 857:	02 00       	stc	ccr,r0h
 859:	00 07       	.word	H'0,H'7
 85b:	8a 18       	add.b	#0x18,r2l
 85d:	00 05       	.word	H'0,H'5
/home/elf.c:48
  if (header->id.format  != 2) return -1; /* Big endian */
 85f:	02 00       	stc	ccr,r0h
 861:	00 07       	.word	H'0,H'7
 863:	96 1a       	addx	#0x1a,r6h
 865:	00 05       	.word	H'0,H'5
 867:	02 00       	stc	ccr,r0h
/home/elf.c:49
  if (header->id.version != 1) return -1; /* version 1 */
 869:	00 07       	.word	H'0,H'7
 86b:	98 19       	addx	#0x19,r0l
 86d:	00 05       	.word	H'0,H'5
 86f:	02 00       	stc	ccr,r0h
 871:	00 07       	.word	H'0,H'7
/home/elf.c:50
  if (header->type       != 2) return -1; /* Executable file */
 873:	b2 18       	subx	#0x18,r2h
 875:	00 05       	.word	H'0,H'5
 877:	02 00       	stc	ccr,r0h
 879:	00 07       	.word	H'0,H'7
 87b:	ba 18       	subx	#0x18,r2l
/home/elf.c:51
  if (header->version    != 1) return -1; /* version 1 */
 87d:	00 05       	.word	H'0,H'5
 87f:	02 00       	stc	ccr,r0h
 881:	00 07       	.word	H'0,H'7
 883:	c4 14       	or.b	#0x14,r4h
 885:	00 05       	.word	H'0,H'5
 887:	02 00       	stc	ccr,r0h
/home/elf.c:54
  if ((header->arch != 46) && (header->arch != 47)) return -1;
 889:	00 07       	.word	H'0,H'7
 88b:	ce 1d       	or.b	#0x1d,r6l
 88d:	00 05       	.word	H'0,H'5
 88f:	02 00       	stc	ccr,r0h
 891:	00 07       	.word	H'0,H'7
 893:	dc 18       	xor.b	#0x18,r4l
 895:	00 05       	.word	H'0,H'5
elf_load_program():
/home/elf.c:69
       header->program_header_size * i);
 897:	02 00       	stc	ccr,r0h
 899:	00 07       	.word	H'0,H'7
 89b:	e6 34       	and.b	#0x34,r6h
 89d:	00 05       	.word	H'0,H'5
 89f:	02 00       	stc	ccr,r0h
/home/elf.c:68
      ((char *)header + header->program_header_offset +
 8a1:	00 07       	.word	H'0,H'7
 8a3:	f0 18       	mov.b	#0x18,r0h
 8a5:	00 05       	.word	H'0,H'5
 8a7:	02 00       	stc	ccr,r0h
/home/elf.c:67
    phdr = (struct elf_program_header *)
 8a9:	00 07       	.word	H'0,H'7
/home/elf.c:71
    if (phdr->type != 1) /* ロード可能なセグメントか？ */
 8ab:	f6 18       	mov.b	#0x18,r6h
 8ad:	00 05       	.word	H'0,H'5
 8af:	02 00       	stc	ccr,r0h
 8b1:	00 07       	.word	H'0,H'7
/home/elf.c:74
    memcpy((char *)phdr->physical_addr, (char *)header + phdr->offset,
 8b3:	fc 18       	mov.b	#0x18,r4l
 8b5:	00 05       	.word	H'0,H'5
 8b7:	02 00       	stc	ccr,r0h
 8b9:	00 08       	.word	H'0,H'8
 8bb:	00 12       	.word	H'0,H'12
 8bd:	00 05       	.word	H'0,H'5
 8bf:	02 00       	stc	ccr,r0h
 8c1:	00 08       	.word	H'0,H'8
 8c3:	0e 1f       	addx	r1h,r7l
 8c5:	00 05       	.word	H'0,H'5
 8c7:	02 00       	stc	ccr,r0h
 8c9:	00 08       	.word	H'0,H'8
 8cb:	14 03       	or.b	r0h,r3h
 8cd:	73 01       	btst	#0x0,r1h
 8cf:	00 05       	.word	H'0,H'5
/home/elf.c:77
	   phdr->memory_size - phdr->file_size);
 8d1:	02 00       	stc	ccr,r0h
 8d3:	00 08       	.word	H'0,H'8
 8d5:	18 2a       	sub.b	r2h,r2l
/home/elf.c:76
    memset((char *)phdr->physical_addr + phdr->file_size, 0,
 8d7:	00 05       	.word	H'0,H'5
 8d9:	02 00       	stc	ccr,r0h
 8db:	00 08       	.word	H'0,H'8
 8dd:	2e 00       	mov.b	@0x0:8,r6l
 8df:	01 01       	.word	H'1,H'1

000008e1 <.Ldebug_line0>:
.Ldebug_line0():
 8e1:	00 00       	nop	
elf_load_program():
/home/elf.c:76
 8e3:	00 d2       	.word	H'0,H'd2
 8e5:	00 04       	.word	H'0,H'4
 8e7:	00 00       	nop	
 8e9:	00 26       	.word	H'0,H'26
 8eb:	01 01       	.word	H'1,H'1
 8ed:	01 f6       	.word	H'1,H'f6
 8ef:	f2 0d       	mov.b	#0xd,r2h
 8f1:	00 01       	.word	H'0,H'1
/home/elf.c:65
  for (i = 0; i < header->program_header_num; i++) {
 8f3:	01 01       	.word	H'1,H'1
 8f5:	01 00       	.word	H'1,H'0
 8f7:	00 00       	nop	
 8f9:	01 00       	.word	H'1,H'0
 8fb:	00 01       	.word	H'0,H'1
elf_load():
/home/elf.c:93
  return (char *)header->entry_point;
 8fd:	00 65       	.word	H'0,H'65
 8ff:	6c 66       	mov.b	@er6+,r6h
 901:	2e 63       	mov.b	@0x63:8,r6l
 903:	00 00       	nop	
/home/elf.c:88
    return NULL;
 905:	00 00       	nop	
/home/elf.c:94
}
 907:	6c 69       	mov.b	@er6+,r1l
 909:	62 2e       	bclr	r2h,r6l
 90b:	68 00       	mov.b	@er0,r0h
 90d:	00 00       	nop	
 90f:	00 00       	nop	
 911:	00 05       	.word	H'0,H'5
 913:	02 00       	stc	ccr,r0h
 915:	00 08       	.word	H'0,H'8
check_val():
/home/dram.c:77
{
 917:	2e 6a       	mov.b	@0x6a:8,r6l
 919:	00 05       	.word	H'0,H'5
 91b:	02 00       	stc	ccr,r0h
 91d:	00 08       	.word	H'0,H'8
/home/dram.c:80
  p->u.val8[0] = wval->u.val8[0]; p->u.val8[1] = wval->u.val8[1];
 91f:	40 03       	bra/s	.+2 (0x923)
 921:	58 01       	.word	H'58,H'1
 923:	00 05       	.word	H'0,H'5
 925:	02 00       	stc	ccr,r0h
 927:	00 08       	.word	H'0,H'8
 929:	54 1a       	.word	H'54,H'1a
/home/dram.c:81
  p->u.val8[2] = wval->u.val8[2]; p->u.val8[3] = wval->u.val8[3];
 92b:	00 05       	.word	H'0,H'5
 92d:	02 00       	stc	ccr,r0h
 92f:	00 08       	.word	H'0,H'8
 931:	5e 18 00 05 	jsr	@0x180005:24
 935:	02 00       	stc	ccr,r0h
 937:	00 08       	.word	H'0,H'8
 939:	68 18       	mov.b	@er1,r0l
/home/dram.c:82
  rval.u.val8[0] = p->u.val8[0]; rval.u.val8[1] = p->u.val8[1];
 93b:	00 05       	.word	H'0,H'5
 93d:	02 00       	stc	ccr,r0h
 93f:	00 08       	.word	H'0,H'8
 941:	72 18       	bclr	#0x1,r0l
 943:	00 05       	.word	H'0,H'5
 945:	02 00       	stc	ccr,r0h
 947:	00 08       	.word	H'0,H'8
/home/dram.c:83
  rval.u.val8[2] = p->u.val8[2]; rval.u.val8[3] = p->u.val8[3];
 949:	7c 18       	.word	H'7c,H'18
 94b:	00 05       	.word	H'0,H'5
 94d:	02 00       	stc	ccr,r0h
 94f:	00 08       	.word	H'0,H'8
 951:	88 1a       	add.b	#0x1a,r0l
 953:	00 05       	.word	H'0,H'5
 955:	02 00       	stc	ccr,r0h
 957:	00 08       	.word	H'0,H'8
/home/dram.c:85
  if (rval.u.val32[0] != wval->u.val32[0])
 959:	96 26       	addx	#0x26,r6h
 95b:	00 05       	.word	H'0,H'5
 95d:	02 00       	stc	ccr,r0h
 95f:	00 08       	.word	H'0,H'8
 961:	a0 16       	cmp.b	#0x16,r0h
 963:	00 05       	.word	H'0,H'5
 965:	02 00       	stc	ccr,r0h
/home/dram.c:86
    return -1;
 967:	00 08       	.word	H'0,H'8
 969:	a8 16       	cmp.b	#0x16,r0l
 96b:	00 05       	.word	H'0,H'5
/home/dram.c:88
  p->u.val16[0] = wval->u.val16[0]; p->u.val16[1] = wval->u.val16[1];
 96d:	02 00       	stc	ccr,r0h
 96f:	00 08       	.word	H'0,H'8
 971:	aa 1b       	cmp.b	#0x1b,r2l
 973:	00 05       	.word	H'0,H'5
 975:	02 00       	stc	ccr,r0h
 977:	00 08       	.word	H'0,H'8
/home/dram.c:89
  rval.u.val16[0] = p->u.val16[0]; rval.u.val16[1] = p->u.val16[1];
 979:	b2 1a       	subx	#0x1a,r2h
 97b:	00 05       	.word	H'0,H'5
 97d:	02 00       	stc	ccr,r0h
 97f:	00 08       	.word	H'0,H'8
 981:	d0 1a       	xor.b	#0x1a,r0h
 983:	00 05       	.word	H'0,H'5
 985:	02 00       	stc	ccr,r0h
/home/dram.c:91
  if (rval.u.val32[0] != wval->u.val32[0])
 987:	00 08       	.word	H'0,H'8
 989:	d6 16       	xor.b	#0x16,r6h
 98b:	00 05       	.word	H'0,H'5
 98d:	02 00       	stc	ccr,r0h
 98f:	00 08       	.word	H'0,H'8
 991:	f2 03       	mov.b	#0x3,r2h
 993:	75 01       	bxor	#0x0,r1h
/home/dram.c:94
  p->u.val32[0] = wval->u.val32[0];
 995:	00 05       	.word	H'0,H'5
 997:	02 00       	stc	ccr,r0h
 999:	00 08       	.word	H'0,H'8
 99b:	fc 33       	mov.b	#0x33,r4l
/home/dram.c:95
  rval.u.val32[0] = p->u.val32[0];
 99d:	00 05       	.word	H'0,H'5
 99f:	02 00       	stc	ccr,r0h
 9a1:	00 09       	.word	H'0,H'9
 9a3:	04 12       	orc	#0x12,ccr
 9a5:	00 05       	.word	H'0,H'5
/home/dram.c:97
  if (rval.u.val32[0] != wval->u.val32[0])
 9a7:	02 00       	stc	ccr,r0h
 9a9:	00 09       	.word	H'0,H'9
 9ab:	06 1d       	andc	#0x1d,ccr
 9ad:	00 05       	.word	H'0,H'5
 9af:	02 00       	stc	ccr,r0h
 9b1:	00 09       	.word	H'0,H'9
 9b3:	16 00       	and.b	r0h,r0h
 9b5:	01 01       	.word	H'1,H'1

000009b7 <.Ldebug_line0>:
.Ldebug_line0():
 9b7:	00 00       	nop	
check_val():
/home/dram.c:97
 9b9:	03 8b       	.word	H'3,H'8b
 9bb:	00 04       	.word	H'0,H'4
/home/dram.c:101
}
 9bd:	00 00       	nop	
 9bf:	00 42       	.word	H'0,H'42
 9c1:	01 01       	.word	H'1,H'1
 9c3:	01 f6       	.word	H'1,H'f6
dram_check2_val0():
/home/dram.c:139
static uint32 dram_check2_val0(uint32 *addr) {  return  0x55555555UL; }
 9c5:	f2 0d       	mov.b	#0xd,r2h
 9c7:	00 01       	.word	H'0,H'1
 9c9:	01 01       	.word	H'1,H'1
 9cb:	01 00       	.word	H'1,H'0
 9cd:	00 00       	nop	
 9cf:	01 00       	.word	H'1,H'0
 9d1:	00 01       	.word	H'0,H'1
 9d3:	00 64       	.word	H'0,H'64
 9d5:	72 61       	bclr	#0x6,r1h
dram_check2_val1():
/home/dram.c:140
static uint32 dram_check2_val1(uint32 *addr) {  return  0xaaaaaaaaUL; }
 9d7:	6d 2e       	mov.w	@er2+,e6
 9d9:	63 00       	btst	r0h,r0h
 9db:	00 00       	nop	
 9dd:	00 64       	.word	H'0,H'64
 9df:	65 66       	xor.w	r6,r6
 9e1:	69 6e       	mov.w	@er6,e6
 9e3:	65 73       	xor.w	r7,r3
 9e5:	2e 68       	mov.b	@0x68:8,r6l
 9e7:	00 00       	nop	
dram_check2_val2():
/home/dram.c:141
static uint32 dram_check2_val2(uint32 *addr) {  return  0x00000000UL; }
 9e9:	00 00       	nop	
 9eb:	6c 69       	mov.b	@er6+,r1l
 9ed:	62 2e       	bclr	r2h,r6l
 9ef:	68 00       	mov.b	@er0,r0h
 9f1:	00 00       	nop	
 9f3:	00 3c       	.word	H'0,H'3c
 9f5:	62 75       	bclr	r7h,r5h
dram_check2_val3():
/home/dram.c:142
static uint32 dram_check2_val3(uint32 *addr) {  return  0xffffffffUL; }
 9f7:	69 6c       	mov.w	@er6,e4
 9f9:	74 2d       	bor	#0x2,r5l
 9fb:	69 6e       	mov.w	@er6,e6
 9fd:	3e 00       	mov.b	r6l,@0x0:8
 9ff:	00 00       	nop	
 a01:	00 00       	nop	
 a03:	00 05       	.word	H'0,H'5
 a05:	02 00       	stc	ccr,r0h
dram_check2_val4():
/home/dram.c:143
static uint32 dram_check2_val4(uint32 *addr) {  return  (uint32)addr; }
 a07:	00 09       	.word	H'0,H'9
 a09:	16 63       	and.b	r6h,r3h
 a0b:	00 05       	.word	H'0,H'5
 a0d:	02 00       	stc	ccr,r0h
 a0f:	00 09       	.word	H'0,H'9
 a11:	1e 1a       	subx	r1h,r2l
dram_check2_val5():
/home/dram.c:144
static uint32 dram_check2_val5(uint32 *addr) {  return ~(uint32)addr; }
 a13:	00 05       	.word	H'0,H'5
 a15:	02 00       	stc	ccr,r0h
 a17:	00 09       	.word	H'0,H'9
 a19:	2a 18       	mov.b	@0x18:8,r2l
 a1b:	00 05       	.word	H'0,H'5
 a1d:	02 00       	stc	ccr,r0h
 a1f:	00 09       	.word	H'0,H'9
dram_init():
/home/dram.c:29
{
 a21:	3a 18       	mov.b	r2l,@0x18:8
 a23:	00 05       	.word	H'0,H'5
 a25:	02 00       	stc	ccr,r0h
/home/dram.c:37
  *H8_3069F_ABWCR  = 0xff;
 a27:	00 09       	.word	H'0,H'9
 a29:	48 18       	bvc	.+24 (0xa43)
 a2b:	00 05       	.word	H'0,H'5
 a2d:	02 00       	stc	ccr,r0h
/home/dram.c:41
  *H8_3069F_RTCOR  = 0x03; /* リフレッシュ周期を短めに設定 */
 a2f:	00 09       	.word	H'0,H'9
 a31:	58 19       	.word	H'58,H'19
 a33:	00 05       	.word	H'0,H'5
 a35:	02 00       	stc	ccr,r0h
/home/dram.c:44
  *H8_3069F_RTMCSR = 0x37;
 a37:	00 09       	.word	H'0,H'9
 a39:	66 18       	and.w	r1,e0
 a3b:	00 05       	.word	H'0,H'5
 a3d:	02 00       	stc	ccr,r0h
/home/dram.c:49
  *H8_3069F_DRCRB  = 0x98;
 a3f:	00 09       	.word	H'0,H'9
 a41:	6c 19       	mov.b	@er1+,r1l
 a43:	00 05       	.word	H'0,H'5
 a45:	02 00       	stc	ccr,r0h
/home/dram.c:53
  *H8_3069F_DRCRA  = 0x30;
 a47:	00 09       	.word	H'0,H'9
 a49:	78 18       	.word	H'78,H'18
 a4b:	00 05       	.word	H'0,H'5
 a4d:	02 00       	stc	ccr,r0h
/home/dram.c:55
  *H8_3069F_P1DDR  = 0xff;
 a4f:	00 09       	.word	H'0,H'9
 a51:	86 19       	add.b	#0x19,r6h
 a53:	00 05       	.word	H'0,H'5
/home/dram.c:56
  *H8_3069F_P2DDR  = 0x07;
 a55:	02 00       	stc	ccr,r0h
 a57:	00 09       	.word	H'0,H'9
 a59:	94 1a       	addx	#0x1a,r4h
 a5b:	00 05       	.word	H'0,H'5
/home/dram.c:57
  *H8_3069F_P8DDR  = 0xe4;
 a5d:	02 00       	stc	ccr,r0h
 a5f:	00 09       	.word	H'0,H'9
 a61:	9c 18       	addx	#0x18,r4l
 a63:	00 05       	.word	H'0,H'5
/home/dram.c:62
  *H8_3069F_WCRL = 0xcf;
 a65:	02 00       	stc	ccr,r0h
 a67:	00 09       	.word	H'0,H'9
 a69:	a6 19       	cmp.b	#0x19,r6h
 a6b:	00 05       	.word	H'0,H'5
/home/dram.c:68
  *H8_3069F_ASTCR = 0xfb; /* 2ステートアクセス */
 a6d:	02 00       	stc	ccr,r0h
 a6f:	00 09       	.word	H'0,H'9
 a71:	bc 1b       	subx	#0x1b,r4l
 a73:	00 05       	.word	H'0,H'5
/home/dram.c:74
}
 a75:	02 00       	stc	ccr,r0h
 a77:	00 09       	.word	H'0,H'9
 a79:	c4 3d       	or.b	#0x3d,r4h
 a7b:	00 05       	.word	H'0,H'5
dram_check():
/home/dram.c:104
{
 a7d:	02 00       	stc	ccr,r0h
 a7f:	00 09       	.word	H'0,H'9
 a81:	ca 01       	or.b	#0x1,r2l
 a83:	00 05       	.word	H'0,H'5
 a85:	02 00       	stc	ccr,r0h
 a87:	00 09       	.word	H'0,H'9
/home/dram.c:109
  puts("DRAM checking...\n");
 a89:	d6 18       	xor.b	#0x18,r6h
 a8b:	00 05       	.word	H'0,H'5
 a8d:	02 00       	stc	ccr,r0h
 a8f:	00 09       	.word	H'0,H'9
 a91:	dc 01       	xor.b	#0x1,r4l
/home/dram.c:111
  for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 a93:	00 05       	.word	H'0,H'5
 a95:	02 00       	stc	ccr,r0h
 a97:	00 09       	.word	H'0,H'9
/home/dram.c:112
    putxval((unsigned long)p, 8);
 a99:	e8 18       	and.b	#0x18,r0l
 a9b:	00 05       	.word	H'0,H'5
 a9d:	02 00       	stc	ccr,r0h
 a9f:	00 09       	.word	H'0,H'9
 aa1:	ee 01       	and.b	#0x1,r6l
/home/dram.c:115
    val.u.val32[0] = (uint32)p;
 aa3:	00 05       	.word	H'0,H'5
 aa5:	02 00       	stc	ccr,r0h
 aa7:	00 09       	.word	H'0,H'9
/home/dram.c:116
    if (check_val((val_t *)p, &val) < 0)
 aa9:	f6 18       	mov.b	#0x18,r6h
 aab:	00 05       	.word	H'0,H'5
 aad:	02 00       	stc	ccr,r0h
 aaf:	00 09       	.word	H'0,H'9
 ab1:	fc 01       	mov.b	#0x1,r4l
 ab3:	00 05       	.word	H'0,H'5
 ab5:	02 00       	stc	ccr,r0h
 ab7:	00 0a       	.word	H'0,H'a
/home/dram.c:119
    val.u.val32[0] = 0;
 ab9:	06 18       	andc	#0x18,ccr
 abb:	00 05       	.word	H'0,H'5
 abd:	02 00       	stc	ccr,r0h
 abf:	00 0a       	.word	H'0,H'a
/home/dram.c:120
    if (check_val((val_t *)p, &val) < 0)
 ac1:	0c 01       	mov.b	r0h,r1h
 ac3:	00 05       	.word	H'0,H'5
 ac5:	02 00       	stc	ccr,r0h
 ac7:	00 0a       	.word	H'0,H'a
 ac9:	12 18       	rotxl.w	e0
 acb:	00 05       	.word	H'0,H'5
 acd:	02 00       	stc	ccr,r0h
 acf:	00 0a       	.word	H'0,H'a
/home/dram.c:123
    val.u.val32[0] = 0xffffffffUL;
 ad1:	18 01       	sub.b	r0h,r1h
 ad3:	00 05       	.word	H'0,H'5
 ad5:	02 00       	stc	ccr,r0h
 ad7:	00 0a       	.word	H'0,H'a
 ad9:	20 03       	mov.b	@0x3:8,r0h
/home/dram.c:124
    if (check_val((val_t *)p, &val) < 0)
 adb:	8d 7f       	add.b	#0x7f,r5l
 add:	01 00       	.word	H'1,H'0
 adf:	05 02       	xorc	#0x2,ccr
 ae1:	00 00       	nop	
 ae3:	0a 26       	add.w	#0x2,r6
 ae5:	1f 00       	das	r0h
 ae7:	05 02       	xorc	#0x2,ccr
 ae9:	00 00       	nop	
/home/dram.c:127 (discriminator 2)
    puts("\x08\x08\x08\x08\x08\x08\x08\x08");
 aeb:	0a 2e       	add.w	#0x2,e6
 aed:	1b 00       	subs	#1,er0
 aef:	05 02       	xorc	#0x2,ccr
 af1:	00 00       	nop	
 af3:	0a 36       	add.w	#0x3,r6
/home/dram.c:111
  for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 af5:	1a 00       	dec.b	r0h
 af7:	05 02       	xorc	#0x2,ccr
 af9:	00 00       	nop	
 afb:	0a 3e       	add.w	#0x3,e6
 afd:	1c 00       	cmp.b	r0h,r0h
/home/dram.c:129
  puts("\nall check OK.\n");
 aff:	05 02       	xorc	#0x2,ccr
 b01:	00 00       	nop	
 b03:	0a 46       	add.w	#0x4,r6
 b05:	1b 00       	subs	#1,er0
 b07:	05 02       	xorc	#0x2,ccr
/home/dram.c:130
  return 0;
 b09:	00 00       	nop	
 b0b:	0a 4e       	add.w	#0x4,e6
/home/dram.c:133
  puts("\nERROR: ");
 b0d:	19 00       	sub.w	r0,r0
 b0f:	05 02       	xorc	#0x2,ccr
 b11:	00 00       	nop	
 b13:	0a 54       	add.w	#0x5,r4
 b15:	18 00       	sub.b	r0h,r0h
/home/dram.c:134
  putxval((unsigned long)*p, 8);
 b17:	05 02       	xorc	#0x2,ccr
 b19:	00 00       	nop	
 b1b:	0a 5c       	add.w	#0x5,e4
 b1d:	18 00       	sub.b	r0h,r0h
 b1f:	05 02       	xorc	#0x2,ccr
 b21:	00 00       	nop	
/home/dram.c:135
  puts("\n");
 b23:	0a 64       	add.w	#0x6,r4
 b25:	1c 00       	cmp.b	r0h,r0h
 b27:	05 02       	xorc	#0x2,ccr
 b29:	00 00       	nop	
 b2b:	0a 6c       	add.w	#0x6,e4
/home/dram.c:136
  return -1;
 b2d:	1d 00       	cmp.w	r0,r0
 b2f:	05 02       	xorc	#0x2,ccr
/home/dram.c:137
}
 b31:	00 00       	nop	
 b33:	0a 74       	add.w	#0x7,r4
 b35:	1d 00       	cmp.w	r0,r0
 b37:	05 02       	xorc	#0x2,ccr
 b39:	00 00       	nop	
 b3b:	0a 7c       	add.w	#0x7,e4
dram_check2():
/home/dram.c:147
{
 b3d:	35 00       	mov.b	r5h,@0x0:8
 b3f:	05 02       	xorc	#0x2,ccr
 b41:	00 00       	nop	
 b43:	0a 88       	.word	H'a,H'88
 b45:	1c 00       	cmp.b	r0h,r0h
 b47:	05 02       	xorc	#0x2,ccr
 b49:	00 00       	nop	
 b4b:	0a 92       	add.l	er1,er2
 b4d:	19 00       	sub.w	r0,r0
 b4f:	05 02       	xorc	#0x2,ccr
/home/dram.c:150
  uint32 (*getval[])(uint32 *) = {
 b51:	00 00       	nop	
 b53:	0a 98       	add.l	#0x1,er0
 b55:	18 00       	sub.b	r0h,r0h
 b57:	05 02       	xorc	#0x2,ccr
 b59:	00 00       	nop	
 b5b:	0a a2       	add.l	er2,er2
 b5d:	1a 00       	dec.b	r0h
 b5f:	05 02       	xorc	#0x2,ccr
 b61:	00 00       	nop	
 b63:	0a a8       	add.l	#0x2,er0
 b65:	18 00       	sub.b	r0h,r0h
 b67:	05 02       	xorc	#0x2,ccr
 b69:	00 00       	nop	
 b6b:	0a b8       	add.l	#0x3,er0
 b6d:	1a 00       	dec.b	r0h
 b6f:	05 02       	xorc	#0x2,ccr
 b71:	00 00       	nop	
 b73:	0a c0       	add.l	er4,er0
/home/dram.c:160
  for (i = 0; getval[i]; i++) {
 b75:	18 00       	sub.b	r0h,r0h
/home/dram.c:149
  int ret = 0, i;
 b77:	05 02       	xorc	#0x2,ccr
 b79:	00 00       	nop	
 b7b:	0a d0       	add.l	er5,er0
/home/dram.c:160
  for (i = 0; getval[i]; i++) {
 b7d:	1a 00       	dec.b	r0h
 b7f:	05 02       	xorc	#0x2,ccr
/home/dram.c:162
    puts("DRAM check pattern: ");
 b81:	00 00       	nop	
 b83:	0a da       	add.l	#0x5,er2
 b85:	18 00       	sub.b	r0h,r0h
 b87:	05 02       	xorc	#0x2,ccr
 b89:	00 00       	nop	
/home/dram.c:163
    putxval(i, 0);
 b8b:	0a ea       	add.l	#0x6,er2
 b8d:	00 02       	.word	H'0,H'2
 b8f:	04 02       	orc	#0x2,ccr
 b91:	1a 00       	dec.b	r0h
/home/dram.c:165
    puts("\nDRAM setting...\n");
 b93:	05 02       	xorc	#0x2,ccr
 b95:	00 00       	nop	
 b97:	0a f4       	add.l	er7,er4
 b99:	03 70       	ldc	er0,sbr
 b9b:	01 00       	.word	H'1,H'0
/home/dram.c:167
    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 b9d:	05 02       	xorc	#0x2,ccr
 b9f:	00 00       	nop	
 ba1:	0a fe       	add.l	#0x7,er6
/home/dram.c:168
      *p = getval[i](p);
 ba3:	00 02       	.word	H'0,H'2
 ba5:	04 00       	orc	#0x0,ccr
 ba7:	29 00       	mov.b	@0x0:8,r1l
 ba9:	05 02       	xorc	#0x2,ccr
 bab:	00 00       	nop	
 bad:	0b 08       	adds	#1,er0
 baf:	18 00       	sub.b	r0h,r0h
/home/dram.c:169
      if (!((uint32)p & 0xfff)) {
 bb1:	05 02       	xorc	#0x2,ccr
 bb3:	00 00       	nop	
 bb5:	0b 0c       	adds	#1,er4
 bb7:	1a 00       	dec.b	r0h
/home/dram.c:170
	putxval((unsigned long)p, 8);
 bb9:	05 02       	xorc	#0x2,ccr
 bbb:	00 00       	nop	
 bbd:	0b 16       	.word	H'b,H'16
 bbf:	18 00       	sub.b	r0h,r0h
 bc1:	05 02       	xorc	#0x2,ccr
/home/dram.c:171
	puts("\x08\x08\x08\x08\x08\x08\x08\x08");
 bc3:	00 00       	nop	
 bc5:	0b 22       	.word	H'b,H'22
 bc7:	18 00       	sub.b	r0h,r0h
 bc9:	05 02       	xorc	#0x2,ccr
 bcb:	00 00       	nop	
/home/dram.c:167 (discriminator 2)
    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 bcd:	0b 2c       	.word	H'b,H'2c
 bcf:	18 00       	sub.b	r0h,r0h
 bd1:	05 02       	xorc	#0x2,ccr
 bd3:	00 00       	nop	
 bd5:	0b 30       	.word	H'b,H'30
/home/dram.c:175
    puts("\nDRAM checking...\n");
 bd7:	18 00       	sub.b	r0h,r0h
 bd9:	05 02       	xorc	#0x2,ccr
 bdb:	00 00       	nop	
 bdd:	0b 3c       	.word	H'b,H'3c
 bdf:	21 00       	mov.b	@0x0:8,r1h
/home/dram.c:177
    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 be1:	05 02       	xorc	#0x2,ccr
 be3:	00 00       	nop	
 be5:	0b 50       	inc.w	#1,r0
/home/dram.c:178
      if (*p != getval[i](p)) {
 be7:	1a 00       	dec.b	r0h
 be9:	05 02       	xorc	#0x2,ccr
 beb:	00 00       	nop	
 bed:	0b 74       	inc.l	#1,er4
 bef:	21 00       	mov.b	@0x0:8,r1h
 bf1:	05 02       	xorc	#0x2,ccr
 bf3:	00 00       	nop	
 bf5:	0b 76       	inc.l	#1,er6
 bf7:	03 75       	ldc	er5,sbr
 bf9:	01 00       	.word	H'1,H'0
 bfb:	05 02       	xorc	#0x2,ccr
 bfd:	00 00       	nop	
 bff:	0b 7c       	.word	H'b,H'7c
 c01:	22 00       	mov.b	@0x0:8,r2h
 c03:	05 02       	xorc	#0x2,ccr
/home/dram.c:179
	puts("\nERROR! :");
 c05:	00 00       	nop	
 c07:	0b 80       	adds	#2,er0
 c09:	19 00       	sub.w	r0,r0
 c0b:	05 02       	xorc	#0x2,ccr
 c0d:	00 00       	nop	
/home/dram.c:180
	putxval((unsigned long)p, 8);
 c0f:	0b 8a       	adds	#2,er2
 c11:	18 00       	sub.b	r0h,r0h
 c13:	05 02       	xorc	#0x2,ccr
 c15:	00 00       	nop	
 c17:	0b 92       	adds	#4,er2
/home/dram.c:181
	puts(" ");
 c19:	19 00       	sub.w	r0,r0
 c1b:	05 02       	xorc	#0x2,ccr
 c1d:	00 00       	nop	
 c1f:	0b 9c       	adds	#4,er4
 c21:	19 00       	sub.w	r0,r0
/home/dram.c:182
	putxval((unsigned long)*p, 8);
 c23:	05 02       	xorc	#0x2,ccr
 c25:	00 00       	nop	
 c27:	0b a2       	.word	H'b,H'a2
 c29:	18 00       	sub.b	r0h,r0h
 c2b:	05 02       	xorc	#0x2,ccr
 c2d:	00 00       	nop	
/home/dram.c:183
	puts("\n");
 c2f:	0b b0       	.word	H'b,H'b0
 c31:	18 00       	sub.b	r0h,r0h
 c33:	05 02       	xorc	#0x2,ccr
 c35:	00 00       	nop	
 c37:	0b b8       	.word	H'b,H'b8
/home/dram.c:184
	ret = -1;
 c39:	18 00       	sub.b	r0h,r0h
 c3b:	05 02       	xorc	#0x2,ccr
 c3d:	00 00       	nop	
 c3f:	0b c2       	.word	H'b,H'c2
/home/dram.c:186
      if (!((uint32)p & 0xfff)) {
 c41:	18 00       	sub.b	r0h,r0h
 c43:	05 02       	xorc	#0x2,ccr
 c45:	00 00       	nop	
 c47:	0b cc       	.word	H'b,H'cc
/home/dram.c:187
	putxval((unsigned long)p, 8);
 c49:	00 02       	.word	H'0,H'2
 c4b:	04 02       	orc	#0x2,ccr
 c4d:	13 00       	rotxr.b	r0h
 c4f:	05 02       	xorc	#0x2,ccr
 c51:	00 00       	nop	
/home/dram.c:188
	puts("\x08\x08\x08\x08\x08\x08\x08\x08");
 c53:	0b d6       	inc.w	#2,r6
 c55:	00 02       	.word	H'0,H'2
 c57:	04 00       	orc	#0x0,ccr
 c59:	1f 00       	das	r0h
 c5b:	05 02       	xorc	#0x2,ccr
/home/dram.c:177 (discriminator 2)
    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 c5d:	00 00       	nop	
 c5f:	0b e0       	.word	H'b,H'e0
 c61:	19 00       	sub.w	r0,r0
 c63:	05 02       	xorc	#0x2,ccr
 c65:	00 00       	nop	
 c67:	0b e6       	.word	H'b,H'e6
/home/dram.c:192
    puts("\n");
 c69:	18 00       	sub.b	r0h,r0h
 c6b:	05 02       	xorc	#0x2,ccr
 c6d:	00 00       	nop	
 c6f:	0c 04       	mov.b	r0h,r4h
 c71:	18 00       	sub.b	r0h,r0h
 c73:	05 02       	xorc	#0x2,ccr
 c75:	00 00       	nop	
 c77:	0c 0e       	mov.b	r0h,r6l
 c79:	18 00       	sub.b	r0h,r0h
 c7b:	05 02       	xorc	#0x2,ccr
 c7d:	00 00       	nop	
 c7f:	0c 18       	mov.b	r1h,r0l
 c81:	18 00       	sub.b	r0h,r0h
/home/dram.c:160 (discriminator 1)
  for (i = 0; getval[i]; i++) {
 c83:	05 02       	xorc	#0x2,ccr
 c85:	00 00       	nop	
 c87:	0c 22       	mov.b	r2h,r2h
 c89:	18 00       	sub.b	r0h,r0h
 c8b:	05 02       	xorc	#0x2,ccr
 c8d:	00 00       	nop	
 c8f:	0c 2e       	mov.b	r2h,r6l
 c91:	18 00       	sub.b	r0h,r0h
 c93:	05 02       	xorc	#0x2,ccr
 c95:	00 00       	nop	
/home/dram.c:196
  if (ret == 0) {
 c97:	0c 38       	mov.b	r3h,r0l
 c99:	18 00       	sub.b	r0h,r0h
 c9b:	05 02       	xorc	#0x2,ccr
/home/dram.c:197
    puts("\nall check OK.\n");
 c9d:	00 00       	nop	
 c9f:	0c 40       	mov.b	r4h,r0h
 ca1:	19 00       	sub.w	r0,r0
 ca3:	05 02       	xorc	#0x2,ccr
 ca5:	00 00       	nop	
/home/dram.c:201
}
 ca7:	0c 48       	mov.b	r4h,r0l
 ca9:	18 00       	sub.b	r0h,r0h
 cab:	05 02       	xorc	#0x2,ccr
 cad:	00 00       	nop	
 caf:	0c 52       	mov.b	r5h,r2h
 cb1:	18 00       	sub.b	r0h,r0h
 cb3:	05 02       	xorc	#0x2,ccr
 cb5:	00 00       	nop	
 cb7:	0c 5c       	mov.b	r5h,r4l
 cb9:	00 02       	.word	H'0,H'2
 cbb:	04 02       	orc	#0x2,ccr
 cbd:	03 75       	ldc	er5,sbr
dram_clear():
/home/dram.c:204
{
 cbf:	01 00       	.word	H'1,H'0
 cc1:	05 02       	xorc	#0x2,ccr
 cc3:	00 00       	nop	
/home/dram.c:207
  puts("DRAM clearing...\n");
 cc5:	0c 68       	mov.b	r6h,r0l
 cc7:	26 00       	mov.b	@0x0:8,r6h
 cc9:	05 02       	xorc	#0x2,ccr
 ccb:	00 00       	nop	
 ccd:	0c 82       	mov.b	r0l,r2h
/home/dram.c:209
  for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++)
 ccf:	00 02       	.word	H'0,H'2
 cd1:	04 01       	orc	#0x1,ccr
 cd3:	03 60       	ldc	er0,vbr
/home/dram.c:210
    *p = 0;
 cd5:	01 00       	.word	H'1,H'0
/home/dram.c:210 (discriminator 3)
 cd7:	05 02       	xorc	#0x2,ccr
 cd9:	00 00       	nop	
/home/dram.c:209
  for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++)
 cdb:	0c 96       	mov.b	r1l,r6h
 cdd:	00 02       	.word	H'0,H'2
 cdf:	04 00       	orc	#0x0,ccr
 ce1:	3b 00       	mov.b	r3l,@0x0:8
 ce3:	05 02       	xorc	#0x2,ccr
/home/dram.c:212
  puts("DRAM cleared.\n");
 ce5:	00 00       	nop	
 ce7:	0c 9c       	mov.b	r1l,r4l
 ce9:	18 00       	sub.b	r0h,r0h
 ceb:	05 02       	xorc	#0x2,ccr
 ced:	00 00       	nop	
/home/dram.c:215
}
 cef:	0c a6       	mov.b	r2l,r6h
 cf1:	1b 00       	subs	#1,er0
 cf3:	05 02       	xorc	#0x2,ccr
 cf5:	00 00       	nop	
main():
/home/main.c:66
{
 cf7:	0c be       	mov.b	r3l,r6l
 cf9:	1a 00       	dec.b	r0h
 cfb:	05 02       	xorc	#0x2,ccr
 cfd:	00 00       	nop	
 cff:	0c c4       	mov.b	r4l,r4h
 d01:	1a 00       	dec.b	r0h
/home/main.c:74
  INTR_DISABLE; /* 割込み無効にする */
 d03:	05 02       	xorc	#0x2,ccr
init():
/home/main.c:24
  softvec_init();
 d05:	00 00       	nop	
 d07:	0c ce       	mov.b	r4l,r6l
/home/main.c:27
  serial_init(SERIAL_DEFAULT_DEVICE);
 d09:	19 00       	sub.w	r0,r0
 d0b:	05 02       	xorc	#0x2,ccr
 d0d:	00 00       	nop	
 d0f:	0c d4       	mov.b	r5l,r4h
/home/main.c:30
  dram_init();
 d11:	18 00       	sub.b	r0h,r0h
 d13:	05 02       	xorc	#0x2,ccr
main():
/home/main.c:78
  puts("kzload (kozos boot loader) started.\n");
 d15:	00 00       	nop	
 d17:	0c d6       	mov.b	r5l,r6h
 d19:	00 02       	.word	H'0,H'2
 d1b:	04 03       	orc	#0x3,ccr
 d1d:	06 01       	andc	#0x1,ccr
/home/main.c:81
    puts("kzload> "); /* プロンプト表示 */
 d1f:	00 05       	.word	H'0,H'5
 d21:	02 00       	stc	ccr,r0h
 d23:	00 0c       	.word	H'0,H'c
 d25:	da 06       	xor.b	#0x6,r2l
 d27:	16 00       	and.b	r0h,r0h
/home/main.c:82
    gets(buf); /* シリアルからのコマンド受信 */
 d29:	05 02       	xorc	#0x2,ccr
 d2b:	00 00       	nop	
 d2d:	0c e4       	mov.b	r6l,r4h
 d2f:	00 02       	.word	H'0,H'2
 d31:	04 00       	orc	#0x0,ccr
/home/main.c:84
    if (!strcmp(buf, "load")) { /* XMODEMでのファイルのダウンロード */
 d33:	1a 00       	dec.b	r0h
 d35:	05 02       	xorc	#0x2,ccr
 d37:	00 00       	nop	
 d39:	0c ee       	mov.b	r6l,r6l
 d3b:	1a 00       	dec.b	r0h
 d3d:	05 02       	xorc	#0x2,ccr
 d3f:	00 00       	nop	
 d41:	0c f6       	mov.b	r7l,r6h
 d43:	00 01       	.word	H'0,H'1
 d45:	Address 0x0000000000000d45 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	47 4e       	beq	.+78 (0x50)
   2:	55 20       	bsr	.+32 (0x24)
   4:	43 31       	.word	H'43,H'31
   6:	31 20       	mov.b	r1h,@0x20:8
   8:	37 2e       	mov.b	r7h,@0x2e:8
   a:	33 2e       	mov.b	r3h,@0x2e:8
   c:	30 20       	mov.b	r0h,@0x20:8
   e:	2d 6d       	mov.b	@0x6d:8,r5l
  10:	68 20       	mov.b	@er2,r0h
  12:	2d 67       	mov.b	@0x67:8,r5l
  14:	20 2d       	mov.b	@0x2d:8,r0h
  16:	4f 73       	.word	H'4f,H'73
  18:	20 2d       	mov.b	@0x2d:8,r0h
  1a:	66 6e       	and.w	r6,e6
  1c:	6f 2d 62 75 	mov.w	@(0x6275:16,er2),e5
  20:	69 6c       	mov.w	@er6,e4
  22:	74 69       	bor	#0x6,r1l
  24:	6e 00 6c 6f 	mov.b	@(0x6c6f:16,er0),r0h
  28:	6e 67 20 75 	mov.b	@(0x2075:16,er6),r7h
  2c:	6e 73 69 67 	mov.b	@(0x6967:16,er7),r3h
  30:	6e 65 64 20 	mov.b	@(0x6420:16,er6),r5h
  34:	69 6e       	mov.w	@er6,e6
  36:	74 00       	bor	#0x0,r0h
  38:	73 68       	btst	#0x6,r0l
  3a:	6f 72 74 20 	mov.w	@(0x7420:16,er7),r2
  3e:	75 6e       	bxor	#0x6,r6l
  40:	73 69       	btst	#0x6,r1l
  42:	67 6e       	bst	#0x6,r6l
  44:	65 64       	xor.w	r6,r4
  46:	20 69       	mov.b	@0x69:8,r0h
  48:	6e 74 00 2f 	mov.b	@(0x2f:16,er7),r4h
  4c:	68 6f       	mov.b	@er6,r7l
  4e:	6d 65       	mov.w	@er6+,r5
  50:	00 75       	.word	H'0,H'75
  52:	6e 73 69 67 	mov.b	@(0x6967:16,er7),r3h
  56:	6e 65 64 20 	mov.b	@(0x6420:16,er6),r5h
  5a:	63 68       	btst	r6h,r0l
  5c:	61 72       	bnot	r7h,r2h
  5e:	00 76       	.word	H'0,H'76
  60:	65 63       	xor.w	r6,r3
  62:	74 6f       	bor	#0x6,r7l
  64:	72 73       	bclr	#0x7,r3h
  66:	00 76       	.word	H'0,H'76
  68:	65 63       	xor.w	r6,r3
  6a:	74 6f       	bor	#0x6,r7l
  6c:	72 2e       	bclr	#0x2,r6l
  6e:	63 00       	btst	r0h,r0h
  70:	73 65       	btst	#0x6,r5h
  72:	72 69       	bclr	#0x6,r1l
  74:	61 6c       	bnot	r6h,r4l
  76:	5f 69       	jsr	@@105 (0x69)
  78:	6e 69 74 00 	mov.b	@(0x7400:16,er6),r1l
  7c:	70 75       	bset	#0x7,r5h
  7e:	74 73       	bor	#0x7,r3h
  80:	00 6d       	.word	H'0,H'6d
  82:	61 69       	bnot	r6h,r1l
  84:	6e 2e 63 00 	mov.b	@(0x6300:16,er2),r6l
  88:	73 6f       	btst	#0x6,r7l
  8a:	66 74       	and.w	r7,r4
  8c:	76 65       	band	#0x6,r5h
  8e:	63 5f       	btst	r5h,r7l
  90:	69 6e       	mov.w	@er6,e6
  92:	69 74       	mov.w	@er7,r4
  94:	00 6d       	.word	H'0,H'6d
  96:	61 69       	bnot	r6h,r1l
  98:	6e 00 62 73 	mov.b	@(0x6273:16,er0),r0h
  9c:	73 5f       	btst	#0x5,r7l
  9e:	73 74       	btst	#0x7,r4h
  a0:	61 72       	bnot	r7h,r2h
  a2:	74 00       	bor	#0x0,r0h
  a4:	64 61       	or.w	r6,r1
  a6:	74 61       	bor	#0x6,r1h
  a8:	5f 73       	jsr	@@115 (0x73)
  aa:	74 61       	bor	#0x6,r1h
  ac:	72 74       	bclr	#0x7,r4h
  ae:	00 65       	.word	H'0,H'65
  b0:	64 61       	or.w	r6,r1
  b2:	74 61       	bor	#0x6,r1h
  b4:	00 64       	.word	H'0,H'64
  b6:	72 61       	bclr	#0x6,r1h
  b8:	6d 5f       	mov.w	@er5+,e7
  ba:	63 68       	btst	r6h,r0l
  bc:	65 63       	xor.w	r6,r3
  be:	6b 32       	.word	H'6b,H'32
  c0:	00 64       	.word	H'0,H'64
  c2:	72 61       	bclr	#0x6,r1h
  c4:	6d 5f       	mov.w	@er5+,e7
  c6:	63 68       	btst	r6h,r0l
  c8:	65 63       	xor.w	r6,r3
  ca:	6b 00 78 6d 	mov.w	@0x786d:16,r0
  ce:	6f 64 65 6d 	mov.w	@(0x656d:16,er6),r4
  d2:	5f 72       	jsr	@@114 (0x72)
  d4:	65 63       	xor.w	r6,r3
  d6:	76 00       	band	#0x0,r0h
  d8:	64 72       	or.w	r7,r2
  da:	61 6d       	bnot	r6h,r5l
  dc:	5f 63       	jsr	@@99 (0x63)
  de:	6c 65       	mov.b	@er6+,r5h
  e0:	61 72       	bnot	r7h,r2h
  e2:	00 62       	.word	H'0,H'62
  e4:	75 66       	bxor	#0x6,r6h
  e6:	66 65       	and.w	r6,r5
  e8:	72 5f       	bclr	#0x5,r7l
  ea:	73 74       	btst	#0x7,r4h
  ec:	61 72       	bnot	r7h,r2h
  ee:	74 00       	bor	#0x0,r0h
  f0:	73 74       	btst	#0x7,r4h
  f2:	72 63       	bclr	#0x6,r3h
  f4:	6d 70       	mov.w	@er7+,r0
  f6:	00 65       	.word	H'0,H'65
  f8:	6e 74 72 79 	mov.b	@(0x7279:16,er7),r4h
  fc:	5f 70       	jsr	@@112 (0x70)
  fe:	6f 69 6e 74 	mov.w	@(0x6e74:16,er6),e1
 102:	00 70       	.word	H'0,H'70
 104:	75 74       	bxor	#0x7,r4h
 106:	78 76       	.word	H'78,H'76
 108:	61 6c       	bnot	r6h,r4l
 10a:	00 6c       	.word	H'0,H'6c
 10c:	6f 6e 67 20 	mov.w	@(0x6720:16,er6),e6
 110:	69 6e       	mov.w	@er6,e6
 112:	74 00       	bor	#0x0,r0h
 114:	65 72       	xor.w	r7,r2
 116:	6f 64 61 74 	mov.w	@(0x6174:16,er6),r4
 11a:	61 00       	bnot	r0h,r0h
 11c:	6c 6f       	mov.b	@er6+,r7l
 11e:	61 64       	bnot	r6h,r4h
 120:	62 75       	bclr	r7h,r5h
 122:	66 00       	and.w	r0,r0
 124:	67 65       	bst	#0x6,r5h
 126:	74 73       	bor	#0x7,r3h
 128:	00 65       	.word	H'0,H'65
 12a:	62 73       	bclr	r7h,r3h
 12c:	73 00       	btst	#0x0,r0h
 12e:	64 75       	or.w	r7,r5
 130:	6d 70       	mov.w	@er7+,r0
 132:	00 73       	.word	H'0,H'73
 134:	68 6f       	mov.b	@er6,r7l
 136:	72 74       	bclr	#0x7,r4h
 138:	20 69       	mov.b	@0x69:8,r0h
 13a:	6e 74 00 73 	mov.b	@(0x73:16,er7),r4h
 13e:	6f 66 74 76 	mov.w	@(0x7476:16,er6),r6
 142:	65 63       	xor.w	r6,r3
 144:	00 64       	.word	H'0,H'64
 146:	72 61       	bclr	#0x6,r1h
 148:	6d 5f       	mov.w	@er5+,e7
 14a:	69 6e       	mov.w	@er6,e6
 14c:	69 74       	mov.w	@er7,r4
 14e:	00 65       	.word	H'0,H'65
 150:	6c 66       	mov.b	@er6+,r6h
 152:	5f 6c       	jsr	@@108 (0x6c)
 154:	6f 61 64 00 	mov.w	@(0x6400:16,er6),r1
 158:	74 79       	bor	#0x7,r1l
 15a:	70 65       	bset	#0x6,r5h
 15c:	00 73       	.word	H'0,H'73
 15e:	6f 66 74 76 	mov.w	@(0x7476:16,er6),r6
 162:	65 63       	xor.w	r6,r3
 164:	5f 74       	jsr	@@116 (0x74)
 166:	79 70       	.word	H'79,H'70
 168:	65 5f       	xor.w	r5,e7
 16a:	74 00       	bor	#0x0,r0h
 16c:	69 6e       	mov.w	@er6,e6
 16e:	74 65       	bor	#0x6,r5h
 170:	72 72       	bclr	#0x7,r2h
 172:	75 70       	bxor	#0x7,r0h
 174:	74 2e       	bor	#0x2,r6l
 176:	63 00       	btst	r0h,r0h
 178:	73 6f       	btst	#0x6,r7l
 17a:	66 74       	and.w	r7,r4
 17c:	76 65       	band	#0x6,r5h
 17e:	63 5f       	btst	r5h,r7l
 180:	68 61       	mov.b	@er6,r1h
 182:	6e 64 6c 65 	mov.b	@(0x6c65:16,er6),r4h
 186:	72 5f       	bclr	#0x5,r7l
 188:	74 00       	bor	#0x0,r0h
 18a:	73 6f       	btst	#0x6,r7l
 18c:	66 74       	and.w	r7,r4
 18e:	76 65       	band	#0x6,r5h
 190:	63 5f       	btst	r5h,r7l
 192:	73 65       	btst	#0x6,r5h
 194:	74 69       	bor	#0x6,r1l
 196:	6e 74 72 00 	mov.b	@(0x7200:16,er7),r4h
 19a:	69 6e       	mov.w	@er6,e6
 19c:	74 65       	bor	#0x6,r5h
 19e:	72 72       	bclr	#0x7,r2h
 1a0:	75 70       	bxor	#0x7,r0h
 1a2:	74 00       	bor	#0x0,r0h
 1a4:	68 61       	mov.b	@er6,r1h
 1a6:	6e 64 6c 65 	mov.b	@(0x6c65:16,er6),r4h
 1aa:	72 00       	bclr	#0x0,r0h
 1ac:	73 74       	btst	#0x7,r4h
 1ae:	72 63       	bclr	#0x6,r3h
 1b0:	70 79       	bset	#0x7,r1l
 1b2:	00 73       	.word	H'0,H'73
 1b4:	65 72       	xor.w	r7,r2
 1b6:	69 61       	mov.w	@er6,r1
 1b8:	6c 5f       	mov.b	@er5+,r7l
 1ba:	73 65       	btst	#0x6,r5h
 1bc:	6e 64 5f 62 	mov.b	@(0x5f62:16,er6),r4h
 1c0:	79 74       	.word	H'79,H'74
 1c2:	65 00       	xor.w	r0,r0
 1c4:	6d 65       	mov.w	@er6+,r5
 1c6:	6d 63       	mov.w	@er6+,r3
 1c8:	6d 70       	mov.w	@er7+,r0
 1ca:	00 70       	.word	H'0,H'70
 1cc:	75 74       	bxor	#0x7,r4h
 1ce:	63 00       	btst	r0h,r0h
 1d0:	73 65       	btst	#0x6,r5h
 1d2:	72 69       	bclr	#0x6,r1l
 1d4:	61 6c       	bnot	r6h,r4l
 1d6:	5f 72       	jsr	@@114 (0x72)
 1d8:	65 63       	xor.w	r6,r3
 1da:	76 5f       	band	#0x5,r7l
 1dc:	62 79       	bclr	r7h,r1l
 1de:	74 65       	bor	#0x6,r5h
 1e0:	00 67       	.word	H'0,H'67
 1e2:	65 74       	xor.w	r7,r4
 1e4:	63 00       	btst	r0h,r0h
 1e6:	73 74       	btst	#0x7,r4h
 1e8:	72 6c       	bclr	#0x6,r4l
 1ea:	65 6e       	xor.w	r6,e6
 1ec:	00 6c       	.word	H'0,H'6c
 1ee:	69 62       	mov.w	@er6,r2
 1f0:	2e 63       	mov.b	@0x63:8,r6l
 1f2:	00 63       	.word	H'0,H'63
 1f4:	6f 6c 75 6d 	mov.w	@(0x756d:16,er6),e4
 1f8:	6e 00 76 61 	mov.b	@(0x7661:16,er0),r0h
 1fc:	6c 75       	mov.b	@er7+,r5h
 1fe:	65 00       	xor.w	r0,r0
 200:	6d 65       	mov.w	@er6+,r5
 202:	6d 73       	mov.w	@er7+,r3
 204:	65 74       	xor.w	r7,r4
 206:	00 73       	.word	H'0,H'73
 208:	74 72       	bor	#0x7,r2h
 20a:	6e 63 6d 70 	mov.b	@(0x6d70:16,er6),r3h
 20e:	00 75       	.word	H'0,H'75
 210:	69 6e       	mov.w	@er6,e6
 212:	74 38       	bor	#0x3,r0l
 214:	00 68       	.word	H'0,H'68
 216:	38 5f       	mov.b	r0l,@0x5f:8
 218:	33 30       	mov.b	r3h,@0x30:8
 21a:	36 39       	mov.b	r6h,@0x39:8
 21c:	66 5f       	and.w	r5,e7
 21e:	73 63       	btst	#0x6,r3h
 220:	69 00       	mov.w	@er0,r0
 222:	73 63       	btst	#0x6,r3h
 224:	6d 72       	mov.w	@er7+,r2
 226:	00 73       	.word	H'0,H'73
 228:	65 72       	xor.w	r7,r2
 22a:	69 61       	mov.w	@er6,r1
 22c:	6c 2e       	mov.b	@er2+,r6l
 22e:	63 00       	btst	r0h,r0h
 230:	73 65       	btst	#0x6,r5h
 232:	72 69       	bclr	#0x6,r1l
 234:	61 6c       	bnot	r6h,r4l
 236:	5f 69       	jsr	@@105 (0x69)
 238:	73 5f       	btst	#0x5,r7l
 23a:	72 65       	bclr	#0x6,r5h
 23c:	63 76       	btst	r7h,r6h
 23e:	5f 65       	jsr	@@101 (0x65)
 240:	6e 61 62 6c 	mov.b	@(0x626c:16,er6),r1h
 244:	65 00       	xor.w	r0,r0
 246:	73 65       	btst	#0x6,r5h
 248:	72 69       	bclr	#0x6,r1l
 24a:	61 6c       	bnot	r6h,r4l
 24c:	5f 69       	jsr	@@105 (0x69)
 24e:	73 5f       	btst	#0x5,r7l
 250:	73 65       	btst	#0x6,r5h
 252:	6e 64 5f 65 	mov.b	@(0x5f65:16,er6),r4h
 256:	6e 61 62 6c 	mov.b	@(0x626c:16,er6),r1h
 25a:	65 00       	xor.w	r0,r0
 25c:	72 65       	bclr	#0x6,r5h
 25e:	67 73       	bst	#0x7,r3h
 260:	00 62       	.word	H'0,H'62
 262:	6c 6f       	mov.b	@er6+,r7l
 264:	63 6b       	btst	r6h,r3l
 266:	5f 6e       	jsr	@@110 (0x6e)
 268:	75 6d       	bxor	#0x6,r5l
 26a:	62 65       	bclr	r6h,r5h
 26c:	72 00       	bclr	#0x0,r0h
 26e:	62 6c       	bclr	r6h,r4l
 270:	6f 63 6b 5f 	mov.w	@(0x6b5f:16,er6),r3
 274:	6e 75 6d 00 	mov.b	@(0x6d00:16,er7),r5h
 278:	78 6d       	.word	H'78,H'6d
 27a:	6f 64 65 6d 	mov.w	@(0x656d:16,er6),r4
 27e:	5f 72       	jsr	@@114 (0x72)
 280:	65 61       	xor.w	r6,r1
 282:	64 5f       	or.w	r5,e7
 284:	62 6c       	bclr	r6h,r4l
 286:	6f 63 6b 00 	mov.w	@(0x6b00:16,er6),r3
 28a:	63 68       	btst	r6h,r0l
 28c:	65 63       	xor.w	r6,r3
 28e:	6b 5f       	.word	H'6b,H'5f
 290:	73 75       	btst	#0x7,r5h
 292:	6d 00       	mov.w	@er0+,r0
 294:	78 6d       	.word	H'78,H'6d
 296:	6f 64 65 6d 	mov.w	@(0x656d:16,er6),r4
 29a:	2e 63       	mov.b	@0x63:8,r6l
 29c:	00 72       	.word	H'0,H'72
 29e:	65 63       	xor.w	r6,r3
 2a0:	65 69       	xor.w	r6,e1
 2a2:	76 69       	band	#0x6,r1l
 2a4:	6e 67 00 78 	mov.b	@(0x78:16,er6),r7h
 2a8:	6d 6f       	mov.w	@er6+,e7
 2aa:	64 65       	or.w	r6,r5
 2ac:	6d 5f       	mov.w	@er5+,e7
 2ae:	77 61       	bld	#0x6,r1h
softvec_init():
/home/interrupt.c:7
{
 2b0:	69 74       	mov.w	@er7,r4
 2b2:	00 65       	.word	H'0,H'65
 2b4:	6c 66       	mov.b	@er6+,r6h
softvec_setintr():
/home/interrupt.c:17
  SOFTVECS[type] = handler;
 2b6:	5f 70       	jsr	@@112 (0x70)
 2b8:	72 6f       	bclr	#0x6,r7l
 2ba:	67 72       	bst	#0x7,r2h
 2bc:	61 6d       	bnot	r6h,r5l
 2be:	5f 68       	jsr	@@104 (0x68)
 2c0:	65 61       	xor.w	r6,r1
 2c2:	64 65       	or.w	r6,r5
 2c4:	72 00       	bclr	#0x0,r0h
 2c6:	73 65       	btst	#0x6,r5h
 2c8:	63 74       	btst	r7h,r4h
 2ca:	69 6f       	mov.w	@er6,e7
 2cc:	6e 5f 6e 61 	mov.b	@(0x6e61:16,er5),r7l
 2d0:	6d 65       	mov.w	@er6+,r5
 2d2:	5f 69       	jsr	@@105 (0x69)
 2d4:	6e 64 65 78 	mov.b	@(0x6578:16,er6),r4h
 2d8:	00 66       	.word	H'0,H'66
 2da:	69 6c       	mov.w	@er6,e4
 2dc:	65 5f       	xor.w	r5,e7
 2de:	73 69       	btst	#0x6,r1l
 2e0:	7a 65 00 73 	and.l	#0x736563,er5
 2e4:	65 63 
 2e6:	74 69       	bor	#0x6,r1l
 2e8:	6f 6e 5f 68 	mov.w	@(0x5f68:16,er6),e6
 2ec:	65 61       	xor.w	r6,r1
 2ee:	64 65       	or.w	r6,r5
 2f0:	72 5f       	bclr	#0x5,r7l
 2f2:	73 69       	btst	#0x6,r1l
 2f4:	7a 65 00 70 	and.l	#0x706879,er5
 2f8:	68 79 
 2fa:	73 69       	btst	#0x6,r1l
 2fc:	63 61       	btst	r6h,r1h
 2fe:	6c 5f       	mov.b	@er5+,r7l
 300:	61 64       	bnot	r6h,r4h
 302:	64 72       	or.w	r7,r2
 304:	00 63       	.word	H'0,H'63
 306:	6c 61       	mov.b	@er6+,r1h
 308:	73 73       	btst	#0x7,r3h
 30a:	00 72       	.word	H'0,H'72
 30c:	65 73       	xor.w	r7,r3
 30e:	65 72       	xor.w	r7,r2
 310:	76 65       	band	#0x6,r5h
 312:	00 6d       	.word	H'0,H'6d
 314:	65 6d       	xor.w	r6,e5
 316:	6f 72 79 5f 	mov.w	@(0x795f:16,er7),r2
 31a:	73 69       	btst	#0x6,r1l
 31c:	7a 65 00 76 	and.l	#0x766972,er5
 320:	69 72 
 322:	74 75       	bor	#0x7,r5h
 324:	61 6c       	bnot	r6h,r4l
 326:	5f 61       	jsr	@@97 (0x61)
 328:	64 64       	or.w	r6,r4
 32a:	72 00       	bclr	#0x0,r0h
 32c:	73 65       	btst	#0x6,r5h
 32e:	63 74       	btst	r7h,r4h
softvec_init():
/home/interrupt.c:12
}
 330:	69 6f       	mov.w	@er6,e7
 332:	6e 5f 68 65 	mov.b	@(0x6865:16,er5),r7l
 336:	61 64       	bnot	r6h,r4h
softvec_setintr():
/home/interrupt.c:16
{
 338:	65 72       	xor.w	r7,r2
 33a:	5f 6e       	jsr	@@110 (0x6e)
 33c:	75 6d       	bxor	#0x6,r5l
/home/interrupt.c:17
  SOFTVECS[type] = handler;
 33e:	00 70       	.word	H'0,H'70
 340:	72 6f       	bclr	#0x6,r7l
 342:	67 72       	bst	#0x7,r2h
 344:	61 6d       	bnot	r6h,r5l
 346:	5f 68       	jsr	@@104 (0x68)
 348:	65 61       	xor.w	r6,r1
 34a:	64 65       	or.w	r6,r5
 34c:	72 5f       	bclr	#0x5,r7l
/home/interrupt.c:19
}
 34e:	73 69       	btst	#0x6,r1l
 350:	7a 65 00 65 	and.l	#0x656c66,er5
 354:	6c 66 
interrupt():
/home/interrupt.c:26
{
 356:	5f 63       	jsr	@@99 (0x63)
 358:	68 65       	mov.b	@er6,r5h
 35a:	63 6b       	btst	r6h,r3l
/home/interrupt.c:27
  softvec_handler_t handler = SOFTVECS[type];
 35c:	00 70       	.word	H'0,H'70
 35e:	72 6f       	bclr	#0x6,r7l
 360:	67 72       	bst	#0x7,r2h
 362:	61 6d       	bnot	r6h,r5l
 364:	5f 68       	jsr	@@104 (0x68)
 366:	65 61       	xor.w	r6,r1
 368:	64 65       	or.w	r6,r5
 36a:	72 5f       	bclr	#0x5,r7l
 36c:	6e 75 6d 00 	mov.b	@(0x6d00:16,er7),r5h
/home/interrupt.c:29
    handler(type, sp);
 370:	65 6c       	xor.w	r6,e4
/home/interrupt.c:30
}
 372:	66 5f       	and.w	r5,e7
 374:	68 65       	mov.b	@er6,r5h
 376:	61 64       	bnot	r6h,r4h
memset():
/home/lib.c:6
{
 378:	65 72       	xor.w	r7,r2
 37a:	00 66       	.word	H'0,H'66
 37c:	6f 72 6d 61 	mov.w	@(0x6d61:16,er7),r2
 380:	74 00       	bor	#0x0,r0h
/home/lib.c:8
  for (p = b; len > 0; len--)
 382:	65 6c       	xor.w	r6,e4
 384:	66 5f       	and.w	r5,e7
 386:	6c 6f       	mov.b	@er6+,r7l
/home/lib.c:9 (discriminator 3)
    *(p++) = c;
 388:	61 64       	bnot	r6h,r4h
 38a:	5f 70       	jsr	@@112 (0x70)
 38c:	72 6f       	bclr	#0x6,r7l
 38e:	67 72       	bst	#0x7,r2h
/home/lib.c:8 (discriminator 1)
  for (p = b; len > 0; len--)
 390:	61 6d       	bnot	r6h,r5l
 392:	00 66       	.word	H'0,H'66
/home/lib.c:11
}
 394:	6c 61       	mov.b	@er6+,r1h
 396:	67 73       	bst	#0x7,r3h
 398:	00 61       	.word	H'0,H'61
 39a:	72 63       	bclr	#0x6,r3h
 39c:	68 00       	mov.b	@er0,r0h
memcpy():
/home/lib.c:14
{
 39e:	73 65       	btst	#0x6,r5h
 3a0:	63 74       	btst	r7h,r4h
 3a2:	69 6f       	mov.w	@er6,e7
 3a4:	6e 5f 68 65 	mov.b	@(0x6865:16,er5),r7l
 3a8:	61 64       	bnot	r6h,r4h
 3aa:	65 72       	xor.w	r7,r2
/home/lib.c:17
  for (; len > 0; len--)
 3ac:	5f 6f       	jsr	@@111 (0x6f)
 3ae:	66 66       	and.w	r6,r6
/home/lib.c:18 (discriminator 2)
    *(d++) = *(s++);
 3b0:	73 65       	btst	#0x6,r5h
 3b2:	74 00       	bor	#0x0,r0h
 3b4:	70 72       	bset	#0x7,r2h
 3b6:	6f 67 72 61 	mov.w	@(0x7261:16,er6),r7
 3ba:	6d 5f       	mov.w	@er5+,e7
 3bc:	68 65       	mov.b	@er6,r5h
 3be:	61 64       	bnot	r6h,r4h
 3c0:	65 72       	xor.w	r7,r2
/home/lib.c:17 (discriminator 1)
  for (; len > 0; len--)
 3c2:	5f 6f       	jsr	@@111 (0x6f)
 3c4:	66 66       	and.w	r6,r6
/home/lib.c:20
}
 3c6:	73 65       	btst	#0x6,r5h
 3c8:	74 00       	bor	#0x0,r0h
 3ca:	61 6c       	bnot	r6h,r4l
 3cc:	69 67       	mov.w	@er6,r7
 3ce:	6e 00 61 62 	mov.b	@(0x6162:16,er0),r0h
 3d2:	69 5f       	mov.w	@er5,e7
memcmp():
/home/lib.c:23
{
 3d4:	76 65       	band	#0x6,r5h
 3d6:	72 73       	bclr	#0x7,r3h
 3d8:	69 6f       	mov.w	@er6,e7
 3da:	6e 00 65 6c 	mov.b	@(0x656c:16,er0),r0h
 3de:	66 2e       	and.w	r2,e6
/home/lib.c:25
  for (; len > 0; len--) {
 3e0:	63 00       	btst	r0h,r0h
/home/lib.c:26
    if (*p1 != *p2)
 3e2:	70 68       	bset	#0x6,r0l
 3e4:	64 72       	or.w	r7,r2
 3e6:	00 6d       	.word	H'0,H'6d
 3e8:	61 67       	bnot	r6h,r7h
/home/lib.c:27
      return (*p1 > *p2) ? 1 : -1;
 3ea:	69 63       	mov.w	@er6,r3
 3ec:	00 75       	.word	H'0,H'75
 3ee:	69 6e       	mov.w	@er6,e6
 3f0:	74 33       	bor	#0x3,r3h
/home/lib.c:28
    p1++;
 3f2:	32 00       	mov.b	r2h,@0x0:8
/home/lib.c:29
    p2++;
 3f4:	64 72       	or.w	r7,r2
 3f6:	61 6d       	bnot	r6h,r5l
 3f8:	5f 63       	jsr	@@99 (0x63)
/home/lib.c:25 (discriminator 1)
  for (; len > 0; len--) {
 3fa:	68 65       	mov.b	@er6,r5h
 3fc:	63 6b       	btst	r6h,r3l
/home/lib.c:31
  return 0;
 3fe:	32 5f       	mov.b	r2h,@0x5f:8
 400:	76 61       	band	#0x6,r1h
/home/lib.c:27
      return (*p1 > *p2) ? 1 : -1;
 402:	6c 31       	mov.b	@er3+,r1h
 404:	00 64       	.word	H'0,H'64
/home/lib.c:32
}
 406:	72 61       	bclr	#0x6,r1h
 408:	6d 5f       	mov.w	@er5+,e7
 40a:	63 68       	btst	r6h,r0l
 40c:	65 63       	xor.w	r6,r3
 40e:	6b 32       	.word	H'6b,H'32
strlen():
/home/lib.c:35
{
 410:	5f 76       	jsr	@@118 (0x76)
 412:	61 6c       	bnot	r6h,r4l
 414:	32 00       	mov.b	r2h,@0x0:8
/home/lib.c:37
  for (len = 0; *s; s++, len++)
 416:	64 72       	or.w	r7,r2
 418:	61 6d       	bnot	r6h,r5l
/home/lib.c:37 (discriminator 3)
 41a:	5f 63       	jsr	@@99 (0x63)
 41c:	68 65       	mov.b	@er6,r5h
/home/lib.c:37 (discriminator 1)
 41e:	63 6b       	btst	r6h,r3l
 420:	32 5f       	mov.b	r2h,@0x5f:8
/home/lib.c:40
}
 422:	76 61       	band	#0x6,r1h
 424:	6c 33       	mov.b	@er3+,r3h
 426:	00 64       	.word	H'0,H'64
 428:	72 61       	bclr	#0x6,r1h
strcpy():
/home/lib.c:43
{
 42a:	6d 5f       	mov.w	@er5+,e7
 42c:	63 68       	btst	r6h,r0l
 42e:	65 63       	xor.w	r6,r3
 430:	6b 32       	.word	H'6b,H'32
/home/lib.c:46
    *dst = *src;
 432:	5f 76       	jsr	@@118 (0x76)
 434:	61 6c       	bnot	r6h,r4l
/home/lib.c:47
    if (!*src) break;
 436:	34 00       	mov.b	r4h,@0x0:8
 438:	76 61       	band	#0x6,r1h
/home/lib.c:45
  for (;; dst++, src++) {
 43a:	6c 31       	mov.b	@er3+,r1h
 43c:	36 00       	mov.b	r6h,@0x0:8
/home/lib.c:46
    *dst = *src;
 43e:	64 72       	or.w	r7,r2
/home/lib.c:50
}
 440:	61 6d       	bnot	r6h,r5l
 442:	5f 63       	jsr	@@99 (0x63)
 444:	68 65       	mov.b	@er6,r5h
strcmp():
/home/lib.c:53
{
 446:	63 6b       	btst	r6h,r3l
 448:	32 5f       	mov.b	r2h,@0x5f:8
 44a:	76 61       	band	#0x6,r1h
/home/lib.c:54
  while (*s1 || *s2) {
 44c:	6c 30       	mov.b	@er3+,r0h
/home/lib.c:55
    if (*s1 != *s2)
 44e:	00 63       	.word	H'0,H'63
 450:	68 65       	mov.b	@er6,r5h
/home/lib.c:56
      return (*s1 > *s2) ? 1 : -1;
 452:	63 6b       	btst	r6h,r3l
 454:	5f 76       	jsr	@@118 (0x76)
 456:	61 6c       	bnot	r6h,r4l
 458:	00 76       	.word	H'0,H'76
/home/lib.c:57
    s1++;
 45a:	61 6c       	bnot	r6h,r4l
/home/lib.c:58
    s2++;
 45c:	33 32       	mov.b	r3h,@0x32:8
/home/lib.c:54
  while (*s1 || *s2) {
 45e:	00 64       	.word	H'0,H'64
 460:	72 61       	bclr	#0x6,r1h
 462:	6d 5f       	mov.w	@er5+,e7
 464:	63 68       	btst	r6h,r0l
/home/lib.c:54 (discriminator 1)
 466:	65 63       	xor.w	r6,r3
 468:	6b 32       	.word	H'6b,H'32
 46a:	5f 76       	jsr	@@118 (0x76)
 46c:	61 6c       	bnot	r6h,r4l
 46e:	35 00       	mov.b	r5h,@0x0:8
 470:	77 76       	bld	#0x7,r6h
 472:	61 6c       	bnot	r6h,r4l
/home/lib.c:56
      return (*s1 > *s2) ? 1 : -1;
 474:	00 72       	.word	H'0,H'72
 476:	76 61       	band	#0x6,r1h
/home/lib.c:61
}
 478:	6c 00       	mov.b	@er0+,r0h
 47a:	5f 5f       	jsr	@@95 (0x5f)
 47c:	62 75       	bclr	r7h,r5h
strncmp():
/home/lib.c:64
{
 47e:	69 6c       	mov.w	@er6,e4
 480:	74 69       	bor	#0x6,r1l
 482:	6e 5f 6d 65 	mov.b	@(0x6d65:16,er5),r7l
 486:	6d 63       	mov.w	@er6+,r3
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 488:	70 79       	bset	#0x7,r1l
/home/lib.c:66
    if (*s1 != *s2)
 48a:	00 76       	.word	H'0,H'76
 48c:	61 6c       	bnot	r6h,r4l
 48e:	5f 74       	jsr	@@116 (0x74)
/home/lib.c:67
      return (*s1 > *s2) ? 1 : -1;
 490:	00 76       	.word	H'0,H'76
 492:	61 6c       	bnot	r6h,r4l
 494:	38 00       	mov.b	r0l,@0x0:8
 496:	75 69       	bxor	#0x6,r1l
/home/lib.c:68
    s1++;
 498:	6e 74 31 36 	mov.b	@(0x3136:16,er7),r4h
/home/lib.c:70
    len--;
 49c:	00 64       	.word	H'0,H'64
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 49e:	72 61       	bclr	#0x6,r1h
 4a0:	6d 2e       	mov.w	@er2+,e6
/home/lib.c:65 (discriminator 2)
 4a2:	63 00       	btst	r0h,r0h
 4a4:	67 65       	bst	#0x6,r5h
 4a6:	74 76       	bor	#0x7,r6h
/home/lib.c:65 (discriminator 3)
 4a8:	61 6c       	bnot	r6h,r4l
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	47 43       	.word	H'47,H'43
   2:	43 3a       	bls	.+58 (0x3e)
   4:	20 28       	mov.b	@0x28:8,r0h
   6:	47 4e       	beq	.+78 (0x56)
   8:	55 29       	bsr	.+41 (0x33)
   a:	20 37       	mov.b	@0x37:8,r0h
   c:	2e 33       	mov.b	@0x33:8,r6l
   e:	2e 30       	mov.b	@0x30:8,r6l
	...

Disassembly of section .debug_frame:

00000000 <.Lframe0>:
.Lframe0():
   0:	00 00       	nop	
   2:	00 10       	.word	H'0,H'10
   4:	ff ff       	mov.b	#0xff,r7l
   6:	ff ff       	mov.b	#0xff,r7l
   8:	03 00       	ldc	r0h,ccr
   a:	01 02       	.word	H'1,H'2
   c:	0c 0c       	mov.b	r0h,r4l
   e:	07 04       	ldc	#0x4,ccr
  10:	11 0c       	shlr.b	r4l
  12:	7e 00       	.word	H'7e,H'0
  14:	00 00       	nop	
  16:	00 20       	.word	H'0,H'20
  18:	00 00       	nop	
  1a:	00 00       	nop	
  1c:	00 00       	nop	
  1e:	0c f6       	mov.b	r7l,r6h
  20:	00 00       	nop	
  22:	01 fc       	.word	H'1,H'fc
  24:	04 00       	orc	#0x0,ccr
  26:	00 00       	nop	
  28:	04 0e       	orc	#0xe,ccr
  2a:	08 11       	add.b	r1h,r1h
  2c:	06 7c       	andc	#0x7c,ccr
  2e:	04 00       	orc	#0x0,ccr
  30:	00 00       	nop	
  32:	02 0d       	stc	ccr,r5l
  34:	06 00       	andc	#0x0,ccr
	...

00000038 <.Lframe0>:
  38:	00 00       	nop	
  3a:	00 10       	.word	H'0,H'10
  3c:	ff ff       	mov.b	#0xff,r7l
  3e:	ff ff       	mov.b	#0xff,r7l
  40:	03 00       	ldc	r0h,ccr
  42:	01 02       	.word	H'1,H'2
  44:	0c 0c       	mov.b	r0h,r4l
  46:	07 04       	ldc	#0x4,ccr
  48:	11 0c       	shlr.b	r4l
  4a:	7e 00       	.word	H'7e,H'0
  4c:	00 00       	nop	
  4e:	00 20       	.word	H'0,H'20
  50:	00 00       	nop	
  52:	00 38       	.word	H'0,H'38
  54:	00 00       	nop	
  56:	02 b0       	stmac	macl,er0
  58:	00 00       	nop	
  5a:	00 88       	.word	H'0,H'88
  5c:	04 00       	orc	#0x0,ccr
  5e:	00 00       	nop	
  60:	04 0e       	orc	#0xe,ccr
  62:	08 11       	add.b	r1h,r1h
  64:	06 7c       	andc	#0x7c,ccr
  66:	04 00       	orc	#0x0,ccr
  68:	00 00       	nop	
  6a:	02 0d       	stc	ccr,r5l
  6c:	06 00       	andc	#0x0,ccr
  6e:	00 00       	nop	
  70:	00 00       	nop	
  72:	00 20       	.word	H'0,H'20
  74:	00 00       	nop	
  76:	00 38       	.word	H'0,H'38
  78:	00 00       	nop	
  7a:	03 38       	ldmac	er0,macl
  7c:	00 00       	nop	
  7e:	00 1e       	.word	H'0,H'1e
  80:	04 00       	orc	#0x0,ccr
  82:	00 00       	nop	
  84:	04 0e       	orc	#0xe,ccr
  86:	08 11       	add.b	r1h,r1h
  88:	06 7c       	andc	#0x7c,ccr
  8a:	04 00       	orc	#0x0,ccr
  8c:	00 00       	nop	
  8e:	02 0d       	stc	ccr,r5l
  90:	06 00       	andc	#0x0,ccr
  92:	00 00       	nop	
  94:	00 00       	nop	
  96:	00 20       	.word	H'0,H'20
  98:	00 00       	nop	
  9a:	00 38       	.word	H'0,H'38
  9c:	00 00       	nop	
  9e:	03 56       	.word	H'3,H'56
  a0:	00 00       	nop	
  a2:	00 22       	.word	H'0,H'22
  a4:	04 00       	orc	#0x0,ccr
  a6:	00 00       	nop	
  a8:	04 0e       	orc	#0xe,ccr
  aa:	08 11       	add.b	r1h,r1h
  ac:	06 7c       	andc	#0x7c,ccr
  ae:	04 00       	orc	#0x0,ccr
  b0:	00 00       	nop	
  b2:	02 0d       	stc	ccr,r5l
  b4:	06 00       	andc	#0x0,ccr
	...

000000b8 <.Lframe0>:
  b8:	00 00       	nop	
  ba:	00 10       	.word	H'0,H'10
  bc:	ff ff       	mov.b	#0xff,r7l
  be:	ff ff       	mov.b	#0xff,r7l
  c0:	03 00       	ldc	r0h,ccr
  c2:	01 02       	.word	H'1,H'2
  c4:	0c 0c       	mov.b	r0h,r4l
  c6:	07 04       	ldc	#0x4,ccr
  c8:	11 0c       	shlr.b	r4l
  ca:	7e 00       	.word	H'7e,H'0
  cc:	00 00       	nop	
  ce:	00 20       	.word	H'0,H'20
  d0:	00 00       	nop	
  d2:	00 b8       	.word	H'0,H'b8
  d4:	00 00       	nop	
  d6:	03 78       	ldc	er0,sbr
  d8:	00 00       	nop	
  da:	00 26       	.word	H'0,H'26
  dc:	04 00       	orc	#0x0,ccr
  de:	00 00       	nop	
  e0:	04 0e       	orc	#0xe,ccr
  e2:	08 11       	add.b	r1h,r1h
  e4:	06 7c       	andc	#0x7c,ccr
  e6:	04 00       	orc	#0x0,ccr
  e8:	00 00       	nop	
  ea:	02 0d       	stc	ccr,r5l
  ec:	06 00       	andc	#0x0,ccr
  ee:	00 00       	nop	
  f0:	00 00       	nop	
  f2:	00 20       	.word	H'0,H'20
  f4:	00 00       	nop	
  f6:	00 b8       	.word	H'0,H'b8
  f8:	00 00       	nop	
  fa:	03 9e       	.word	H'3,H'9e
  fc:	00 00       	nop	
  fe:	00 36       	.word	H'0,H'36
 100:	04 00       	orc	#0x0,ccr
 102:	00 00       	nop	
 104:	04 0e       	orc	#0xe,ccr
 106:	08 11       	add.b	r1h,r1h
 108:	06 7c       	andc	#0x7c,ccr
 10a:	04 00       	orc	#0x0,ccr
 10c:	00 00       	nop	
 10e:	02 0d       	stc	ccr,r5l
 110:	06 00       	andc	#0x0,ccr
 112:	00 00       	nop	
 114:	00 00       	nop	
 116:	00 20       	.word	H'0,H'20
 118:	00 00       	nop	
 11a:	00 b8       	.word	H'0,H'b8
 11c:	00 00       	nop	
 11e:	03 d4       	.word	H'3,H'd4
 120:	00 00       	nop	
 122:	00 3c       	.word	H'0,H'3c
 124:	04 00       	orc	#0x0,ccr
 126:	00 00       	nop	
 128:	04 0e       	orc	#0xe,ccr
 12a:	08 11       	add.b	r1h,r1h
 12c:	06 7c       	andc	#0x7c,ccr
 12e:	04 00       	orc	#0x0,ccr
 130:	00 00       	nop	
 132:	02 0d       	stc	ccr,r5l
 134:	06 00       	andc	#0x0,ccr
 136:	00 00       	nop	
 138:	00 00       	nop	
 13a:	00 20       	.word	H'0,H'20
 13c:	00 00       	nop	
 13e:	00 b8       	.word	H'0,H'b8
 140:	00 00       	nop	
 142:	04 10       	orc	#0x10,ccr
 144:	00 00       	nop	
 146:	00 1a       	.word	H'0,H'1a
 148:	04 00       	orc	#0x0,ccr
 14a:	00 00       	nop	
 14c:	04 0e       	orc	#0xe,ccr
 14e:	08 11       	add.b	r1h,r1h
 150:	06 7c       	andc	#0x7c,ccr
 152:	04 00       	orc	#0x0,ccr
 154:	00 00       	nop	
 156:	02 0d       	stc	ccr,r5l
 158:	06 00       	andc	#0x0,ccr
 15a:	00 00       	nop	
 15c:	00 00       	nop	
 15e:	00 20       	.word	H'0,H'20
 160:	00 00       	nop	
 162:	00 b8       	.word	H'0,H'b8
 164:	00 00       	nop	
 166:	04 2a       	orc	#0x2a,ccr
 168:	00 00       	nop	
 16a:	00 1c       	.word	H'0,H'1c
 16c:	04 00       	orc	#0x0,ccr
 16e:	00 00       	nop	
 170:	04 0e       	orc	#0xe,ccr
 172:	08 11       	add.b	r1h,r1h
 174:	06 7c       	andc	#0x7c,ccr
 176:	04 00       	orc	#0x0,ccr
 178:	00 00       	nop	
 17a:	02 0d       	stc	ccr,r5l
 17c:	06 00       	andc	#0x0,ccr
 17e:	00 00       	nop	
 180:	00 00       	nop	
 182:	00 20       	.word	H'0,H'20
 184:	00 00       	nop	
 186:	00 b8       	.word	H'0,H'b8
 188:	00 00       	nop	
 18a:	04 46       	orc	#0x46,ccr
 18c:	00 00       	nop	
 18e:	00 38       	.word	H'0,H'38
 190:	04 00       	orc	#0x0,ccr
 192:	00 00       	nop	
 194:	04 0e       	orc	#0xe,ccr
 196:	08 11       	add.b	r1h,r1h
 198:	06 7c       	andc	#0x7c,ccr
 19a:	04 00       	orc	#0x0,ccr
 19c:	00 00       	nop	
 19e:	02 0d       	stc	ccr,r5l
 1a0:	06 00       	andc	#0x0,ccr
 1a2:	00 00       	nop	
 1a4:	00 00       	nop	
 1a6:	00 20       	.word	H'0,H'20
 1a8:	00 00       	nop	
 1aa:	00 b8       	.word	H'0,H'b8
 1ac:	00 00       	nop	
 1ae:	04 7e       	orc	#0x7e,ccr
 1b0:	00 00       	nop	
 1b2:	00 4e       	.word	H'0,H'4e
 1b4:	04 00       	orc	#0x0,ccr
 1b6:	00 00       	nop	
 1b8:	04 0e       	orc	#0xe,ccr
 1ba:	08 11       	add.b	r1h,r1h
 1bc:	06 7c       	andc	#0x7c,ccr
 1be:	04 00       	orc	#0x0,ccr
 1c0:	00 00       	nop	
 1c2:	02 0d       	stc	ccr,r5l
 1c4:	06 00       	andc	#0x0,ccr
 1c6:	00 00       	nop	
 1c8:	00 00       	nop	
 1ca:	00 20       	.word	H'0,H'20
 1cc:	00 00       	nop	
 1ce:	00 b8       	.word	H'0,H'b8
 1d0:	00 00       	nop	
 1d2:	04 cc       	orc	#0xcc,ccr
 1d4:	00 00       	nop	
 1d6:	00 2e       	.word	H'0,H'2e
 1d8:	04 00       	orc	#0x0,ccr
 1da:	00 00       	nop	
 1dc:	04 0e       	orc	#0xe,ccr
 1de:	08 11       	add.b	r1h,r1h
 1e0:	06 7c       	andc	#0x7c,ccr
 1e2:	04 00       	orc	#0x0,ccr
 1e4:	00 00       	nop	
 1e6:	02 0d       	stc	ccr,r5l
 1e8:	06 00       	andc	#0x0,ccr
 1ea:	00 00       	nop	
 1ec:	00 00       	nop	
 1ee:	00 20       	.word	H'0,H'20
 1f0:	00 00       	nop	
 1f2:	00 b8       	.word	H'0,H'b8
 1f4:	00 00       	nop	
 1f6:	04 fa       	orc	#0xfa,ccr
 1f8:	00 00       	nop	
 1fa:	00 2c       	.word	H'0,H'2c
 1fc:	04 00       	orc	#0x0,ccr
 1fe:	00 00       	nop	
 200:	04 0e       	orc	#0xe,ccr
 202:	08 11       	add.b	r1h,r1h
 204:	06 7c       	andc	#0x7c,ccr
 206:	04 00       	orc	#0x0,ccr
 208:	00 00       	nop	
 20a:	02 0d       	stc	ccr,r5l
 20c:	06 00       	andc	#0x0,ccr
 20e:	00 00       	nop	
 210:	00 00       	nop	
 212:	00 20       	.word	H'0,H'20
 214:	00 00       	nop	
 216:	00 b8       	.word	H'0,H'b8
 218:	00 00       	nop	
 21a:	05 26       	xorc	#0x26,ccr
 21c:	00 00       	nop	
 21e:	00 24       	.word	H'0,H'24
 220:	04 00       	orc	#0x0,ccr
 222:	00 00       	nop	
 224:	04 0e       	orc	#0xe,ccr
 226:	08 11       	add.b	r1h,r1h
 228:	06 7c       	andc	#0x7c,ccr
 22a:	04 00       	orc	#0x0,ccr
 22c:	00 00       	nop	
 22e:	02 0d       	stc	ccr,r5l
 230:	06 00       	andc	#0x0,ccr
 232:	00 00       	nop	
 234:	00 00       	nop	
 236:	00 20       	.word	H'0,H'20
 238:	00 00       	nop	
 23a:	00 b8       	.word	H'0,H'b8
 23c:	00 00       	nop	
 23e:	05 4a       	xorc	#0x4a,ccr
 240:	00 00       	nop	
 242:	00 46       	.word	H'0,H'46
 244:	04 00       	orc	#0x0,ccr
 246:	00 00       	nop	
 248:	04 0e       	orc	#0xe,ccr
 24a:	08 11       	add.b	r1h,r1h
 24c:	06 7c       	andc	#0x7c,ccr
 24e:	04 00       	orc	#0x0,ccr
 250:	00 00       	nop	
 252:	02 0d       	stc	ccr,r5l
 254:	06 00       	andc	#0x0,ccr
 256:	00 00       	nop	
 258:	00 00       	nop	
 25a:	00 20       	.word	H'0,H'20
 25c:	00 00       	nop	
 25e:	00 b8       	.word	H'0,H'b8
 260:	00 00       	nop	
 262:	05 90       	xorc	#0x90,ccr
 264:	00 00       	nop	
 266:	00 6e       	.word	H'0,H'6e
 268:	04 00       	orc	#0x0,ccr
 26a:	00 00       	nop	
 26c:	04 0e       	orc	#0xe,ccr
 26e:	08 11       	add.b	r1h,r1h
 270:	06 7c       	andc	#0x7c,ccr
 272:	04 00       	orc	#0x0,ccr
 274:	00 00       	nop	
 276:	02 0d       	stc	ccr,r5l
 278:	06 00       	andc	#0x0,ccr
	...

0000027c <.Lframe0>:
 27c:	00 00       	nop	
 27e:	00 10       	.word	H'0,H'10
 280:	ff ff       	mov.b	#0xff,r7l
 282:	ff ff       	mov.b	#0xff,r7l
 284:	03 00       	ldc	r0h,ccr
 286:	01 02       	.word	H'1,H'2
 288:	0c 0c       	mov.b	r0h,r4l
 28a:	07 04       	ldc	#0x4,ccr
 28c:	11 0c       	shlr.b	r4l
 28e:	7e 00       	.word	H'7e,H'0
 290:	00 00       	nop	
 292:	00 20       	.word	H'0,H'20
 294:	00 00       	nop	
 296:	02 7c       	stc	sbr,er4
 298:	00 00       	nop	
 29a:	05 fe       	xorc	#0xfe,ccr
 29c:	00 00       	nop	
 29e:	00 36       	.word	H'0,H'36
 2a0:	04 00       	orc	#0x0,ccr
 2a2:	00 00       	nop	
 2a4:	04 0e       	orc	#0xe,ccr
 2a6:	08 11       	add.b	r1h,r1h
 2a8:	06 7c       	andc	#0x7c,ccr
 2aa:	04 00       	orc	#0x0,ccr
 2ac:	00 00       	nop	
 2ae:	02 0d       	stc	ccr,r5l
softvec_init():
/home/interrupt.c:7
{
 2b0:	06 00       	andc	#0x0,ccr
 2b2:	00 00       	nop	
 2b4:	00 00       	nop	
softvec_setintr():
/home/interrupt.c:17
  SOFTVECS[type] = handler;
 2b6:	00 20       	.word	H'0,H'20
 2b8:	00 00       	nop	
 2ba:	02 7c       	stc	sbr,er4
 2bc:	00 00       	nop	
 2be:	06 34       	andc	#0x34,ccr
 2c0:	00 00       	nop	
 2c2:	00 24       	.word	H'0,H'24
 2c4:	04 00       	orc	#0x0,ccr
 2c6:	00 00       	nop	
 2c8:	04 0e       	orc	#0xe,ccr
 2ca:	08 11       	add.b	r1h,r1h
 2cc:	06 7c       	andc	#0x7c,ccr
 2ce:	04 00       	orc	#0x0,ccr
 2d0:	00 00       	nop	
 2d2:	02 0d       	stc	ccr,r5l
 2d4:	06 00       	andc	#0x0,ccr
 2d6:	00 00       	nop	
 2d8:	00 00       	nop	
 2da:	00 20       	.word	H'0,H'20
 2dc:	00 00       	nop	
 2de:	02 7c       	stc	sbr,er4
 2e0:	00 00       	nop	
 2e2:	06 58       	andc	#0x58,ccr
 2e4:	00 00       	nop	
 2e6:	00 32       	.word	H'0,H'32
 2e8:	04 00       	orc	#0x0,ccr
 2ea:	00 00       	nop	
 2ec:	04 0e       	orc	#0xe,ccr
 2ee:	08 11       	add.b	r1h,r1h
 2f0:	06 7c       	andc	#0x7c,ccr
 2f2:	04 00       	orc	#0x0,ccr
 2f4:	00 00       	nop	
 2f6:	02 0d       	stc	ccr,r5l
 2f8:	06 00       	andc	#0x0,ccr
 2fa:	00 00       	nop	
 2fc:	00 00       	nop	
 2fe:	00 20       	.word	H'0,H'20
 300:	00 00       	nop	
 302:	02 7c       	stc	sbr,er4
 304:	00 00       	nop	
 306:	06 8a       	andc	#0x8a,ccr
 308:	00 00       	nop	
 30a:	00 24       	.word	H'0,H'24
 30c:	04 00       	orc	#0x0,ccr
 30e:	00 00       	nop	
 310:	04 0e       	orc	#0xe,ccr
 312:	08 11       	add.b	r1h,r1h
 314:	06 7c       	andc	#0x7c,ccr
 316:	04 00       	orc	#0x0,ccr
 318:	00 00       	nop	
 31a:	02 0d       	stc	ccr,r5l
 31c:	06 00       	andc	#0x0,ccr
 31e:	00 00       	nop	
 320:	00 00       	nop	
 322:	00 20       	.word	H'0,H'20
 324:	00 00       	nop	
 326:	02 7c       	stc	sbr,er4
 328:	00 00       	nop	
 32a:	06 ae       	andc	#0xae,ccr
 32c:	00 00       	nop	
 32e:	00 32       	.word	H'0,H'32
softvec_init():
/home/interrupt.c:12
}
 330:	04 00       	orc	#0x0,ccr
 332:	00 00       	nop	
 334:	04 0e       	orc	#0xe,ccr
 336:	08 11       	add.b	r1h,r1h
softvec_setintr():
/home/interrupt.c:16
{
 338:	06 7c       	andc	#0x7c,ccr
 33a:	04 00       	orc	#0x0,ccr
 33c:	00 00       	nop	
/home/interrupt.c:17
  SOFTVECS[type] = handler;
 33e:	02 0d       	stc	ccr,r5l
 340:	06 00       	andc	#0x0,ccr
	...

00000344 <.Lframe0>:
.Lframe0():
 344:	00 00       	nop	
softvec_setintr():
/home/interrupt.c:17
 346:	00 10       	.word	H'0,H'10
 348:	ff ff       	mov.b	#0xff,r7l
 34a:	ff ff       	mov.b	#0xff,r7l
 34c:	03 00       	ldc	r0h,ccr
/home/interrupt.c:19
}
 34e:	01 02       	.word	H'1,H'2
 350:	0c 0c       	mov.b	r0h,r4l
 352:	07 04       	ldc	#0x4,ccr
 354:	11 0c       	shlr.b	r4l
interrupt():
/home/interrupt.c:26
{
 356:	7e 00       	.word	H'7e,H'0
 358:	00 00       	nop	
 35a:	00 20       	.word	H'0,H'20
/home/interrupt.c:27
  softvec_handler_t handler = SOFTVECS[type];
 35c:	00 00       	nop	
 35e:	03 44       	.word	H'3,H'44
 360:	00 00       	nop	
 362:	06 e0       	andc	#0xe0,ccr
 364:	00 00       	nop	
 366:	01 4e       	.word	H'1,H'4e
 368:	04 00       	orc	#0x0,ccr
 36a:	00 00       	nop	
 36c:	04 0e       	orc	#0xe,ccr
/home/interrupt.c:28
  if (handler)
 36e:	08 11       	add.b	r1h,r1h
/home/interrupt.c:29
    handler(type, sp);
 370:	06 7c       	andc	#0x7c,ccr
/home/interrupt.c:30
}
 372:	04 00       	orc	#0x0,ccr
 374:	00 00       	nop	
 376:	02 0d       	stc	ccr,r5l
memset():
/home/lib.c:6
{
 378:	06 00       	andc	#0x0,ccr
	...

0000037c <.Lframe0>:
.Lframe0():
 37c:	00 00       	nop	
memset():
/home/lib.c:6
 37e:	00 10       	.word	H'0,H'10
 380:	ff ff       	mov.b	#0xff,r7l
/home/lib.c:8
  for (p = b; len > 0; len--)
 382:	ff ff       	mov.b	#0xff,r7l
 384:	03 00       	ldc	r0h,ccr
 386:	01 02       	.word	H'1,H'2
/home/lib.c:9 (discriminator 3)
    *(p++) = c;
 388:	0c 0c       	mov.b	r0h,r4l
 38a:	07 04       	ldc	#0x4,ccr
 38c:	11 0c       	shlr.b	r4l
 38e:	7e 00       	.word	H'7e,H'0
/home/lib.c:8 (discriminator 1)
  for (p = b; len > 0; len--)
 390:	00 00       	nop	
 392:	00 20       	.word	H'0,H'20
/home/lib.c:11
}
 394:	00 00       	nop	
 396:	03 7c       	ldc	er4,sbr
 398:	00 00       	nop	
 39a:	08 2e       	add.b	r2h,r6l
 39c:	00 00       	nop	
memcpy():
/home/lib.c:14
{
 39e:	00 e8       	.word	H'0,H'e8
 3a0:	04 00       	orc	#0x0,ccr
 3a2:	00 00       	nop	
 3a4:	04 0e       	orc	#0xe,ccr
 3a6:	08 11       	add.b	r1h,r1h
 3a8:	06 7c       	andc	#0x7c,ccr
 3aa:	04 00       	orc	#0x0,ccr
/home/lib.c:17
  for (; len > 0; len--)
 3ac:	00 00       	nop	
 3ae:	02 0d       	stc	ccr,r5l
/home/lib.c:18 (discriminator 2)
    *(d++) = *(s++);
 3b0:	06 00       	andc	#0x0,ccr
	...

000003b4 <.Lframe0>:
.Lframe0():
 3b4:	00 00       	nop	
memcpy():
/home/lib.c:18 (discriminator 2)
 3b6:	00 10       	.word	H'0,H'10
 3b8:	ff ff       	mov.b	#0xff,r7l
 3ba:	ff ff       	mov.b	#0xff,r7l
 3bc:	03 00       	ldc	r0h,ccr
 3be:	01 02       	.word	H'1,H'2
 3c0:	0c 0c       	mov.b	r0h,r4l
/home/lib.c:17 (discriminator 1)
  for (; len > 0; len--)
 3c2:	07 04       	ldc	#0x4,ccr
 3c4:	11 0c       	shlr.b	r4l
/home/lib.c:20
}
 3c6:	7e 00       	.word	H'7e,H'0
 3c8:	00 00       	nop	
 3ca:	00 20       	.word	H'0,H'20
 3cc:	00 00       	nop	
 3ce:	03 b4       	ldmac	er4,macl
 3d0:	00 00       	nop	
 3d2:	09 16       	add.w	r1,r6
memcmp():
/home/lib.c:23
{
 3d4:	00 00       	nop	
 3d6:	00 ae       	.word	H'0,H'ae
 3d8:	04 00       	orc	#0x0,ccr
 3da:	00 00       	nop	
 3dc:	04 0e       	orc	#0xe,ccr
 3de:	08 11       	add.b	r1h,r1h
/home/lib.c:25
  for (; len > 0; len--) {
 3e0:	06 7c       	andc	#0x7c,ccr
/home/lib.c:26
    if (*p1 != *p2)
 3e2:	04 00       	orc	#0x0,ccr
 3e4:	00 00       	nop	
 3e6:	02 0d       	stc	ccr,r5l
 3e8:	06 00       	andc	#0x0,ccr
/home/lib.c:27
      return (*p1 > *p2) ? 1 : -1;
 3ea:	00 00       	nop	
 3ec:	00 00       	nop	
 3ee:	00 20       	.word	H'0,H'20
 3f0:	00 00       	nop	
/home/lib.c:28
    p1++;
 3f2:	03 b4       	ldmac	er4,macl
/home/lib.c:29
    p2++;
 3f4:	00 00       	nop	
 3f6:	09 c4       	add.w	e4,r4
 3f8:	00 00       	nop	
/home/lib.c:25 (discriminator 1)
  for (; len > 0; len--) {
 3fa:	00 12       	.word	H'0,H'12
 3fc:	04 00       	orc	#0x0,ccr
/home/lib.c:31
  return 0;
 3fe:	00 00       	nop	
 400:	04 0e       	orc	#0xe,ccr
/home/lib.c:27
      return (*p1 > *p2) ? 1 : -1;
 402:	08 11       	add.b	r1h,r1h
 404:	06 7c       	andc	#0x7c,ccr
/home/lib.c:32
}
 406:	04 00       	orc	#0x0,ccr
 408:	00 00       	nop	
 40a:	02 0d       	stc	ccr,r5l
 40c:	06 00       	andc	#0x0,ccr
 40e:	00 00       	nop	
strlen():
/home/lib.c:35
{
 410:	00 00       	nop	
 412:	00 20       	.word	H'0,H'20
 414:	00 00       	nop	
/home/lib.c:37
  for (len = 0; *s; s++, len++)
 416:	03 b4       	ldmac	er4,macl
 418:	00 00       	nop	
/home/lib.c:37 (discriminator 3)
 41a:	09 d6       	add.w	e5,r6
 41c:	00 00       	nop	
/home/lib.c:37 (discriminator 1)
 41e:	00 12       	.word	H'0,H'12
 420:	04 00       	orc	#0x0,ccr
/home/lib.c:40
}
 422:	00 00       	nop	
 424:	04 0e       	orc	#0xe,ccr
 426:	08 11       	add.b	r1h,r1h
 428:	06 7c       	andc	#0x7c,ccr
strcpy():
/home/lib.c:43
{
 42a:	04 00       	orc	#0x0,ccr
 42c:	00 00       	nop	
 42e:	02 0d       	stc	ccr,r5l
 430:	06 00       	andc	#0x0,ccr
/home/lib.c:46
    *dst = *src;
 432:	00 00       	nop	
 434:	00 00       	nop	
/home/lib.c:47
    if (!*src) break;
 436:	00 20       	.word	H'0,H'20
 438:	00 00       	nop	
/home/lib.c:45
  for (;; dst++, src++) {
 43a:	03 b4       	ldmac	er4,macl
 43c:	00 00       	nop	
/home/lib.c:46
    *dst = *src;
 43e:	09 e8       	add.w	e6,e0
/home/lib.c:50
}
 440:	00 00       	nop	
 442:	00 0e       	.word	H'0,H'e
 444:	04 00       	orc	#0x0,ccr
strcmp():
/home/lib.c:53
{
 446:	00 00       	nop	
 448:	04 0e       	orc	#0xe,ccr
 44a:	08 11       	add.b	r1h,r1h
/home/lib.c:54
  while (*s1 || *s2) {
 44c:	06 7c       	andc	#0x7c,ccr
/home/lib.c:55
    if (*s1 != *s2)
 44e:	04 00       	orc	#0x0,ccr
 450:	00 00       	nop	
/home/lib.c:56
      return (*s1 > *s2) ? 1 : -1;
 452:	02 0d       	stc	ccr,r5l
 454:	06 00       	andc	#0x0,ccr
 456:	00 00       	nop	
 458:	00 00       	nop	
/home/lib.c:57
    s1++;
 45a:	00 20       	.word	H'0,H'20
/home/lib.c:58
    s2++;
 45c:	00 00       	nop	
/home/lib.c:54
  while (*s1 || *s2) {
 45e:	03 b4       	ldmac	er4,macl
 460:	00 00       	nop	
 462:	09 f6       	add.w	e7,r6
 464:	00 00       	nop	
/home/lib.c:54 (discriminator 1)
 466:	00 10       	.word	H'0,H'10
 468:	04 00       	orc	#0x0,ccr
 46a:	00 00       	nop	
 46c:	04 0e       	orc	#0xe,ccr
 46e:	08 11       	add.b	r1h,r1h
 470:	06 7c       	andc	#0x7c,ccr
 472:	04 00       	orc	#0x0,ccr
/home/lib.c:56
      return (*s1 > *s2) ? 1 : -1;
 474:	00 00       	nop	
 476:	02 0d       	stc	ccr,r5l
/home/lib.c:61
}
 478:	06 00       	andc	#0x0,ccr
 47a:	00 00       	nop	
 47c:	00 00       	nop	
strncmp():
/home/lib.c:64
{
 47e:	00 20       	.word	H'0,H'20
 480:	00 00       	nop	
 482:	03 b4       	ldmac	er4,macl
 484:	00 00       	nop	
 486:	0a 06       	inc	r6h
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 488:	00 00       	nop	
/home/lib.c:66
    if (*s1 != *s2)
 48a:	00 0c       	.word	H'0,H'c
 48c:	04 00       	orc	#0x0,ccr
 48e:	00 00       	nop	
/home/lib.c:67
      return (*s1 > *s2) ? 1 : -1;
 490:	04 0e       	orc	#0xe,ccr
 492:	08 11       	add.b	r1h,r1h
 494:	06 7c       	andc	#0x7c,ccr
 496:	04 00       	orc	#0x0,ccr
/home/lib.c:68
    s1++;
 498:	00 00       	nop	
/home/lib.c:69
    s2++;
 49a:	02 0d       	stc	ccr,r5l
/home/lib.c:70
    len--;
 49c:	06 00       	andc	#0x0,ccr
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 49e:	00 00       	nop	
 4a0:	00 00       	nop	
/home/lib.c:65 (discriminator 2)
 4a2:	00 20       	.word	H'0,H'20
 4a4:	00 00       	nop	
 4a6:	03 b4       	ldmac	er4,macl
/home/lib.c:65 (discriminator 3)
 4a8:	00 00       	nop	
 4aa:	0a 12       	add.w	#0x1,r2
/home/lib.c:72
  return 0;
 4ac:	00 00       	nop	
 4ae:	00 0e       	.word	H'0,H'e
/home/lib.c:67
      return (*s1 > *s2) ? 1 : -1;
 4b0:	04 00       	orc	#0x0,ccr
 4b2:	00 00       	nop	
 4b4:	04 0e       	orc	#0xe,ccr
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 4b6:	08 11       	add.b	r1h,r1h
 4b8:	06 7c       	andc	#0x7c,ccr
 4ba:	04 00       	orc	#0x0,ccr
 4bc:	00 00       	nop	
 4be:	02 0d       	stc	ccr,r5l
 4c0:	06 00       	andc	#0x0,ccr
/home/lib.c:73
}
 4c2:	00 00       	nop	
 4c4:	00 00       	nop	
 4c6:	00 20       	.word	H'0,H'20
 4c8:	00 00       	nop	
 4ca:	03 b4       	ldmac	er4,macl
putc():
/home/lib.c:77
{
 4cc:	00 00       	nop	
 4ce:	0a 20       	add.w	#0x2,r0
 4d0:	00 00       	nop	
 4d2:	00 5c       	.word	H'0,H'5c
 4d4:	04 00       	orc	#0x0,ccr
 4d6:	00 00       	nop	
/home/lib.c:78
  if (c == '\n')
 4d8:	04 0e       	orc	#0xe,ccr
 4da:	08 11       	add.b	r1h,r1h
/home/lib.c:79
    serial_send_byte(SERIAL_DEFAULT_DEVICE, '\r');
 4dc:	06 7c       	andc	#0x7c,ccr
 4de:	04 00       	orc	#0x0,ccr
 4e0:	00 00       	nop	
 4e2:	02 0d       	stc	ccr,r5l
 4e4:	06 00       	andc	#0x0,ccr
/home/lib.c:80
  return serial_send_byte(SERIAL_DEFAULT_DEVICE, c);
 4e6:	00 00       	nop	
 4e8:	00 00       	nop	
 4ea:	00 20       	.word	H'0,H'20
 4ec:	00 00       	nop	
 4ee:	03 b4       	ldmac	er4,macl
/home/lib.c:81
}
 4f0:	00 00       	nop	
 4f2:	0a 7c       	add.w	#0x7,e4
 4f4:	00 00       	nop	
 4f6:	00 c0       	.word	H'0,H'c0
 4f8:	04 00       	orc	#0x0,ccr
getc():
/home/lib.c:85
{
 4fa:	00 00       	nop	
 4fc:	04 0e       	orc	#0xe,ccr
 4fe:	08 11       	add.b	r1h,r1h
 500:	06 7c       	andc	#0x7c,ccr
 502:	04 00       	orc	#0x0,ccr
/home/lib.c:86
  unsigned char c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 504:	00 00       	nop	
 506:	02 0d       	stc	ccr,r5l
 508:	06 00       	andc	#0x0,ccr
 50a:	00 00       	nop	
 50c:	00 00       	nop	
/home/lib.c:87
  c = (c == '\r') ? '\n' : c;
 50e:	00 20       	.word	H'0,H'20
 510:	00 00       	nop	
 512:	03 b4       	ldmac	er4,macl
/home/lib.c:88 (discriminator 4)
  putc(c); /* エコー・バック */
 514:	00 00       	nop	
 516:	0b 3c       	.word	H'b,H'3c
 518:	00 00       	nop	
/home/lib.c:90
}
 51a:	01 82       	.word	H'1,H'82
 51c:	04 00       	orc	#0x0,ccr
 51e:	00 00       	nop	
 520:	04 0e       	orc	#0xe,ccr
 522:	08 11       	add.b	r1h,r1h
 524:	06 7c       	andc	#0x7c,ccr
puts():
/home/lib.c:94
{
 526:	04 00       	orc	#0x0,ccr
 528:	00 00       	nop	
 52a:	02 0d       	stc	ccr,r5l
 52c:	06 00       	andc	#0x0,ccr
 52e:	00 00       	nop	
 530:	00 00       	nop	
/home/lib.c:95
  while (*str)
 532:	00 20       	.word	H'0,H'20
/home/lib.c:96
    putc(*(str++));
 534:	00 00       	nop	
 536:	03 b4       	ldmac	er4,macl
 538:	00 00       	nop	
/home/lib.c:95
  while (*str)
 53a:	0c be       	mov.b	r3l,r6l
 53c:	00 00       	nop	
/home/lib.c:98
}
 53e:	00 38       	.word	H'0,H'38
 540:	04 00       	orc	#0x0,ccr
 542:	00 00       	nop	
 544:	04 0e       	orc	#0xe,ccr
 546:	08 11       	add.b	r1h,r1h
 548:	06 7c       	andc	#0x7c,ccr
gets():
/home/lib.c:102
{
 54a:	04 00       	orc	#0x0,ccr
 54c:	00 00       	nop	
 54e:	02 0d       	stc	ccr,r5l
 550:	06 00       	andc	#0x0,ccr
	...

Disassembly of section .debug_loc:

00000000 <.LLST0>:
.LLST0():
   0:	00 00       	nop	
   2:	0e 66       	addx	r6h,r6h
   4:	00 00       	nop	
   6:	0e 6e       	addx	r6h,r6l
   8:	00 01       	.word	H'0,H'1
   a:	50 00       	mulxu.b	r0h,r0
   c:	00 0e       	.word	H'0,H'e
   e:	6e 00 00 0e 	mov.b	@(0xe:16,er0),r0h
  12:	72 00       	bclr	#0x0,r0h
  14:	01 54       	.word	H'1,H'54
  16:	00 00       	nop	
  18:	0e 72       	addx	r7h,r2h
  1a:	00 00       	nop	
  1c:	0e 78       	addx	r7h,r0l
  1e:	00 01       	.word	H'0,H'1
  20:	50 00       	mulxu.b	r0h,r0
  22:	00 0e       	.word	H'0,H'e
  24:	78 00       	.word	H'78,H'0
  26:	00 0e       	.word	H'0,H'e
  28:	94 00       	addx	#0x0,r4h
  2a:	01 54       	.word	H'1,H'54
	...

00000034 <.LLST1>:
.LLST1():
  34:	00 00       	nop	
  36:	0e 8e       	addx	r0l,r6l
  38:	00 00       	nop	
  3a:	0e 94       	addx	r1l,r4h
  3c:	00 01       	.word	H'0,H'1
  3e:	54 00       	rts/l	er0
  40:	00 00       	nop	
  42:	00 00       	nop	
  44:	00 00       	nop	
	...

00000047 <.LLST2>:
.LLST2():
  47:	00 00       	nop	
  49:	0d de       	mov.w	e5,e6
  4b:	00 00       	nop	
  4d:	0e 44       	addx	r4h,r4h
  4f:	00 01       	.word	H'0,H'1
  51:	55 00       	bsr	.0 (0x53)
  53:	00 00       	nop	
  55:	00 00       	nop	
  57:	00 00       	nop	
	...

0000005a <.LLST3>:
.LLST3():
  5a:	00 00       	nop	
  5c:	0d de       	mov.w	e5,e6
  5e:	00 00       	nop	
  60:	0d ec       	mov.w	e6,e4
  62:	00 01       	.word	H'0,H'1
  64:	52 00       	mulxu.w	r0,er0
  66:	00 0d       	.word	H'0,H'd
  68:	ec 00       	and.b	#0x0,r4l
  6a:	00 0e       	.word	H'0,H'e
  6c:	34 00       	mov.b	r4h,@0x0:8
  6e:	02 76       	stc	sbr,er6
  70:	7c 00       	.word	H'7c,H'0
  72:	00 0e       	.word	H'0,H'e
  74:	34 00       	mov.b	r4h,@0x0:8
  76:	00 0e       	.word	H'0,H'e
  78:	36 00       	mov.b	r6h,@0x0:8
  7a:	01 52       	.word	H'1,H'52
  7c:	00 00       	nop	
  7e:	0e 36       	addx	r3h,r6h
  80:	00 00       	nop	
  82:	0e 44       	addx	r4h,r4h
  84:	00 02       	.word	H'0,H'2
  86:	76 7c       	band	#0x7,r4l
	...

00000090 <.LLST4>:
.LLST4():
  90:	00 00       	nop	
  92:	0d ec       	mov.w	e6,e4
  94:	00 00       	nop	
  96:	0e 34       	addx	r3h,r4h
  98:	00 01       	.word	H'0,H'1
  9a:	54 00       	rts/l	er0
  9c:	00 0e       	.word	H'0,H'e
  9e:	36 00       	mov.b	r6h,@0x0:8
  a0:	00 0e       	.word	H'0,H'e
  a2:	44 00       	bcc	.0 (0xa4)
  a4:	01 54       	.word	H'1,H'54
	...

000000ae <.LLST4>:
  ae:	00 00       	nop	
  b0:	00 a6       	.word	H'0,H'a6
  b2:	00 00       	nop	
  b4:	00 c1       	.word	H'0,H'c1
  b6:	00 01       	.word	H'0,H'1
  b8:	50 00       	mulxu.b	r0h,r0
  ba:	00 00       	nop	
  bc:	c1 00       	or.b	#0x0,r1h
  be:	00 00       	nop	
  c0:	c8 00       	or.b	#0x0,r0l
  c2:	04 f3       	orc	#0xf3,ccr
  c4:	01 50       	.word	H'1,H'50
  c6:	9f 00       	addx	#0x0,r7l
  c8:	00 00       	nop	
  ca:	00 00       	nop	
  cc:	00 00       	nop	
	...

000000cf <.LLST5>:
.LLST5():
  cf:	00 00       	nop	
  d1:	00 a6       	.word	H'0,H'a6
  d3:	00 00       	nop	
  d5:	00 c1       	.word	H'0,H'c1
  d7:	00 01       	.word	H'0,H'1
  d9:	51 00       	divxu.b	r0h,r0
  db:	00 00       	nop	
  dd:	c1 00       	or.b	#0x0,r1h
  df:	00 00       	nop	
  e1:	c8 00       	or.b	#0x0,r0l
  e3:	04 f3       	orc	#0xf3,ccr
  e5:	01 51       	.word	H'1,H'51
  e7:	9f 00       	addx	#0x0,r7l
  e9:	00 00       	nop	
  eb:	00 00       	nop	
  ed:	00 00       	nop	
	...

000000f0 <.LLST6>:
.LLST6():
  f0:	00 00       	nop	
  f2:	00 be       	.word	H'0,H'be
  f4:	00 00       	nop	
  f6:	00 c1       	.word	H'0,H'c1
  f8:	00 01       	.word	H'0,H'1
  fa:	52 00       	mulxu.w	r0,er0
  fc:	00 00       	nop	
  fe:	00 00       	nop	
 100:	00 00       	nop	
	...

00000103 <.LLST0>:
.LLST0():
 103:	00 00       	nop	
 105:	00 06       	.word	H'0,H'6
 107:	00 00       	nop	
 109:	00 20       	.word	H'0,H'20
 10b:	00 02       	.word	H'0,H'2
 10d:	30 9f       	mov.b	r0h,@0x9f:8
 10f:	00 00       	nop	
 111:	00 20       	.word	H'0,H'20
 113:	00 00       	nop	
 115:	00 38       	.word	H'0,H'38
 117:	00 02       	.word	H'0,H'2
 119:	31 9f       	mov.b	r1h,@0x9f:8
 11b:	00 00       	nop	
 11d:	00 38       	.word	H'0,H'38
 11f:	00 00       	nop	
 121:	00 50       	.word	H'0,H'50
 123:	00 02       	.word	H'0,H'2
 125:	32 9f       	mov.b	r2h,@0x9f:8
 127:	00 00       	nop	
 129:	00 50       	.word	H'0,H'50
 12b:	00 00       	nop	
 12d:	00 68       	.word	H'0,H'68
 12f:	00 02       	.word	H'0,H'2
 131:	33 9f       	mov.b	r3h,@0x9f:8
 133:	00 00       	nop	
 135:	00 68       	.word	H'0,H'68
 137:	00 00       	nop	
 139:	00 80       	.word	H'0,H'80
 13b:	00 02       	.word	H'0,H'2
 13d:	34 9f       	mov.b	r4h,@0x9f:8
 13f:	00 00       	nop	
 141:	00 80       	.word	H'0,H'80
 143:	00 00       	nop	
 145:	00 88       	.word	H'0,H'88
 147:	00 02       	.word	H'0,H'2
 149:	35 9f       	mov.b	r5h,@0x9f:8
	...

00000153 <.LLST1>:
.LLST1():
 153:	00 00       	nop	
 155:	00 06       	.word	H'0,H'6
 157:	00 00       	nop	
 159:	00 80       	.word	H'0,H'80
 15b:	00 02       	.word	H'0,H'2
 15d:	30 9f       	mov.b	r0h,@0x9f:8
	...

00000167 <.LLST2>:
.LLST2():
 167:	00 00       	nop	
 169:	00 06       	.word	H'0,H'6
 16b:	00 00       	nop	
 16d:	00 20       	.word	H'0,H'20
 16f:	00 02       	.word	H'0,H'2
 171:	30 9f       	mov.b	r0h,@0x9f:8
 173:	00 00       	nop	
 175:	00 20       	.word	H'0,H'20
 177:	00 00       	nop	
 179:	00 38       	.word	H'0,H'38
 17b:	00 02       	.word	H'0,H'2
 17d:	31 9f       	mov.b	r1h,@0x9f:8
 17f:	00 00       	nop	
 181:	00 38       	.word	H'0,H'38
 183:	00 00       	nop	
 185:	00 50       	.word	H'0,H'50
 187:	00 02       	.word	H'0,H'2
 189:	32 9f       	mov.b	r2h,@0x9f:8
 18b:	00 00       	nop	
 18d:	00 50       	.word	H'0,H'50
 18f:	00 00       	nop	
 191:	00 68       	.word	H'0,H'68
 193:	00 02       	.word	H'0,H'2
 195:	33 9f       	mov.b	r3h,@0x9f:8
 197:	00 00       	nop	
 199:	00 68       	.word	H'0,H'68
 19b:	00 00       	nop	
 19d:	00 80       	.word	H'0,H'80
 19f:	00 02       	.word	H'0,H'2
 1a1:	34 9f       	mov.b	r4h,@0x9f:8
	...

000001ab <.LLST3>:
.LLST3():
 1ab:	00 00       	nop	
 1ad:	00 88       	.word	H'0,H'88
 1af:	00 00       	nop	
 1b1:	00 94       	.word	H'0,H'94
 1b3:	00 01       	.word	H'0,H'1
 1b5:	50 00       	mulxu.b	r0h,r0
 1b7:	00 00       	nop	
 1b9:	94 00       	addx	#0x0,r4h
 1bb:	00 00       	nop	
 1bd:	a6 00       	cmp.b	#0x0,r6h
 1bf:	04 f3       	orc	#0xf3,ccr
 1c1:	01 50       	.word	H'1,H'50
 1c3:	9f 00       	addx	#0x0,r7l
 1c5:	00 00       	nop	
 1c7:	00 00       	nop	
 1c9:	00 00       	nop	
	...

000001cc <.LLST24>:
.LLST24():
 1cc:	00 00       	nop	
 1ce:	02 18       	stc	exr,r0l
 1d0:	00 00       	nop	
 1d2:	02 48       	.word	H'2,H'48
 1d4:	00 01       	.word	H'0,H'1
 1d6:	50 00       	mulxu.b	r0h,r0
 1d8:	00 02       	.word	H'0,H'2
 1da:	5c 00 00 02 	bsr	.+2 (0x1e0)
 1de:	68 00       	mov.b	@er0,r0h
 1e0:	01 50       	.word	H'1,H'50
 1e2:	00 00       	nop	
 1e4:	02 68       	stc	vbr,er0
 1e6:	00 00       	nop	
 1e8:	02 86       	.word	H'2,H'86
 1ea:	00 02       	.word	H'0,H'2
 1ec:	30 9f       	mov.b	r0h,@0x9f:8
	...

000001f6 <.LLST25>:
.LLST25():
 1f6:	00 00       	nop	
 1f8:	02 18       	stc	exr,r0l
 1fa:	00 00       	nop	
 1fc:	02 3a       	stmac	macl,er2
 1fe:	00 01       	.word	H'0,H'1
 200:	51 00       	divxu.b	r0h,r0
 202:	00 02       	.word	H'0,H'2
 204:	3a 00       	mov.b	r2l,@0x0:8
 206:	00 02       	.word	H'0,H'2
 208:	48 00       	bvc	.0 (0x20a)
 20a:	04 f3       	orc	#0xf3,ccr
 20c:	01 51       	.word	H'1,H'51
 20e:	9f 00       	addx	#0x0,r7l
 210:	00 02       	.word	H'0,H'2
 212:	48 00       	bvc	.0 (0x214)
 214:	00 02       	.word	H'0,H'2
 216:	73 00       	btst	#0x0,r0h
 218:	01 51       	.word	H'1,H'51
	...

00000222 <.LLST26>:
.LLST26():
 222:	00 00       	nop	
 224:	02 28       	stmac	mach,er0
 226:	00 00       	nop	
 228:	02 48       	.word	H'2,H'48
 22a:	00 03       	.word	H'0,H'3
 22c:	76 7a       	band	#0x7,r2l
 22e:	9f 00       	addx	#0x0,r7l
 230:	00 02       	.word	H'0,H'2
 232:	48 00       	bvc	.0 (0x234)
 234:	00 02       	.word	H'0,H'2
 236:	64 00       	or.w	r0,r0
 238:	03 72       	ldc	er2,sbr
 23a:	7f 9f       	.word	H'7f,H'9f
 23c:	00 00       	nop	
 23e:	02 64       	stc	vbr,er4
 240:	00 00       	nop	
 242:	02 73       	stc	sbr,er3
 244:	00 01       	.word	H'0,H'1
 246:	52 00       	mulxu.w	r0,er0
 248:	00 00       	nop	
 24a:	00 00       	nop	
 24c:	00 00       	nop	
	...

0000024f <.LLST21>:
.LLST21():
 24f:	00 00       	nop	
 251:	01 d2       	.word	H'1,H'd2
 253:	00 00       	nop	
 255:	01 e6       	.word	H'1,H'e6
 257:	00 01       	.word	H'0,H'1
 259:	50 00       	mulxu.b	r0h,r0
 25b:	00 01       	.word	H'0,H'1
 25d:	e6 00       	and.b	#0x0,r6h
 25f:	00 02       	.word	H'0,H'2
 261:	0e 00       	addx	r0h,r0h
 263:	01 55       	.word	H'1,H'55
 265:	00 00       	nop	
 267:	02 0e       	stc	ccr,r6l
 269:	00 00       	nop	
 26b:	02 18       	stc	exr,r0l
 26d:	00 04       	.word	H'0,H'4
 26f:	f3 01       	mov.b	#0x1,r3h
 271:	50 9f       	mulxu.b	r1l,e7
	...

0000027b <.LLST22>:
.LLST22():
 27b:	00 00       	nop	
 27d:	01 e4       	.word	H'1,H'e4
 27f:	00 00       	nop	
 281:	01 e6       	.word	H'1,H'e6
 283:	00 02       	.word	H'0,H'2
 285:	30 9f       	mov.b	r0h,@0x9f:8
 287:	00 00       	nop	
 289:	01 ea       	.word	H'1,H'ea
 28b:	00 00       	nop	
 28d:	01 f3       	.word	H'1,H'f3
 28f:	00 01       	.word	H'0,H'1
 291:	52 00       	mulxu.w	r0,er0
 293:	00 01       	.word	H'0,H'1
 295:	f3 00       	mov.b	#0x0,r3h
 297:	00 02       	.word	H'0,H'2
 299:	00 00       	nop	
 29b:	06 74       	andc	#0x74,ccr
 29d:	00 75       	.word	H'0,H'75
 29f:	00 1c       	.word	H'0,H'1c
 2a1:	9f 00       	addx	#0x0,r7l
 2a3:	00 02       	.word	H'0,H'2
 2a5:	00 00       	nop	
 2a7:	00 02       	.word	H'0,H'2
 2a9:	02 00       	stc	ccr,r0h
 2ab:	08 74       	add.b	r7h,r4h
 2ad:	00 75       	.word	H'0,H'75
 2af:	00 1c       	.word	H'0,H'1c
softvec_init():
/home/interrupt.c:7
{
 2b1:	23 01       	mov.b	@0x1:8,r3h
 2b3:	9f 00       	addx	#0x0,r7l
 2b5:	00 02       	.word	H'0,H'2
softvec_setintr():
/home/interrupt.c:17
  SOFTVECS[type] = handler;
 2b7:	02 00       	stc	ccr,r0h
 2b9:	00 02       	.word	H'0,H'2
 2bb:	04 00       	orc	#0x0,ccr
 2bd:	08 74       	add.b	r7h,r4h
 2bf:	00 75       	.word	H'0,H'75
 2c1:	00 1c       	.word	H'0,H'1c
 2c3:	23 02       	mov.b	@0x2:8,r3h
 2c5:	9f 00       	addx	#0x0,r7l
 2c7:	00 02       	.word	H'0,H'2
 2c9:	04 00       	orc	#0x0,ccr
 2cb:	00 02       	.word	H'0,H'2
 2cd:	0e 00       	addx	r0h,r0h
 2cf:	08 74       	add.b	r7h,r4h
 2d1:	00 75       	.word	H'0,H'75
 2d3:	00 1c       	.word	H'0,H'1c
 2d5:	23 01       	mov.b	@0x1:8,r3h
 2d7:	9f 00       	addx	#0x0,r7l
 2d9:	00 02       	.word	H'0,H'2
 2db:	0e 00       	addx	r0h,r0h
 2dd:	00 02       	.word	H'0,H'2
 2df:	12 00       	rotxl.b	r0h
 2e1:	09 74       	add.w	r7,r4
 2e3:	00 f3       	.word	H'0,H'f3
 2e5:	01 50       	.word	H'1,H'50
 2e7:	1c 23       	cmp.b	r2h,r3h
 2e9:	01 9f       	.word	H'1,H'9f
	...

000002f3 <.LLST23>:
.LLST23():
 2f3:	00 00       	nop	
softvec_setintr():
/home/interrupt.c:17
 2f5:	01 f4       	.word	H'1,H'f4
 2f7:	00 00       	nop	
 2f9:	02 06       	stc	ccr,r6h
 2fb:	00 01       	.word	H'0,H'1
 2fd:	50 00       	mulxu.b	r0h,r0
 2ff:	00 02       	.word	H'0,H'2
 301:	06 00       	andc	#0x0,ccr
 303:	00 02       	.word	H'0,H'2
 305:	18 00       	sub.b	r0h,r0h
 307:	02 30       	stmac	macl,er0
 309:	9f 00       	addx	#0x0,r7l
 30b:	00 00       	nop	
 30d:	00 00       	nop	
 30f:	00 00       	nop	
	...

00000312 <.LLST20>:
.LLST20():
 312:	00 00       	nop	
softvec_setintr():
/home/interrupt.c:17
 314:	01 ae       	.word	H'1,H'ae
 316:	00 00       	nop	
 318:	01 bc       	.word	H'1,H'bc
 31a:	00 01       	.word	H'0,H'1
 31c:	50 00       	mulxu.b	r0h,r0
 31e:	00 01       	.word	H'0,H'1
 320:	bc 00       	subx	#0x0,r4l
 322:	00 01       	.word	H'0,H'1
 324:	cc 00       	or.b	#0x0,r4l
 326:	01 54       	.word	H'1,H'54
	...

00000330 <.LLST19>:
.LLST19():
 330:	00 00       	nop	
softvec_init():
/home/interrupt.c:12
}
 332:	01 96       	.word	H'1,H'96
 334:	00 00       	nop	
 336:	01 9c       	.word	H'1,H'9c
softvec_setintr():
/home/interrupt.c:16
{
 338:	00 01       	.word	H'0,H'1
 33a:	50 00       	mulxu.b	r0h,r0
 33c:	00 01       	.word	H'0,H'1
/home/interrupt.c:17
  SOFTVECS[type] = handler;
 33e:	9c 00       	addx	#0x0,r4l
 340:	00 01       	.word	H'0,H'1
 342:	a8 00       	cmp.b	#0x0,r0l
 344:	01 54       	.word	H'1,H'54
 346:	00 00       	nop	
 348:	01 a8       	.word	H'1,H'a8
 34a:	00 00       	nop	
 34c:	01 ae       	.word	H'1,H'ae
/home/interrupt.c:19
}
 34e:	00 01       	.word	H'0,H'1
 350:	50 00       	mulxu.b	r0h,r0
 352:	00 00       	nop	
 354:	00 00       	nop	
interrupt():
/home/interrupt.c:26
{
 356:	00 00       	nop	
	...

00000359 <.LLST18>:
.LLST18():
 359:	00 00       	nop	
interrupt():
/home/interrupt.c:26
 35b:	01 54       	.word	H'1,H'54
/home/interrupt.c:27
  softvec_handler_t handler = SOFTVECS[type];
 35d:	00 00       	nop	
 35f:	01 6a       	.word	H'1,H'6a
 361:	00 01       	.word	H'0,H'1
 363:	50 00       	mulxu.b	r0h,r0
 365:	00 01       	.word	H'0,H'1
 367:	6a 00 00 01 	mov.b	@0x1:16,r0h
 36b:	7c 00       	.word	H'7c,H'0
 36d:	01 54       	.word	H'1,H'54
/home/interrupt.c:28
  if (handler)
 36f:	00 00       	nop	
/home/interrupt.c:29
    handler(type, sp);
 371:	01 7c       	.word	H'1,H'7c
/home/interrupt.c:30
}
 373:	00 00       	nop	
 375:	01 82       	.word	H'1,H'82
 377:	00 04       	.word	H'0,H'4
memset():
/home/lib.c:6
{
 379:	f3 01       	mov.b	#0x1,r3h
 37b:	50 9f       	mulxu.b	r1l,e7
	...

00000385 <.LLST15>:
.LLST15():
 385:	00 00       	nop	
memset():
/home/lib.c:8
  for (p = b; len > 0; len--)
 387:	01 06       	.word	H'1,H'6
/home/lib.c:9 (discriminator 3)
    *(p++) = c;
 389:	00 00       	nop	
 38b:	01 1e       	.word	H'1,H'1e
 38d:	00 01       	.word	H'0,H'1
 38f:	50 00       	mulxu.b	r0h,r0
/home/lib.c:8 (discriminator 1)
  for (p = b; len > 0; len--)
 391:	00 01       	.word	H'0,H'1
 393:	20 00       	mov.b	@0x0:8,r0h
/home/lib.c:11
}
 395:	00 01       	.word	H'0,H'1
 397:	36 00       	mov.b	r6h,@0x0:8
 399:	01 50       	.word	H'1,H'50
 39b:	00 00       	nop	
 39d:	01 38       	.word	H'1,H'38
memcpy():
/home/lib.c:14
{
 39f:	00 00       	nop	
 3a1:	01 3c       	.word	H'1,H'3c
 3a3:	00 01       	.word	H'0,H'1
 3a5:	50 00       	mulxu.b	r0h,r0
 3a7:	00 01       	.word	H'0,H'1
 3a9:	3e 00       	mov.b	r6l,@0x0:8
 3ab:	00 01       	.word	H'0,H'1
/home/lib.c:17
  for (; len > 0; len--)
 3ad:	42 00       	bhi	.0 (0x3af)
 3af:	01 50       	.word	H'1,H'50
	...

000003b9 <.LLST16>:
.LLST16():
 3b9:	00 00       	nop	
memcpy():
/home/lib.c:18 (discriminator 2)
    *(d++) = *(s++);
 3bb:	01 06       	.word	H'1,H'6
 3bd:	00 00       	nop	
 3bf:	01 24       	.word	H'1,H'24
 3c1:	00 01       	.word	H'0,H'1
/home/lib.c:17 (discriminator 1)
  for (; len > 0; len--)
 3c3:	51 00       	divxu.b	r0h,r0
 3c5:	00 01       	.word	H'0,H'1
/home/lib.c:20
}
 3c7:	24 00       	mov.b	@0x0:8,r4h
 3c9:	00 01       	.word	H'0,H'1
 3cb:	54 00       	rts/l	er0
 3cd:	01 51       	.word	H'1,H'51
	...

000003d7 <.LLST17>:
.LLST17():
 3d7:	00 00       	nop	
memcmp():
/home/lib.c:23
{
 3d9:	01 06       	.word	H'1,H'6
 3db:	00 00       	nop	
 3dd:	01 26       	.word	H'1,H'26
 3df:	00 01       	.word	H'0,H'1
/home/lib.c:25
  for (; len > 0; len--) {
 3e1:	52 00       	mulxu.w	r0,er0
/home/lib.c:26
    if (*p1 != *p2)
 3e3:	00 01       	.word	H'0,H'1
 3e5:	26 00       	mov.b	@0x0:8,r6h
 3e7:	00 01       	.word	H'0,H'1
 3e9:	54 00       	rts/l	er0
/home/lib.c:27
      return (*p1 > *p2) ? 1 : -1;
 3eb:	01 52       	.word	H'1,H'52
	...

000003f5 <.LLST13>:
.LLST13():
 3f5:	00 00       	nop	
memcmp():
/home/lib.c:29
    p2++;
 3f7:	00 ce       	.word	H'0,H'ce
 3f9:	00 00       	nop	
/home/lib.c:25 (discriminator 1)
  for (; len > 0; len--) {
 3fb:	00 e0       	.word	H'0,H'e0
 3fd:	00 01       	.word	H'0,H'1
/home/lib.c:31
  return 0;
 3ff:	50 00       	mulxu.b	r0h,r0
 401:	00 00       	nop	
/home/lib.c:27
      return (*p1 > *p2) ? 1 : -1;
 403:	e2 00       	and.b	#0x0,r2h
 405:	00 00       	nop	
/home/lib.c:32
}
 407:	f2 00       	mov.b	#0x0,r2h
 409:	01 50       	.word	H'1,H'50
 40b:	00 00       	nop	
 40d:	00 fc       	.word	H'0,H'fc
 40f:	00 00       	nop	
strlen():
/home/lib.c:35
{
 411:	01 00       	.word	H'1,H'0
 413:	00 01       	.word	H'0,H'1
 415:	50 00       	mulxu.b	r0h,r0
/home/lib.c:37
  for (len = 0; *s; s++, len++)
 417:	00 00       	nop	
 419:	00 00       	nop	
/home/lib.c:37 (discriminator 3)
 41b:	00 00       	nop	
	...

0000041e <.LLST14>:
.LLST14():
 41e:	00 00       	nop	
strlen():
/home/lib.c:37 (discriminator 1)
 420:	00 ce       	.word	H'0,H'ce
/home/lib.c:40
}
 422:	00 00       	nop	
 424:	00 e6       	.word	H'0,H'e6
 426:	00 01       	.word	H'0,H'1
 428:	51 00       	divxu.b	r0h,r0
strcpy():
/home/lib.c:43
{
 42a:	00 00       	nop	
 42c:	e6 00       	and.b	#0x0,r6h
 42e:	00 01       	.word	H'0,H'1
 430:	06 00       	andc	#0x0,ccr
/home/lib.c:46
    *dst = *src;
 432:	01 51       	.word	H'1,H'51
	...

0000043c <.LLST11>:
.LLST11():
 43c:	00 00       	nop	
strcpy():
/home/lib.c:46
 43e:	00 b2       	.word	H'0,H'b2
/home/lib.c:50
}
 440:	00 00       	nop	
 442:	00 ba       	.word	H'0,H'ba
 444:	00 01       	.word	H'0,H'1
strcmp():
/home/lib.c:53
{
 446:	50 00       	mulxu.b	r0h,r0
 448:	00 00       	nop	
 44a:	ba 00       	subx	#0x0,r2l
/home/lib.c:54
  while (*s1 || *s2) {
 44c:	00 00       	nop	
/home/lib.c:55
    if (*s1 != *s2)
 44e:	ce 00       	or.b	#0x0,r6l
 450:	01 52       	.word	H'1,H'52
	...

0000045a <.LLST12>:
.LLST12():
 45a:	00 00       	nop	
strcmp():
/home/lib.c:58
    s2++;
 45c:	00 b2       	.word	H'0,H'b2
/home/lib.c:54
  while (*s1 || *s2) {
 45e:	00 00       	nop	
 460:	00 c6       	.word	H'0,H'c6
 462:	00 01       	.word	H'0,H'1
 464:	51 00       	divxu.b	r0h,r0
/home/lib.c:54 (discriminator 1)
 466:	00 00       	nop	
 468:	c6 00       	or.b	#0x0,r6h
 46a:	00 00       	nop	
 46c:	ce 00       	or.b	#0x0,r6l
 46e:	01 51       	.word	H'1,H'51
	...

00000478 <.LLST9>:
.LLST9():
 478:	00 00       	nop	
strcmp():
/home/lib.c:61
}
 47a:	00 98       	.word	H'0,H'98
 47c:	00 00       	nop	
strncmp():
/home/lib.c:64
{
 47e:	00 a4       	.word	H'0,H'a4
 480:	00 01       	.word	H'0,H'1
 482:	50 00       	mulxu.b	r0h,r0
 484:	00 00       	nop	
 486:	a4 00       	cmp.b	#0x0,r4h
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 488:	00 00       	nop	
/home/lib.c:66
    if (*s1 != *s2)
 48a:	ac 00       	cmp.b	#0x0,r4l
 48c:	01 50       	.word	H'1,H'50
	...

00000496 <.LLST10>:
.LLST10():
 496:	00 00       	nop	
strncmp():
/home/lib.c:68
    s1++;
 498:	00 9e       	.word	H'0,H'9e
/home/lib.c:69
    s2++;
 49a:	00 00       	nop	
/home/lib.c:70
    len--;
 49c:	00 a2       	.word	H'0,H'a2
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 49e:	00 02       	.word	H'0,H'2
 4a0:	30 9f       	mov.b	r0h,@0x9f:8
/home/lib.c:65 (discriminator 2)
 4a2:	00 00       	nop	
 4a4:	00 a2       	.word	H'0,H'a2
 4a6:	00 00       	nop	
/home/lib.c:65 (discriminator 3)
 4a8:	00 b2       	.word	H'0,H'b2
 4aa:	00 01       	.word	H'0,H'1
/home/lib.c:72
  return 0;
 4ac:	52 00       	mulxu.w	r0,er0
 4ae:	00 00       	nop	
/home/lib.c:67
      return (*s1 > *s2) ? 1 : -1;
 4b0:	00 00       	nop	
 4b2:	00 00       	nop	
	...

000004b5 <.LLST5>:
.LLST5():
 4b5:	00 00       	nop	
strncmp():
/home/lib.c:65
  while ((*s1 || *s2) && (len > 0)) {
 4b7:	00 5c       	.word	H'0,H'5c
 4b9:	00 00       	nop	
 4bb:	00 6a       	.word	H'0,H'6a
 4bd:	00 01       	.word	H'0,H'1
 4bf:	50 00       	mulxu.b	r0h,r0
 4c1:	00 00       	nop	
/home/lib.c:73
}
 4c3:	6a 00 00 00 	mov.b	@0x0:16,r0h
 4c7:	98 00       	addx	#0x0,r0l
 4c9:	04 f3       	orc	#0xf3,ccr
 4cb:	01 50       	.word	H'1,H'50
putc():
/home/lib.c:77
{
 4cd:	9f 00       	addx	#0x0,r7l
 4cf:	00 00       	nop	
 4d1:	00 00       	nop	
 4d3:	00 00       	nop	
	...

000004d6 <.LLST6>:
.LLST6():
 4d6:	00 00       	nop	
putc():
/home/lib.c:78
  if (c == '\n')
 4d8:	00 5c       	.word	H'0,H'5c
 4da:	00 00       	nop	
/home/lib.c:79
    serial_send_byte(SERIAL_DEFAULT_DEVICE, '\r');
 4dc:	00 6a       	.word	H'0,H'6a
 4de:	00 01       	.word	H'0,H'1
 4e0:	51 00       	divxu.b	r0h,r0
 4e2:	00 00       	nop	
 4e4:	6a 00 00 00 	mov.b	@0x0:16,r0h
/home/lib.c:80
  return serial_send_byte(SERIAL_DEFAULT_DEVICE, c);
 4e8:	98 00       	addx	#0x0,r0l
 4ea:	04 f3       	orc	#0xf3,ccr
 4ec:	01 51       	.word	H'1,H'51
 4ee:	9f 00       	addx	#0x0,r7l
/home/lib.c:81
}
 4f0:	00 00       	nop	
 4f2:	00 00       	nop	
 4f4:	00 00       	nop	
	...

000004f7 <.LLST7>:
.LLST7():
 4f7:	00 00       	nop	
putc():
/home/lib.c:81
 4f9:	00 5c       	.word	H'0,H'5c
getc():
/home/lib.c:85
{
 4fb:	00 00       	nop	
 4fd:	00 68       	.word	H'0,H'68
 4ff:	00 01       	.word	H'0,H'1
 501:	52 00       	mulxu.w	r0,er0
 503:	00 00       	nop	
/home/lib.c:86
  unsigned char c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 505:	68 00       	mov.b	@er0,r0h
 507:	00 00       	nop	
 509:	6a 00 04 f3 	mov.b	@0x4f3:16,r0h
 50d:	01 52       	.word	H'1,H'52
/home/lib.c:87
  c = (c == '\r') ? '\n' : c;
 50f:	9f 00       	addx	#0x0,r7l
 511:	00 00       	nop	
 513:	6a 00 00 00 	mov.b	@0x0:16,r0h
/home/lib.c:88 (discriminator 4)
  putc(c); /* エコー・バック */
 517:	78 00       	.word	H'78,H'0
 519:	0b f3       	inc.l	#2,er3
/home/lib.c:90
}
 51b:	01 50       	.word	H'1,H'50
 51d:	70 00       	bset	#0x0,r0h
 51f:	1c f3       	cmp.b	r7l,r3h
 521:	01 52       	.word	H'1,H'52
 523:	22 9f       	mov.b	@0x9f:8,r2h
 525:	00 00       	nop	
puts():
/home/lib.c:94
{
 527:	00 7a       	.word	H'0,H'7a
 529:	00 00       	nop	
 52b:	00 7c       	.word	H'0,H'7c
 52d:	00 0b       	.word	H'0,H'b
 52f:	f3 01       	mov.b	#0x1,r3h
 531:	50 70       	mulxu.b	r7h,r0
/home/lib.c:95
  while (*str)
 533:	00 1c       	.word	H'0,H'1c
/home/lib.c:96
    putc(*(str++));
 535:	f3 01       	mov.b	#0x1,r3h
 537:	52 22       	mulxu.w	r2,er2
 539:	9f 00       	addx	#0x0,r7l
/home/lib.c:95
  while (*str)
 53b:	00 00       	nop	
 53d:	7c 00       	.word	H'7c,H'0
/home/lib.c:98
}
 53f:	00 00       	nop	
 541:	7e 00       	.word	H'7e,H'0
 543:	0d f3       	mov.w	e7,r3
 545:	01 50       	.word	H'1,H'50
 547:	70 00       	bset	#0x0,r0h
 549:	1c f3       	cmp.b	r7l,r3h
gets():
/home/lib.c:102
{
 54b:	01 52       	.word	H'1,H'52
 54d:	22 23       	mov.b	@0x23:8,r2h
 54f:	01 9f       	.word	H'1,H'9f
 551:	00 00       	nop	
 553:	00 7e       	.word	H'0,H'7e
 555:	00 00       	nop	
 557:	00 88       	.word	H'0,H'88
 559:	00 0b       	.word	H'0,H'b
 55b:	f3 01       	mov.b	#0x1,r3h
 55d:	50 70       	mulxu.b	r7h,r0
 55f:	00 1c       	.word	H'0,H'1c
 561:	f3 01       	mov.b	#0x1,r3h
/home/lib.c:106
    c = getc();
 563:	52 22       	mulxu.w	r2,er2
 565:	9f 00       	addx	#0x0,r7l
 567:	00 00       	nop	
 569:	8a 00       	add.b	#0x0,r2l
 56b:	00 00       	nop	
/home/lib.c:107
    if (c == '\n')
 56d:	8e 00       	add.b	#0x0,r6l
 56f:	0b f3       	inc.l	#2,er3
 571:	01 50       	.word	H'1,H'50
 573:	70 00       	bset	#0x0,r0h
 575:	1c f3       	cmp.b	r7l,r3h
/home/lib.c:108
      c = '\0';
 577:	01 52       	.word	H'1,H'52
/home/lib.c:109
    buf[i++] = c;
 579:	22 9f       	mov.b	@0x9f:8,r2h
	...

00000583 <.LLST8>:
.LLST8():
 583:	00 00       	nop	
gets():
/home/lib.c:112
}
 585:	00 66       	.word	H'0,H'66
 587:	00 00       	nop	
 589:	00 78       	.word	H'0,H'78
 58b:	00 01       	.word	H'0,H'1
 58d:	50 00       	mulxu.b	r0h,r0
 58f:	00 00       	nop	
putxval():
/home/lib.c:116
{
 591:	7a 00 00 00 	mov.l	#0x8800,er0
 595:	88 00 
 597:	01 50       	.word	H'1,H'50
 599:	00 00       	nop	
 59b:	00 8a       	.word	H'0,H'8a
 59d:	00 00       	nop	
 59f:	00 8e       	.word	H'0,H'8e
/home/lib.c:121
  *(p--) = '\0';
 5a1:	00 01       	.word	H'0,H'1
 5a3:	50 00       	mulxu.b	r0h,r0
 5a5:	00 00       	nop	
/home/lib.c:123
  if (!value && !column)
 5a7:	00 00       	nop	
 5a9:	00 00       	nop	
	...

000005ac <.LLST2>:
.LLST2():
 5ac:	00 00       	nop	
putxval():
/home/lib.c:124
    column++;
 5ae:	00 26       	.word	H'0,H'26
 5b0:	00 00       	nop	
 5b2:	00 38       	.word	H'0,H'38
 5b4:	00 01       	.word	H'0,H'1
 5b6:	52 00       	mulxu.w	r0,er0
/home/lib.c:127
    *(p--) = "0123456789abcdef"[value & 0xf];
 5b8:	00 00       	nop	
 5ba:	38 00       	mov.b	r0l,@0x0:8
 5bc:	00 00       	nop	
 5be:	3a 00       	mov.b	r2l,@0x0:8
 5c0:	01 54       	.word	H'1,H'54
 5c2:	00 00       	nop	
 5c4:	00 3a       	.word	H'0,H'3a
 5c6:	00 00       	nop	
 5c8:	00 44       	.word	H'0,H'44
 5ca:	00 06       	.word	H'0,H'6
/home/lib.c:128
    value >>= 4;
 5cc:	72 00       	bclr	#0x0,r0h
 5ce:	73 00       	btst	#0x0,r0h
 5d0:	1c 9f       	cmp.b	r1l,r7l
 5d2:	00 00       	nop	
/home/lib.c:129
    if (column) column--;
 5d4:	00 44       	.word	H'0,H'44
 5d6:	00 00       	nop	
/home/lib.c:129 (discriminator 1)
 5d8:	00 46       	.word	H'0,H'46
 5da:	00 07       	.word	H'0,H'7
/home/lib.c:126
  while (value || column) {
 5dc:	73 00       	btst	#0x0,r0h
 5de:	20 72       	mov.b	@0x72:8,r0h
/home/lib.c:126 (discriminator 1)
 5e0:	00 22       	.word	H'0,H'22
 5e2:	9f 00       	addx	#0x0,r7l
/home/lib.c:132
  puts(p + 1);
 5e4:	00 00       	nop	
 5e6:	46 00       	bne	.0 (0x5e8)
 5e8:	00 00       	nop	
 5ea:	4a 00       	bpl	.0 (0x5ec)
/home/lib.c:135
}
 5ec:	06 72       	andc	#0x72,ccr
 5ee:	00 73       	.word	H'0,H'73
 5f0:	00 1c       	.word	H'0,H'1c
 5f2:	9f 00       	addx	#0x0,r7l
 5f4:	00 00       	nop	
 5f6:	4a 00       	bpl	.0 (0x5f8)
 5f8:	00 00       	nop	
 5fa:	56 00       	rte/l	er0
 5fc:	01 54       	.word	H'1,H'54
serial_init():
/home/serial.c:59
{
 5fe:	00 00       	nop	
 600:	00 56       	.word	H'0,H'56
 602:	00 00       	nop	
/home/serial.c:60
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 604:	00 5c       	.word	H'0,H'5c
 606:	00 06       	.word	H'0,H'6
 608:	72 00       	bclr	#0x0,r0h
 60a:	73 00       	btst	#0x0,r0h
 60c:	1c 9f       	cmp.b	r1l,r7l
	...

00000616 <.LLST3>:
.LLST3():
 616:	00 00       	nop	
serial_init():
/home/serial.c:62
  sci->scr = 0;
 618:	00 34       	.word	H'0,H'34
/home/serial.c:63
  sci->smr = 0;
 61a:	00 00       	nop	
/home/serial.c:64
  sci->brr = 64; /* 20MHzのクロックから9600bpsを生成(25MHzの場合は80にする) */
 61c:	00 38       	.word	H'0,H'38
 61e:	00 01       	.word	H'0,H'1
 620:	50 00       	mulxu.b	r0h,r0
/home/serial.c:65
  sci->scr = H8_3069F_SCI_SCR_RE | H8_3069F_SCI_SCR_TE; /* 送受信可能 */
 622:	00 00       	nop	
 624:	38 00       	mov.b	r0l,@0x0:8
 626:	00 00       	nop	
/home/serial.c:66
  sci->ssr = 0;
 628:	46 00       	bne	.0 (0x62a)
 62a:	08 70       	add.b	r7h,r0h
/home/serial.c:69
}
 62c:	00 73       	.word	H'0,H'73
 62e:	00 22       	.word	H'0,H'22
 630:	23 01       	mov.b	@0x1:8,r3h
 632:	9f 00       	addx	#0x0,r7l
serial_is_send_enable():
/home/serial.c:73
{
 634:	00 00       	nop	
 636:	46 00       	bne	.0 (0x638)
 638:	00 00       	nop	
/home/serial.c:74
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 63a:	5c 00 06 70 	bsr	.+1648 (0xcae)
 63e:	00 73       	.word	H'0,H'73
 640:	00 22       	.word	H'0,H'22
 642:	9f 00       	addx	#0x0,r7l
 644:	00 00       	nop	
 646:	00 00       	nop	
 648:	00 00       	nop	
	...

0000064b <.LLST4>:
.LLST4():
 64b:	00 00       	nop	
serial_is_send_enable():
/home/serial.c:75
  return (sci->ssr & H8_3069F_SCI_SSR_TDRE);
 64d:	00 34       	.word	H'0,H'34
 64f:	00 00       	nop	
/home/serial.c:76
}
 651:	00 38       	.word	H'0,H'38
 653:	00 01       	.word	H'0,H'1
 655:	51 00       	divxu.b	r0h,r0
 657:	00 00       	nop	
serial_send_byte():
/home/serial.c:80
{
 659:	38 00       	mov.b	r0l,@0x0:8
 65b:	00 00       	nop	
 65d:	46 00       	bne	.0 (0x65f)
/home/serial.c:81
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 65f:	08 71       	add.b	r7h,r1h
 661:	00 73       	.word	H'0,H'73
 663:	00 22       	.word	H'0,H'22
 665:	23 01       	mov.b	@0x1:8,r3h
 667:	9f 00       	addx	#0x0,r7l
 669:	00 00       	nop	
 66b:	46 00       	bne	.0 (0x66d)
 66d:	00 00       	nop	
serial_is_send_enable():
/home/serial.c:75 (discriminator 1)
  return (sci->ssr & H8_3069F_SCI_SSR_TDRE);
 66f:	5c 00 06 71 	bsr	.+1649 (0xce4)
serial_send_byte():
/home/serial.c:84
  while (!serial_is_send_enable(index))
 673:	00 73       	.word	H'0,H'73
/home/serial.c:86
  sci->tdr = c;
 675:	00 22       	.word	H'0,H'22
 677:	9f 00       	addx	#0x0,r7l
/home/serial.c:87
  sci->ssr &= ~H8_3069F_SCI_SSR_TDRE; /* 送信開始 */
 679:	00 00       	nop	
 67b:	00 00       	nop	
 67d:	00 00       	nop	
	...

00000680 <.LLST0>:
.LLST0():
 680:	00 00       	nop	
serial_send_byte():
/home/serial.c:90
}
 682:	00 00       	nop	
 684:	00 00       	nop	
 686:	00 0e       	.word	H'0,H'e
 688:	00 01       	.word	H'0,H'1
serial_is_recv_enable():
/home/serial.c:94
{
 68a:	52 00       	mulxu.w	r0,er0
 68c:	00 00       	nop	
 68e:	0e 00       	addx	r0h,r0h
/home/serial.c:95
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 690:	00 00       	nop	
 692:	10 00       	shll.b	r0h
 694:	04 f3       	orc	#0xf3,ccr
 696:	01 52       	.word	H'1,H'52
 698:	9f 00       	addx	#0x0,r7l
 69a:	00 00       	nop	
 69c:	10 00       	shll.b	r0h
 69e:	00 00       	nop	
/home/serial.c:96
  return (sci->ssr & H8_3069F_SCI_SSR_RDRF);
 6a0:	12 00       	rotxl.b	r0h
 6a2:	0a 70       	add.w	#0x7,r0
 6a4:	00 73       	.word	H'0,H'73
/home/serial.c:97
}
 6a6:	00 1c       	.word	H'0,H'1c
 6a8:	f3 01       	mov.b	#0x1,r3h
 6aa:	52 22       	mulxu.w	r2,er2
 6ac:	9f 00       	addx	#0x0,r7l
serial_recv_byte():
/home/serial.c:101
{
 6ae:	00 00       	nop	
 6b0:	12 00       	rotxl.b	r0h
 6b2:	00 00       	nop	
/home/serial.c:102
  volatile struct h8_3069f_sci *sci = regs[index].sci;
 6b4:	14 00       	or.b	r0h,r0h
 6b6:	0b 73       	inc.l	#1,er3
 6b8:	00 20       	.word	H'0,H'20
 6ba:	f3 01       	mov.b	#0x1,r3h
 6bc:	52 22       	mulxu.w	r2,er2
 6be:	70 00       	bset	#0x0,r0h
 6c0:	22 9f       	mov.b	@0x9f:8,r2h
 6c2:	00 00       	nop	
serial_is_recv_enable():
/home/serial.c:96 (discriminator 1)
  return (sci->ssr & H8_3069F_SCI_SSR_RDRF);
 6c4:	00 14       	.word	H'0,H'14
 6c6:	00 00       	nop	
serial_recv_byte():
/home/serial.c:106
  while (!serial_is_recv_enable(index))
 6c8:	00 26       	.word	H'0,H'26
 6ca:	00 0a       	.word	H'0,H'a
/home/serial.c:108
  c = sci->rdr;
 6cc:	70 00       	bset	#0x0,r0h
 6ce:	73 00       	btst	#0x0,r0h
/home/serial.c:109
  sci->ssr &= ~H8_3069F_SCI_SSR_RDRF; /* 受信完了 */
 6d0:	1c f3       	cmp.b	r7l,r3h
 6d2:	01 52       	.word	H'1,H'52
 6d4:	22 9f       	mov.b	@0x9f:8,r2h
	...

000006de <.LLST1>:
.LLST1():
 6de:	00 00       	nop	
xmodem_recv():
/home/xmodem.c:60
{
 6e0:	00 0a       	.word	H'0,H'a
 6e2:	00 00       	nop	
 6e4:	00 10       	.word	H'0,H'10
 6e6:	00 01       	.word	H'0,H'1
 6e8:	50 00       	mulxu.b	r0h,r0
 6ea:	00 00       	nop	
 6ec:	10 00       	shll.b	r0h
 6ee:	00 00       	nop	
 6f0:	14 00       	or.b	r0h,r0h
 6f2:	03 73       	ldc	er3,sbr
 6f4:	01 9f       	.word	H'1,H'9f
/home/xmodem.c:63
  unsigned char c, block_number = 1;
 6f6:	00 00       	nop	
 6f8:	00 14       	.word	H'0,H'14
 6fa:	00 00       	nop	
/home/xmodem.c:62
  long size = 0;
 6fc:	00 26       	.word	H'0,H'26
/home/xmodem.c:61
  int r, receiving = 0;
 6fe:	00 01       	.word	H'0,H'1
 700:	53 00       	divxu.w	r0,er0
 702:	00 00       	nop	
/home/xmodem.c:66
    if (!receiving)
 704:	00 00       	nop	
 706:	00 00       	nop	
	...

00000709 <.LLST5>:
.LLST5():
 709:	00 00       	nop	
xmodem_recv():
/home/xmodem.c:69
    c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 70b:	00 b0       	.word	H'0,H'b0
 70d:	00 00       	nop	
 70f:	00 bc       	.word	H'0,H'bc
 711:	00 01       	.word	H'0,H'1
/home/xmodem.c:71
    if (c == XMODEM_EOT) { /* 受信終了 */
 713:	50 00       	mulxu.b	r0h,r0
 715:	00 00       	nop	
 717:	bc 00       	subx	#0x0,r4l
xmodem_wait():
/home/xmodem.c:22
    if (++cnt >= 50000) {
 719:	00 00       	nop	
 71b:	e2 00       	and.b	#0x0,r2h
/home/xmodem.c:24
      serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_NAK);
 71d:	04 f3       	orc	#0xf3,ccr
 71f:	01 50       	.word	H'1,H'50
 721:	9f 00       	addx	#0x0,r7l
 723:	00 00       	nop	
 725:	00 00       	nop	
xmodem_recv():
/home/xmodem.c:61
  int r, receiving = 0;
 727:	00 00       	nop	
	...

0000072a <.LLST6>:
.LLST6():
 72a:	00 00       	nop	
xmodem_wait():
/home/xmodem.c:21
  while (!serial_is_recv_enable(SERIAL_DEFAULT_DEVICE)) {
 72c:	00 c6       	.word	H'0,H'c6
 72e:	00 00       	nop	
 730:	00 ca       	.word	H'0,H'ca
 732:	00 04       	.word	H'0,H'4
 734:	f3 01       	mov.b	#0x1,r3h
 736:	50 9f       	mulxu.b	r1l,e7
	...

00000740 <.LLST2>:
.LLST2():
 740:	00 00       	nop	
xmodem_wait():
/home/xmodem.c:21
 742:	00 5a       	.word	H'0,H'5a
 744:	00 00       	nop	
xmodem_recv():
/home/xmodem.c:72
      serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_ACK);
 746:	00 66       	.word	H'0,H'66
 748:	00 01       	.word	H'0,H'1
 74a:	50 00       	mulxu.b	r0h,r0
 74c:	00 00       	nop	
 74e:	66 00       	and.w	r0,r0
/home/xmodem.c:93
  return size;
 750:	00 00       	nop	
 752:	8c 00       	add.b	#0x0,r4l
/home/xmodem.c:74
    } else if (c == XMODEM_CAN) { /* 受信中断 */
 754:	04 f3       	orc	#0xf3,ccr
 756:	01 50       	.word	H'1,H'50
 758:	9f 00       	addx	#0x0,r7l
/home/xmodem.c:77
      receiving++;
 75a:	00 00       	nop	
 75c:	00 00       	nop	
/home/xmodem.c:76
    } else if (c == XMODEM_SOH) { /* 受信開始 */
 75e:	00 00       	nop	
	...

00000761 <.LLST3>:
.LLST3():
 761:	00 00       	nop	
xmodem_recv():
/home/xmodem.c:76
 763:	00 70       	.word	H'0,H'70
/home/xmodem.c:77
      receiving++;
 765:	00 00       	nop	
 767:	00 74       	.word	H'0,H'74
 769:	00 04       	.word	H'0,H'4
xmodem_read_block():
/home/xmodem.c:37
  block_num = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 76b:	f3 01       	mov.b	#0x1,r3h
 76d:	50 9f       	mulxu.b	r1l,e7
	...

00000777 <.LLST0>:
.LLST0():
 777:	00 00       	nop	
xmodem_read_block():
/home/xmodem.c:38
  if (block_num != block_number)
 779:	00 00       	nop	
 77b:	00 00       	nop	
/home/xmodem.c:41
  block_num ^= serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 77d:	00 0c       	.word	H'0,H'c
 77f:	00 01       	.word	H'0,H'1
 781:	50 00       	mulxu.b	r0h,r0
 783:	00 00       	nop	
 785:	0c 00       	mov.b	r0h,r0h
 787:	00 00       	nop	
 789:	36 00       	mov.b	r6h,@0x0:8
/home/xmodem.c:42
  if (block_num != 0xff)
 78b:	04 f3       	orc	#0xf3,ccr
 78d:	01 50       	.word	H'1,H'50
 78f:	9f 00       	addx	#0x0,r7l
 791:	00 00       	nop	
 793:	00 00       	nop	
 795:	00 00       	nop	
	...

00000798 <.LLST1>:
.LLST1():
 798:	00 00       	nop	
xmodem_read_block():
/home/xmodem.c:47
    c = serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 79a:	00 36       	.word	H'0,H'36
 79c:	00 00       	nop	
 79e:	00 42       	.word	H'0,H'42
 7a0:	00 01       	.word	H'0,H'1
 7a2:	50 00       	mulxu.b	r0h,r0
 7a4:	00 00       	nop	
 7a6:	42 00       	bhi	.0 (0x7a8)
 7a8:	00 00       	nop	
 7aa:	5a 00 04 f3 	jmp	@0x4f3:24
 7ae:	01 50       	.word	H'1,H'50
 7b0:	9f 00       	addx	#0x0,r7l
/home/xmodem.c:48
    *(buf++) = c;
 7b2:	00 00       	nop	
 7b4:	00 00       	nop	
 7b6:	00 00       	nop	
	...

000007b9 <.LLST4>:
.LLST4():
 7b9:	00 00       	nop	
xmodem_read_block():
/home/xmodem.c:49
    check_sum += c;
 7bb:	00 8c       	.word	H'0,H'8c
 7bd:	00 00       	nop	
 7bf:	00 98       	.word	H'0,H'98
 7c1:	00 01       	.word	H'0,H'1
 7c3:	50 00       	mulxu.b	r0h,r0
/home/xmodem.c:46
  for (i = 0; i < XMODEM_BLOCK_SIZE; i++) {
 7c5:	00 00       	nop	
 7c7:	98 00       	addx	#0x0,r0l
 7c9:	00 00       	nop	
 7cb:	b0 00       	subx	#0x0,r0h
 7cd:	04 f3       	orc	#0xf3,ccr
/home/xmodem.c:52
  check_sum ^= serial_recv_byte(SERIAL_DEFAULT_DEVICE);
 7cf:	01 50       	.word	H'1,H'50
 7d1:	9f 00       	addx	#0x0,r7l
 7d3:	00 00       	nop	
 7d5:	00 00       	nop	
 7d7:	00 00       	nop	
	...

000007da <.LLST0>:
.LLST0():
 7da:	00 00       	nop	
xmodem_read_block():
/home/xmodem.c:53
  if (check_sum)
 7dc:	00 00       	nop	
 7de:	00 00       	nop	
 7e0:	00 24       	.word	H'0,H'24
 7e2:	00 01       	.word	H'0,H'1
 7e4:	50 00       	mulxu.b	r0h,r0
xmodem_recv():
/home/xmodem.c:82
	block_number++;
 7e6:	00 00       	nop	
 7e8:	24 00       	mov.b	@0x0:8,r4h
 7ea:	00 01       	.word	H'0,H'1
 7ec:	44 00       	bcc	.0 (0x7ee)
 7ee:	01 55       	.word	H'1,H'55
	...

000007f8 <.LLST1>:
.LLST1():
 7f8:	00 00       	nop	
xmodem_recv():
/home/xmodem.c:84
	buf  += r;
 7fa:	00 16       	.word	H'0,H'16
/home/xmodem.c:85
	serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_ACK);
 7fc:	00 00       	nop	
 7fe:	00 24       	.word	H'0,H'24
/home/xmodem.c:80
	serial_send_byte(SERIAL_DEFAULT_DEVICE, XMODEM_NAK);
 800:	00 02       	.word	H'0,H'2
 802:	30 9f       	mov.b	r0h,@0x9f:8
 804:	00 00       	nop	
 806:	00 24       	.word	H'0,H'24
 808:	00 00       	nop	
 80a:	00 8a       	.word	H'0,H'8a
 80c:	00 02       	.word	H'0,H'2
/home/xmodem.c:88
      if (receiving)
 80e:	76 74       	band	#0x7,r4h
 810:	00 00       	nop	
 812:	00 8a       	.word	H'0,H'8a
/home/xmodem.c:75
      return -1;
 814:	00 00       	nop	
 816:	00 91       	.word	H'0,H'91
/home/xmodem.c:94
}
 818:	00 01       	.word	H'0,H'1
 81a:	52 00       	mulxu.w	r0,er0
 81c:	00 00       	nop	
 81e:	91 00       	addx	#0x0,r1h
 820:	00 01       	.word	H'0,H'1
 822:	4c 00       	bge	.0 (0x824)
 824:	02 76       	stc	sbr,er6
 826:	74 00       	bor	#0x0,r0h
 828:	00 01       	.word	H'0,H'1
 82a:	4c 00       	bge	.0 (0x82c)
 82c:	00 01       	.word	H'0,H'1
elf_load():
/home/elf.c:84
{
 82e:	4e 00       	bgt	.0 (0x830)
 830:	02 91       	.word	H'2,H'91
 832:	6c 00       	mov.b	@er0+,r0h
 834:	00 00       	nop	
 836:	00 00       	nop	
 838:	00 00       	nop	
	...

0000083b <.LLST2>:
.LLST2():
 83b:	00 00       	nop	
elf_load():
/home/elf.c:84
 83d:	00 16       	.word	H'0,H'16
 83f:	00 00       	nop	
elf_check():
/home/elf.c:44
  if (memcmp(header->id.magic, "\x7f" "ELF", 4))
 841:	00 24       	.word	H'0,H'24
 843:	00 02       	.word	H'0,H'2
 845:	30 9f       	mov.b	r0h,@0x9f:8
 847:	00 00       	nop	
 849:	00 24       	.word	H'0,H'24
 84b:	00 00       	nop	
 84d:	01 38       	.word	H'1,H'38
 84f:	00 01       	.word	H'0,H'1
 851:	54 00       	rts/l	er0
 853:	00 00       	nop	
/home/elf.c:47
  if (header->id.class   != 1) return -1; /* ELF32 */
 855:	00 00       	nop	
 857:	00 00       	nop	
	...

0000085a <.LLST3>:
.LLST3():
 85a:	00 00       	nop	
elf_check():
/home/elf.c:47
 85c:	00 32       	.word	H'0,H'32
/home/elf.c:48
  if (header->id.format  != 2) return -1; /* Big endian */
 85e:	00 00       	nop	
 860:	00 38       	.word	H'0,H'38
 862:	00 01       	.word	H'0,H'1
 864:	50 00       	mulxu.b	r0h,r0
 866:	00 00       	nop	
/home/elf.c:49
  if (header->id.version != 1) return -1; /* version 1 */
 868:	66 00       	and.w	r0,r0
 86a:	00 00       	nop	
 86c:	6c 00       	mov.b	@er0+,r0h
 86e:	01 50       	.word	H'1,H'50
 870:	00 00       	nop	
/home/elf.c:50
  if (header->type       != 2) return -1; /* Executable file */
 872:	00 74       	.word	H'0,H'74
 874:	00 00       	nop	
 876:	00 8e       	.word	H'0,H'8e
 878:	00 01       	.word	H'0,H'1
 87a:	50 00       	mulxu.b	r0h,r0
/home/elf.c:51
  if (header->version    != 1) return -1; /* version 1 */
 87c:	00 01       	.word	H'0,H'1
 87e:	2e 00       	mov.b	@0x0:8,r6l
 880:	00 01       	.word	H'0,H'1
 882:	38 00       	mov.b	r0l,@0x0:8
 884:	01 50       	.word	H'1,H'50
	...

0000088e <.LLST4>:
.LLST4():
 88e:	00 00       	nop	
elf_check():
/home/elf.c:54
  if ((header->arch != 46) && (header->arch != 47)) return -1;
 890:	00 16       	.word	H'0,H'16
 892:	00 00       	nop	
 894:	00 24       	.word	H'0,H'24
elf_load_program():
/home/elf.c:69
       header->program_header_size * i);
 896:	00 02       	.word	H'0,H'2
 898:	31 9f       	mov.b	r1h,@0x9f:8
 89a:	00 00       	nop	
 89c:	00 24       	.word	H'0,H'24
 89e:	00 00       	nop	
/home/elf.c:68
      ((char *)header + header->program_header_offset +
 8a0:	01 10       	.word	H'1,H'10
 8a2:	00 02       	.word	H'0,H'2
 8a4:	76 77       	band	#0x7,r7h
 8a6:	00 00       	nop	
/home/elf.c:67
    phdr = (struct elf_program_header *)
 8a8:	01 10       	.word	H'1,H'10
/home/elf.c:71
    if (phdr->type != 1) /* ロード可能なセグメントか？ */
 8aa:	00 00       	nop	
 8ac:	01 20       	.word	H'1,H'20
 8ae:	00 01       	.word	H'0,H'1
 8b0:	52 00       	mulxu.w	r0,er0
/home/elf.c:74
    memcpy((char *)phdr->physical_addr, (char *)header + phdr->offset,
 8b2:	00 01       	.word	H'0,H'1
 8b4:	20 00       	mov.b	@0x0:8,r0h
 8b6:	00 01       	.word	H'0,H'1
 8b8:	4c 00       	bge	.0 (0x8ba)
 8ba:	02 76       	stc	sbr,er6
 8bc:	77 00       	bld	#0x0,r0h
 8be:	00 01       	.word	H'0,H'1
 8c0:	4c 00       	bge	.0 (0x8c2)
 8c2:	00 01       	.word	H'0,H'1
 8c4:	4e 00       	bgt	.0 (0x8c6)
 8c6:	02 91       	.word	H'2,H'91
 8c8:	6f 00 00 00 	mov.w	@(0x0:16,er0),r0
 8cc:	00 00       	nop	
 8ce:	00 00       	nop	
	...

000008d1 <.LLST5>:
.LLST5():
 8d1:	00 00       	nop	
elf_load_program():
/home/elf.c:77
	   phdr->memory_size - phdr->file_size);
 8d3:	00 38       	.word	H'0,H'38
 8d5:	00 00       	nop	
/home/elf.c:76
    memset((char *)phdr->physical_addr + phdr->file_size, 0,
 8d7:	00 3a       	.word	H'0,H'3a
 8d9:	00 07       	.word	H'0,H'7
 8db:	0a c3       	add.l	er4,er3
 8dd:	51 72       	divxu.b	r7h,r2
 8df:	00 1c       	.word	H'0,H'1c
 8e1:	9f 00       	addx	#0x0,r7l
 8e3:	00 00       	nop	
 8e5:	3a 00       	mov.b	r2l,@0x0:8
 8e7:	00 00       	nop	
 8e9:	3c 00       	mov.b	r4l,@0x0:8
 8eb:	08 0a       	add.b	r0h,r2l
 8ed:	c3 51       	or.b	#0x51,r3h
 8ef:	76 70       	band	#0x7,r0h
 8f1:	06 1c       	andc	#0x1c,ccr
/home/elf.c:65
  for (i = 0; i < header->program_header_num; i++) {
 8f3:	9f 00       	addx	#0x0,r7l
 8f5:	00 00       	nop	
 8f7:	3c 00       	mov.b	r4l,@0x0:8
 8f9:	00 00       	nop	
 8fb:	46 00       	bne	.0 (0x8fd)
elf_load():
/home/elf.c:93
  return (char *)header->entry_point;
 8fd:	02 30       	stmac	macl,er0
 8ff:	9f 00       	addx	#0x0,r7l
 901:	00 00       	nop	
 903:	4c 00       	bge	.0 (0x905)
/home/elf.c:88
    return NULL;
 905:	00 00       	nop	
/home/elf.c:94
}
 907:	59 00       	jmp	@er0
 909:	07 0a       	ldc	#0xa,ccr
 90b:	c3 50       	or.b	#0x50,r3h
 90d:	72 00       	bclr	#0x0,r0h
 90f:	1c 9f       	cmp.b	r1l,r7l
	...

00000919 <.LLST6>:
.LLST6():
 919:	00 00       	nop	
check_val():
/home/dram.c:77
{
 91b:	00 8a       	.word	H'0,H'8a
 91d:	00 00       	nop	
/home/dram.c:80
  p->u.val8[0] = wval->u.val8[0]; p->u.val8[1] = wval->u.val8[1];
 91f:	00 b8       	.word	H'0,H'b8
 921:	00 01       	.word	H'0,H'1
 923:	55 00       	bsr	.0 (0x925)
 925:	00 00       	nop	
 927:	b8 00       	subx	#0x0,r0l
 929:	00 00       	nop	
/home/dram.c:81
  p->u.val8[2] = wval->u.val8[2]; p->u.val8[3] = wval->u.val8[3];
 92b:	d1 00       	xor.b	#0x0,r1h
 92d:	01 52       	.word	H'1,H'52
 92f:	00 00       	nop	
 931:	00 d2       	.word	H'0,H'd2
 933:	00 00       	nop	
 935:	00 da       	.word	H'0,H'da
 937:	00 06       	.word	H'0,H'6
 939:	76 70       	band	#0x7,r0h
/home/dram.c:82
  rval.u.val8[0] = p->u.val8[0]; rval.u.val8[1] = p->u.val8[1];
 93b:	06 23       	andc	#0x23,ccr
 93d:	01 9f       	.word	H'1,H'9f
 93f:	00 00       	nop	
 941:	00 da       	.word	H'0,H'da
 943:	00 00       	nop	
 945:	00 e4       	.word	H'0,H'e4
 947:	00 03       	.word	H'0,H'3
/home/dram.c:83
  rval.u.val8[2] = p->u.val8[2]; rval.u.val8[3] = p->u.val8[3];
 949:	72 01       	bclr	#0x0,r1h
 94b:	9f 00       	addx	#0x0,r7l
 94d:	00 00       	nop	
 94f:	e4 00       	and.b	#0x0,r4h
 951:	00 00       	nop	
 953:	fb 00       	mov.b	#0x0,r3l
 955:	01 52       	.word	H'1,H'52
	...

0000095f <.LLST7>:
.LLST7():
 95f:	00 00       	nop	
check_val():
/home/dram.c:85
  if (rval.u.val32[0] != wval->u.val32[0])
 961:	00 8a       	.word	H'0,H'8a
 963:	00 00       	nop	
 965:	01 06       	.word	H'1,H'6
/home/dram.c:86
    return -1;
 967:	00 02       	.word	H'0,H'2
 969:	76 77       	band	#0x7,r7h
 96b:	00 00       	nop	
/home/dram.c:88
  p->u.val16[0] = wval->u.val16[0]; p->u.val16[1] = wval->u.val16[1];
 96d:	01 20       	.word	H'1,H'20
 96f:	00 00       	nop	
 971:	01 22       	.word	H'1,H'22
 973:	00 02       	.word	H'0,H'2
 975:	76 77       	band	#0x7,r7h
	...

0000097f <.LLST8>:
.LLST8():
 97f:	00 00       	nop	
check_val():
/home/dram.c:89
  rval.u.val16[0] = p->u.val16[0]; rval.u.val16[1] = p->u.val16[1];
 981:	00 d2       	.word	H'0,H'd2
 983:	00 00       	nop	
 985:	00 f2       	.word	H'0,H'f2
/home/dram.c:91
  if (rval.u.val32[0] != wval->u.val32[0])
 987:	00 01       	.word	H'0,H'1
 989:	50 00       	mulxu.b	r0h,r0
 98b:	00 00       	nop	
 98d:	f2 00       	mov.b	#0x0,r2h
 98f:	00 00       	nop	
 991:	f8 00       	mov.b	#0x0,r0l
 993:	02 72       	stc	sbr,er2
/home/dram.c:94
  p->u.val32[0] = wval->u.val32[0];
 995:	7f 00       	.word	H'7f,H'0
 997:	00 00       	nop	
 999:	00 00       	nop	
 99b:	00 00       	nop	
	...

0000099e <.LLST9>:
.LLST9():
 99e:	00 00       	nop	
check_val():
/home/dram.c:95
  rval.u.val32[0] = p->u.val32[0];
 9a0:	00 92       	.word	H'0,H'92
 9a2:	00 00       	nop	
 9a4:	00 a0       	.word	H'0,H'a0
/home/dram.c:97
  if (rval.u.val32[0] != wval->u.val32[0])
 9a6:	00 01       	.word	H'0,H'1
 9a8:	50 00       	mulxu.b	r0h,r0
 9aa:	00 00       	nop	
 9ac:	a4 00       	cmp.b	#0x0,r4h
 9ae:	00 00       	nop	
 9b0:	aa 00       	cmp.b	#0x0,r2l
 9b2:	08 76       	add.b	r7h,r6h
 9b4:	77 94       	bild	#0x1,r4h
 9b6:	01 70       	.word	H'1,H'70
 9b8:	00 27       	.word	H'0,H'27
 9ba:	9f 00       	addx	#0x0,r7l
/home/dram.c:101
}
 9bc:	00 00       	nop	
 9be:	aa 00       	cmp.b	#0x0,r2l
 9c0:	00 00       	nop	
 9c2:	b8 00       	subx	#0x0,r0l
dram_check2_val0():
/home/dram.c:139
static uint32 dram_check2_val0(uint32 *addr) {  return  0x55555555UL; }
 9c4:	01 50       	.word	H'1,H'50
	...

000009ce <.LLST10>:
.LLST10():
 9ce:	00 00       	nop	
dram_check2_val0():
/home/dram.c:139
 9d0:	00 b8       	.word	H'0,H'b8
 9d2:	00 00       	nop	
 9d4:	00 d1       	.word	H'0,H'd1
dram_check2_val1():
/home/dram.c:140
static uint32 dram_check2_val1(uint32 *addr) {  return  0xaaaaaaaaUL; }
 9d6:	00 01       	.word	H'0,H'1
 9d8:	53 00       	divxu.w	r0,er0
 9da:	00 00       	nop	
 9dc:	e2 00       	and.b	#0x0,r2h
 9de:	00 00       	nop	
 9e0:	fb 00       	mov.b	#0x0,r3l
 9e2:	01 53       	.word	H'1,H'53
 9e4:	00 00       	nop	
 9e6:	00 fc       	.word	H'0,H'fc
dram_check2_val2():
/home/dram.c:141
static uint32 dram_check2_val2(uint32 *addr) {  return  0x00000000UL; }
 9e8:	00 00       	nop	
 9ea:	01 06       	.word	H'1,H'6
 9ec:	00 08       	.word	H'0,H'8
 9ee:	70 00       	bset	#0x0,r0h
 9f0:	76 6f       	band	#0x6,r7l
 9f2:	94 01       	addx	#0x1,r4h
 9f4:	27 9f       	mov.b	@0x9f:8,r7h
	...

000009fe <.LLST11>:
.LLST11():
 9fe:	00 00       	nop	
dram_check2_val3():
/home/dram.c:142
static uint32 dram_check2_val3(uint32 *addr) {  return  0xffffffffUL; }
 a00:	00 b8       	.word	H'0,H'b8
 a02:	00 00       	nop	
 a04:	00 d1       	.word	H'0,H'd1
dram_check2_val4():
/home/dram.c:143
static uint32 dram_check2_val4(uint32 *addr) {  return  (uint32)addr; }
 a06:	00 06       	.word	H'0,H'6
 a08:	72 00       	bclr	#0x0,r0h
 a0a:	75 00       	bxor	#0x0,r0h
 a0c:	1c 9f       	cmp.b	r1l,r7l
 a0e:	00 00       	nop	
 a10:	00 e2       	.word	H'0,H'e2
dram_check2_val5():
/home/dram.c:144
static uint32 dram_check2_val5(uint32 *addr) {  return ~(uint32)addr; }
 a12:	00 00       	nop	
 a14:	00 e4       	.word	H'0,H'e4
 a16:	00 08       	.word	H'0,H'8
 a18:	72 00       	bclr	#0x0,r0h
 a1a:	75 00       	bxor	#0x0,r0h
 a1c:	1c 23       	cmp.b	r2h,r3h
 a1e:	01 9f       	.word	H'1,H'9f
dram_init():
/home/dram.c:29
{
 a20:	00 00       	nop	
 a22:	00 e4       	.word	H'0,H'e4
 a24:	00 00       	nop	
/home/dram.c:37
  *H8_3069F_ABWCR  = 0xff;
 a26:	00 fb       	.word	H'0,H'fb
 a28:	00 06       	.word	H'0,H'6
 a2a:	72 00       	bclr	#0x0,r0h
 a2c:	75 00       	bxor	#0x0,r0h
/home/dram.c:41
  *H8_3069F_RTCOR  = 0x03; /* リフレッシュ周期を短めに設定 */
 a2e:	1c 9f       	cmp.b	r1l,r7l
	...

00000a38 <.LLST0>:
.LLST0():
 a38:	00 00       	nop	
dram_init():
/home/dram.c:44
  *H8_3069F_RTMCSR = 0x37;
 a3a:	00 00       	nop	
 a3c:	00 00       	nop	
/home/dram.c:49
  *H8_3069F_DRCRB  = 0x98;
 a3e:	00 1f       	.word	H'0,H'1f
 a40:	00 01       	.word	H'0,H'1
 a42:	50 00       	mulxu.b	r0h,r0
 a44:	00 00       	nop	
/home/dram.c:53
  *H8_3069F_DRCRA  = 0x30;
 a46:	1f 00       	das	r0h
 a48:	00 00       	nop	
 a4a:	de 00       	xor.b	#0x0,r6l
 a4c:	01 55       	.word	H'1,H'55
/home/dram.c:55
  *H8_3069F_P1DDR  = 0xff;
 a4e:	00 00       	nop	
 a50:	00 de       	.word	H'0,H'de
 a52:	00 00       	nop	
/home/dram.c:56
  *H8_3069F_P2DDR  = 0x07;
 a54:	00 e8       	.word	H'0,H'e8
 a56:	00 04       	.word	H'0,H'4
 a58:	f3 01       	mov.b	#0x1,r3h
 a5a:	50 9f       	mulxu.b	r1l,e7
	...

00000a64 <.LLST1>:
.LLST1():
 a64:	00 00       	nop	
dram_init():
/home/dram.c:62
  *H8_3069F_WCRL = 0xcf;
 a66:	00 12       	.word	H'0,H'12
 a68:	00 00       	nop	
 a6a:	00 1f       	.word	H'0,H'1f
/home/dram.c:68
  *H8_3069F_ASTCR = 0xfb; /* 2ステートアクセス */
 a6c:	00 01       	.word	H'0,H'1
 a6e:	50 00       	mulxu.b	r0h,r0
 a70:	00 00       	nop	
 a72:	1f 00       	das	r0h
/home/dram.c:74
}
 a74:	00 00       	nop	
 a76:	de 00       	xor.b	#0x0,r6l
 a78:	01 55       	.word	H'1,H'55
 a7a:	00 00       	nop	
dram_check():
/home/dram.c:104
{
 a7c:	00 de       	.word	H'0,H'de
 a7e:	00 00       	nop	
 a80:	00 e8       	.word	H'0,H'e8
 a82:	00 04       	.word	H'0,H'4
 a84:	f3 01       	mov.b	#0x1,r3h
 a86:	50 9f       	mulxu.b	r1l,e7
	...

00000a90 <.LLST2>:
.LLST2():
 a90:	00 00       	nop	
dram_check():
/home/dram.c:111
  for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 a92:	00 12       	.word	H'0,H'12
 a94:	00 00       	nop	
 a96:	00 1f       	.word	H'0,H'1f
/home/dram.c:112
    putxval((unsigned long)p, 8);
 a98:	00 01       	.word	H'0,H'1
 a9a:	50 00       	mulxu.b	r0h,r0
 a9c:	00 00       	nop	
 a9e:	1f 00       	das	r0h
 aa0:	00 00       	nop	
/home/dram.c:115
    val.u.val32[0] = (uint32)p;
 aa2:	de 00       	xor.b	#0x0,r6l
 aa4:	01 55       	.word	H'1,H'55
 aa6:	00 00       	nop	
/home/dram.c:116
    if (check_val((val_t *)p, &val) < 0)
 aa8:	00 de       	.word	H'0,H'de
 aaa:	00 00       	nop	
 aac:	00 e8       	.word	H'0,H'e8
 aae:	00 04       	.word	H'0,H'4
 ab0:	f3 01       	mov.b	#0x1,r3h
 ab2:	50 9f       	mulxu.b	r1l,e7
	...

00000abc <.LLST3>:
.LLST3():
 abc:	00 00       	nop	
dram_check():
/home/dram.c:119
    val.u.val32[0] = 0;
 abe:	00 68       	.word	H'0,H'68
/home/dram.c:120
    if (check_val((val_t *)p, &val) < 0)
 ac0:	00 00       	nop	
 ac2:	00 a1       	.word	H'0,H'a1
 ac4:	00 01       	.word	H'0,H'1
 ac6:	53 00       	divxu.w	r0,er0
 ac8:	00 00       	nop	
 aca:	c6 00       	or.b	#0x0,r6h
 acc:	00 00       	nop	
 ace:	ce 00       	or.b	#0x0,r6l
/home/dram.c:123
    val.u.val32[0] = 0xffffffffUL;
 ad0:	01 53       	.word	H'1,H'53
	...

00000ada <.LLST4>:
.LLST4():
 ada:	00 00       	nop	
dram_check():
/home/dram.c:124
    if (check_val((val_t *)p, &val) < 0)
 adc:	00 7c       	.word	H'0,H'7c
 ade:	00 00       	nop	
 ae0:	00 b4       	.word	H'0,H'b4
 ae2:	00 01       	.word	H'0,H'1
 ae4:	54 00       	rts/l	er0
 ae6:	00 00       	nop	
 ae8:	00 00       	nop	
/home/dram.c:127 (discriminator 2)
    puts("\x08\x08\x08\x08\x08\x08\x08\x08");
 aea:	00 00       	nop	
	...

00000aed <.LLST10>:
.LLST10():
 aed:	00 00       	nop	
dram_check():
/home/dram.c:127 (discriminator 2)
 aef:	03 b8       	ldmac	er0,macl
 af1:	00 00       	nop	
 af3:	03 c0       	.word	H'3,H'c0
/home/dram.c:111
  for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 af5:	00 04       	.word	H'0,H'4
 af7:	40 42       	bra	.+66 (0xb3b)
 af9:	24 9f       	mov.b	@0x9f:8,r4h
 afb:	00 00       	nop	
 afd:	03 c0       	.word	H'3,H'c0
/home/dram.c:129
  puts("\nall check OK.\n");
 aff:	00 00       	nop	
 b01:	03 d7       	.word	H'3,H'd7
 b03:	00 01       	.word	H'0,H'1
 b05:	52 00       	mulxu.w	r0,er0
 b07:	00 00       	nop	
/home/dram.c:130
  return 0;
 b09:	00 00       	nop	
 b0b:	00 00       	nop	
	...

00000b0e <.LLST7>:
.LLST7():
 b0e:	00 00       	nop	
dram_check():
/home/dram.c:133
  puts("\nERROR: ");
 b10:	02 86       	.word	H'2,H'86
 b12:	00 00       	nop	
 b14:	02 8c       	.word	H'2,H'8c
/home/dram.c:134
  putxval((unsigned long)*p, 8);
 b16:	00 04       	.word	H'0,H'4
 b18:	40 42       	bra	.+66 (0xb5c)
 b1a:	24 9f       	mov.b	@0x9f:8,r4h
 b1c:	00 00       	nop	
 b1e:	02 8c       	.word	H'2,H'8c
 b20:	00 00       	nop	
/home/dram.c:135
  puts("\n");
 b22:	02 ca       	.word	H'2,H'ca
 b24:	00 01       	.word	H'0,H'1
 b26:	54 00       	rts/l	er0
 b28:	00 02       	.word	H'0,H'2
 b2a:	ca 00       	or.b	#0x0,r2l
/home/dram.c:136
  return -1;
 b2c:	00 02       	.word	H'0,H'2
 b2e:	d0 00       	xor.b	#0x0,r0h
/home/dram.c:137
}
 b30:	04 40       	orc	#0x40,ccr
 b32:	42 24       	bhi	.+36 (0xb58)
 b34:	9f 00       	addx	#0x0,r7l
 b36:	00 02       	.word	H'0,H'2
 b38:	d0 00       	xor.b	#0x0,r0h
 b3a:	00 03       	.word	H'0,H'3
dram_check2():
/home/dram.c:147
{
 b3c:	6c 00       	mov.b	@er0+,r0h
 b3e:	01 54       	.word	H'1,H'54
	...

00000b48 <.LLST8>:
.LLST8():
 b48:	00 00       	nop	
dram_check2():
/home/dram.c:147
 b4a:	02 3a       	stmac	macl,er2
 b4c:	00 00       	nop	
 b4e:	02 6a       	stc	vbr,er2
/home/dram.c:150
  uint32 (*getval[])(uint32 *) = {
 b50:	00 02       	.word	H'0,H'2
 b52:	30 9f       	mov.b	r0h,@0x9f:8
 b54:	00 00       	nop	
 b56:	02 6a       	stc	vbr,er2
 b58:	00 00       	nop	
 b5a:	03 22       	ldmac	er2,mach
 b5c:	00 02       	.word	H'0,H'2
 b5e:	76 52       	band	#0x5,r2h
 b60:	00 00       	nop	
 b62:	03 22       	ldmac	er2,mach
 b64:	00 00       	nop	
 b66:	03 2a       	ldmac	er2,mach
 b68:	00 03       	.word	H'0,H'3
 b6a:	09 ff       	add.w	e7,e7
 b6c:	9f 00       	addx	#0x0,r7l
 b6e:	00 03       	.word	H'0,H'3
 b70:	2a 00       	mov.b	@0x0:8,r2l
 b72:	00 03       	.word	H'0,H'3
/home/dram.c:160
  for (i = 0; getval[i]; i++) {
 b74:	a6 00       	cmp.b	#0x0,r6h
/home/dram.c:149
  int ret = 0, i;
 b76:	02 76       	stc	sbr,er6
 b78:	52 00       	mulxu.w	r0,er0
 b7a:	00 03       	.word	H'0,H'3
/home/dram.c:160
  for (i = 0; getval[i]; i++) {
 b7c:	a6 00       	cmp.b	#0x0,r6h
 b7e:	00 03       	.word	H'0,H'3
/home/dram.c:162
    puts("DRAM check pattern: ");
 b80:	a8 00       	cmp.b	#0x0,r0l
 b82:	02 91       	.word	H'2,H'91
 b84:	4a 00       	bpl	.0 (0xb86)
 b86:	00 00       	nop	
 b88:	00 00       	nop	
/home/dram.c:163
    putxval(i, 0);
 b8a:	00 00       	nop	
	...

00000b8d <.LLST9>:
.LLST9():
 b8d:	00 00       	nop	
dram_check2():
/home/dram.c:163
 b8f:	02 50       	.word	H'2,H'50
 b91:	00 00       	nop	
/home/dram.c:165
    puts("\nDRAM setting...\n");
 b93:	02 6a       	stc	vbr,er2
 b95:	00 02       	.word	H'0,H'2
 b97:	30 9f       	mov.b	r0h,@0x9f:8
 b99:	00 00       	nop	
 b9b:	02 6a       	stc	vbr,er2
/home/dram.c:167
    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 b9d:	00 00       	nop	
 b9f:	03 5c       	.word	H'3,H'5c
 ba1:	00 01       	.word	H'0,H'1
/home/dram.c:168
      *p = getval[i](p);
 ba3:	55 00       	bsr	.0 (0xba5)
 ba5:	00 03       	.word	H'0,H'3
 ba7:	5c 00 00 03 	bsr	.+3 (0xbae)
 bab:	5e 00 03 75 	jsr	@0x375:24
 baf:	01 9f       	.word	H'1,H'9f
/home/dram.c:169
      if (!((uint32)p & 0xfff)) {
 bb1:	00 00       	nop	
 bb3:	03 5e       	.word	H'3,H'5e
 bb5:	00 00       	nop	
 bb7:	03 9e       	.word	H'3,H'9e
/home/dram.c:170
	putxval((unsigned long)p, 8);
 bb9:	00 01       	.word	H'0,H'1
 bbb:	55 00       	bsr	.0 (0xbbd)
 bbd:	00 00       	nop	
 bbf:	00 00       	nop	
 bc1:	00 00       	nop	
	...

00000bc4 <.LLST5>:
.LLST5():
 bc4:	00 00       	nop	
dram_check2():
/home/dram.c:171
	puts("\x08\x08\x08\x08\x08\x08\x08\x08");
 bc6:	00 fc       	.word	H'0,H'fc
 bc8:	00 00       	nop	
 bca:	01 04       	.word	H'1,H'4
/home/dram.c:167 (discriminator 2)
    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 bcc:	00 01       	.word	H'0,H'1
 bce:	50 00       	mulxu.b	r0h,r0
 bd0:	00 01       	.word	H'0,H'1
 bd2:	04 00       	orc	#0x0,ccr
 bd4:	00 01       	.word	H'0,H'1
/home/dram.c:175
    puts("\nDRAM checking...\n");
 bd6:	0a 00       	inc	r0h
 bd8:	04 70       	orc	#0x70,ccr
 bda:	00 20       	.word	H'0,H'20
 bdc:	9f 00       	addx	#0x0,r7l
 bde:	00 00       	nop	
/home/dram.c:177
    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 be0:	00 00       	nop	
 be2:	00 00       	nop	
	...

00000be5 <.LLST4>:
.LLST4():
 be5:	00 00       	nop	
dram_check2():
/home/dram.c:178
      if (*p != getval[i](p)) {
 be7:	00 e0       	.word	H'0,H'e0
 be9:	00 00       	nop	
 beb:	00 ea       	.word	H'0,H'ea
 bed:	00 01       	.word	H'0,H'1
 bef:	50 00       	mulxu.b	r0h,r0
 bf1:	00 00       	nop	
 bf3:	ea 00       	and.b	#0x0,r2l
 bf5:	00 00       	nop	
 bf7:	f0 00       	mov.b	#0x0,r0h
 bf9:	04 f3       	orc	#0xf3,ccr
 bfb:	01 50       	.word	H'1,H'50
 bfd:	9f 00       	addx	#0x0,r7l
 bff:	00 00       	nop	
 c01:	00 00       	nop	
 c03:	00 00       	nop	
	...

00000c06 <.LLST3>:
.LLST3():
 c06:	00 00       	nop	
dram_check2():
/home/dram.c:179
	puts("\nERROR! :");
 c08:	00 d2       	.word	H'0,H'd2
 c0a:	00 00       	nop	
 c0c:	00 da       	.word	H'0,H'da
/home/dram.c:180
	putxval((unsigned long)p, 8);
 c0e:	00 01       	.word	H'0,H'1
 c10:	50 00       	mulxu.b	r0h,r0
 c12:	00 00       	nop	
 c14:	da 00       	xor.b	#0x0,r2l
 c16:	00 00       	nop	
/home/dram.c:181
	puts(" ");
 c18:	e0 00       	and.b	#0x0,r0h
 c1a:	04 f3       	orc	#0xf3,ccr
 c1c:	01 50       	.word	H'1,H'50
 c1e:	9f 00       	addx	#0x0,r7l
 c20:	00 00       	nop	
/home/dram.c:182
	putxval((unsigned long)*p, 8);
 c22:	00 00       	nop	
 c24:	00 00       	nop	
	...

00000c27 <.LLST2>:
.LLST2():
 c27:	00 00       	nop	
dram_check2():
/home/dram.c:182
 c29:	00 c0       	.word	H'0,H'c0
 c2b:	00 00       	nop	
 c2d:	00 cc       	.word	H'0,H'cc
/home/dram.c:183
	puts("\n");
 c2f:	00 01       	.word	H'0,H'1
 c31:	50 00       	mulxu.b	r0h,r0
 c33:	00 00       	nop	
 c35:	cc 00       	or.b	#0x0,r4l
 c37:	00 00       	nop	
/home/dram.c:184
	ret = -1;
 c39:	d2 00       	xor.b	#0x0,r2h
 c3b:	04 f3       	orc	#0xf3,ccr
 c3d:	01 50       	.word	H'1,H'50
 c3f:	9f 00       	addx	#0x0,r7l
/home/dram.c:186
      if (!((uint32)p & 0xfff)) {
 c41:	00 00       	nop	
 c43:	00 00       	nop	
 c45:	00 00       	nop	
	...

00000c48 <.LLST1>:
.LLST1():
 c48:	00 00       	nop	
dram_check2():
/home/dram.c:187
	putxval((unsigned long)p, 8);
 c4a:	00 ae       	.word	H'0,H'ae
 c4c:	00 00       	nop	
 c4e:	00 ba       	.word	H'0,H'ba
 c50:	00 01       	.word	H'0,H'1
/home/dram.c:188
	puts("\x08\x08\x08\x08\x08\x08\x08\x08");
 c52:	50 00       	mulxu.b	r0h,r0
 c54:	00 00       	nop	
 c56:	ba 00       	subx	#0x0,r2l
 c58:	00 00       	nop	
 c5a:	c0 00       	or.b	#0x0,r0h
/home/dram.c:177 (discriminator 2)
    for (p = (uint32 *)DRAM_START; p < (uint32 *)DRAM_END; p++) {
 c5c:	04 f3       	orc	#0xf3,ccr
 c5e:	01 50       	.word	H'1,H'50
 c60:	9f 00       	addx	#0x0,r7l
 c62:	00 00       	nop	
 c64:	00 00       	nop	
 c66:	00 00       	nop	
	...

00000c69 <.LLST6>:
.LLST6():
 c69:	00 00       	nop	
dram_check2():
/home/dram.c:192
    puts("\n");
 c6b:	01 7c       	.word	H'1,H'7c
 c6d:	00 00       	nop	
 c6f:	01 82       	.word	H'1,H'82
 c71:	00 04       	.word	H'0,H'4
 c73:	40 42       	bra	.+66 (0xcb7)
 c75:	24 9f       	mov.b	@0x9f:8,r4h
 c77:	00 00       	nop	
 c79:	01 82       	.word	H'1,H'82
 c7b:	00 00       	nop	
 c7d:	02 20       	stmac	mach,er0
 c7f:	00 01       	.word	H'0,H'1
 c81:	54 00       	rts/l	er0
/home/dram.c:160 (discriminator 1)
  for (i = 0; getval[i]; i++) {
 c83:	00 00       	nop	
 c85:	00 00       	nop	
 c87:	00 00       	nop	
	...

00000c8a <.LLST0>:
.LLST0():
 c8a:	00 00       	nop	
dram_check2():
/home/dram.c:160 (discriminator 1)
 c8c:	00 00       	nop	
 c8e:	00 00       	nop	
 c90:	00 54       	.word	H'0,H'54
 c92:	00 01       	.word	H'0,H'1
 c94:	50 00       	mulxu.b	r0h,r0
/home/dram.c:196
  if (ret == 0) {
 c96:	00 00       	nop	
 c98:	54 00       	rts/l	er0
 c9a:	00 00       	nop	
/home/dram.c:197
    puts("\nall check OK.\n");
 c9c:	56 00       	rte/l	er0
 c9e:	04 f3       	orc	#0xf3,ccr
 ca0:	01 50       	.word	H'1,H'50
 ca2:	9f 00       	addx	#0x0,r7l
 ca4:	00 00       	nop	
/home/dram.c:201
}
 ca6:	56 00       	rte/l	er0
 ca8:	00 00       	nop	
 caa:	9e 00       	addx	#0x0,r6l
 cac:	01 50       	.word	H'1,H'50
 cae:	00 00       	nop	
 cb0:	00 9e       	.word	H'0,H'9e
 cb2:	00 00       	nop	
 cb4:	00 ae       	.word	H'0,H'ae
 cb6:	00 04       	.word	H'0,H'4
 cb8:	f3 01       	mov.b	#0x1,r3h
 cba:	50 9f       	mulxu.b	r1l,e7
	...

Disassembly of section .debug_ranges:

00000000 <.Ldebug_ranges0>:
.Ldebug_ranges0():
   0:	00 00       	nop	
   2:	0c f6       	mov.b	r7l,r6h
   4:	00 00       	nop	
   6:	0e f2       	addx	r7l,r2h
	...

00000010 <.Ldebug_ranges0>:
  10:	00 00       	nop	
  12:	00 38       	.word	H'0,H'38
  14:	00 00       	nop	
  16:	00 46       	.word	H'0,H'46
  18:	00 00       	nop	
  1a:	00 4c       	.word	H'0,H'4c
  1c:	00 00       	nop	
  1e:	00 66       	.word	H'0,H'66
	...
